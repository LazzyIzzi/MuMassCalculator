package nist.MuMassData;
/**
 * @author John H Dunsmuir
 * @hidden
 */

import jhd.MathTools.Interpolation;


class MassAttenuationIN {

	final static double[] MeV= {1.00000E-03,1.50000E-03,2.00000E-03,3.00000E-03,3.73000E-03,3.73010E-03,3.83300E-03,3.93800E-03,3.93810E-03,
			4.00000E-03,4.23700E-03,4.23710E-03,5.00000E-03,6.00000E-03,8.00000E-03,1.00000E-02,1.50000E-02,2.00000E-02,2.79400E-02,
			2.79401E-02,3.00000E-02,4.00000E-02,5.00000E-02,6.00000E-02,8.00000E-02,1.00000E-01,1.50000E-01,2.00000E-01,3.00000E-01,
			4.00000E-01,5.00000E-01,6.00000E-01,8.00000E-01,1.00000E+00,1.02200E+00,1.25000E+00,1.50000E+00,2.00000E+00,2.04400E+00,
			3.00000E+00,4.00000E+00,5.00000E+00,6.00000E+00,7.00000E+00,8.00000E+00,9.00000E+00,1.00000E+01,1.10000E+01,1.20000E+01,
			1.30000E+01,1.40000E+01,1.50000E+01,1.60000E+01,1.80000E+01,2.00000E+01,2.20000E+01,2.40000E+01,2.60000E+01,2.80000E+01,
			3.00000E+01,4.00000E+01,5.00000E+01,6.00000E+01,8.00000E+01,1.00000E+02,1.50000E+02,2.00000E+02,3.00000E+02,4.00000E+02,
			5.00000E+02,6.00000E+02,8.00000E+02,1.00000E+03,1.50000E+03,2.00000E+03,3.00000E+03,4.00000E+03,5.00000E+03,6.00000E+03,
			8.00000E+03,1.00000E+04,1.50000E+04,2.00000E+04,3.00000E+04,4.00000E+04,5.00000E+04,6.00000E+04,8.00000E+04,1.00000E+05};
	final static double[] Coh= {7.9510E+00,7.5370E+00,7.0860E+00,6.1940E+00,5.5960E+00,5.5960E+00,5.5150E+00,5.4340E+00,5.4340E+00,5.3860E+00,5.2120E+00,5.2120E+00,4.6910E+00,4.1060E+00,3.2260E+00,2.6250E+00,1.7270E+00,1.2090E+00,7.5470E-01,7.5470E-01,6.8080E-01,4.4440E-01,3.1460E-01,2.3360E-01,1.4290E-01,9.6720E-02,4.6970E-02,2.7700E-02,1.2880E-02,7.4060E-03,4.8000E-03,3.3600E-03,1.9080E-03,1.2270E-03,1.1750E-03,7.8830E-04,5.4810E-04,3.0900E-04,2.9590E-04,1.3750E-04,7.7410E-05,4.9540E-05,3.4410E-05,2.5290E-05,1.9360E-05,1.5290E-05,1.2390E-05,1.0240E-05,8.6070E-06,7.3320E-06,6.3200E-06,5.5070E-06,4.8400E-06,3.8250E-06,3.0980E-06,2.5600E-06,2.1510E-06,1.8330E-06,1.5810E-06,1.3770E-06,7.7470E-07,4.9560E-07,3.4420E-07,1.9360E-07,1.2390E-07,5.5070E-08,3.0980E-08,1.3770E-08,7.7470E-09,4.9560E-09,3.4420E-09,1.9360E-09,1.2390E-09,5.5070E-10,3.0980E-10,1.3770E-10,7.7470E-11,4.9560E-11,3.4420E-11,1.9360E-11,1.2390E-11,5.5070E-12,3.0980E-12,1.3770E-12,7.7470E-13,4.9560E-13,3.4420E-13,1.9360E-13,1.2390E-13};
	final static double[] Incoh= {5.4550E-03,9.8710E-03,1.4170E-02,2.2040E-02,2.7300E-02,2.7300E-02,2.8010E-02,2.8740E-02,2.8740E-02,2.9160E-02,3.0760E-02,3.0760E-02,3.5680E-02,4.1680E-02,5.2450E-02,6.1780E-02,7.8620E-02,8.9530E-02,1.0060E-01,1.0060E-01,1.0260E-01,1.0950E-01,1.1310E-01,1.1480E-01,1.1500E-01,1.1320E-01,1.0640E-01,9.9600E-02,8.8380E-02,7.9930E-02,7.3430E-02,6.8130E-02,6.0050E-02,5.4070E-02,5.3550E-02,4.8430E-02,4.4050E-02,3.7620E-02,3.7150E-02,2.9610E-02,2.4710E-02,2.1340E-02,1.8870E-02,1.6960E-02,1.5430E-02,1.4190E-02,1.3140E-02,1.2260E-02,1.1500E-02,1.0830E-02,1.0250E-02,9.7290E-03,9.2680E-03,8.4700E-03,7.8100E-03,7.2540E-03,6.7760E-03,6.3670E-03,6.0050E-03,5.6850E-03,4.5180E-03,3.7710E-03,3.2490E-03,2.5630E-03,2.1270E-03,1.5150E-03,1.1870E-03,8.4180E-04,6.5930E-04,5.4600E-04,4.6730E-04,3.6490E-04,3.0020E-04,2.0970E-04,1.6230E-04,1.1280E-04,8.7120E-05,7.1230E-05,6.0370E-05,4.6520E-05,3.7980E-05,2.6250E-05,2.0180E-05,1.3920E-05,1.0680E-05,8.7010E-06,7.3530E-06,5.6380E-06,4.5890E-06};
	final static double[] PE= {7.7990E+03,3.1230E+03,1.5710E+03,5.7480E+02,3.3000E+02,1.0410E+03,9.8150E+02,9.2570E+02,1.2470E+03,1.2250E+03,1.0610E+03,1.2180E+03,8.0880E+02,5.0300E+02,2.3580E+02,1.2940E+02,4.2650E+01,1.9140E+01,7.4580E+00,4.6470E+01,3.8700E+01,1.8170E+01,9.8760E+00,5.9580E+00,2.6490E+00,1.3990E+00,4.3420E-01,1.8940E-01,6.0160E-02,2.7560E-02,1.5480E-02,9.8920E-03,5.1090E-03,3.1890E-03,3.0340E-03,2.0470E-03,1.4660E-03,8.9370E-04,8.6230E-04,4.7510E-04,3.1530E-04,2.3350E-04,1.8450E-04,1.5200E-04,1.2910E-04,1.1200E-04,9.8920E-05,8.8480E-05,8.0040E-05,7.3010E-05,6.7130E-05,6.2100E-05,5.7800E-05,5.0720E-05,4.5180E-05,4.0720E-05,3.7060E-05,3.4000E-05,3.1410E-05,2.9180E-05,2.1540E-05,1.7060E-05,1.4120E-05,1.0510E-05,8.3660E-06,5.5390E-06,4.1400E-06,2.7510E-06,2.0600E-06,1.6460E-06,1.3710E-06,1.0270E-06,8.2130E-07,5.4700E-07,4.1030E-07,2.7340E-07,2.0500E-07,1.6400E-07,1.3670E-07,1.0250E-07,8.1980E-08,5.4650E-08,4.0990E-08,2.7330E-08,2.0490E-08,1.6400E-08,1.3660E-08,1.0250E-08,8.1980E-09};
	final static double[] PrProdN= {0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,1.6850E-04,7.8460E-04,2.6940E-03,2.8820E-03,6.9130E-03,1.0680E-02,1.3940E-02,1.6750E-02,1.9250E-02,2.1510E-02,2.3560E-02,2.5430E-02,2.7160E-02,2.8760E-02,3.0240E-02,3.1590E-02,3.2850E-02,3.4030E-02,3.6170E-02,3.8090E-02,3.9830E-02,4.1410E-02,4.2860E-02,4.4180E-02,4.5400E-02,5.0350E-02,5.4020E-02,5.6850E-02,6.1100E-02,6.4090E-02,6.8860E-02,7.1700E-02,7.5000E-02,7.6890E-02,7.8150E-02,7.9040E-02,8.0250E-02,8.1030E-02,8.2130E-02,8.2760E-02,8.3390E-02,8.3760E-02,8.3970E-02,8.4130E-02,8.4340E-02,8.4490E-02,8.4650E-02,8.4760E-02,8.4860E-02,8.4910E-02,8.4910E-02,8.4970E-02,8.4970E-02,8.5020E-02};
	final static double[] PrProdE= {0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,1.0360E-05,4.2260E-05,8.4130E-05,1.2910E-04,1.7380E-04,2.1710E-04,2.5860E-04,2.9800E-04,3.3520E-04,3.7030E-04,4.0340E-04,4.3490E-04,4.6460E-04,4.9290E-04,5.4550E-04,5.9320E-04,6.3670E-04,6.7660E-04,7.1330E-04,7.4790E-04,7.7990E-04,9.1160E-04,1.0120E-03,1.0910E-03,1.2110E-03,1.2980E-03,1.4420E-03,1.5310E-03,1.6420E-03,1.7080E-03,1.7530E-03,1.7860E-03,1.8320E-03,1.8620E-03,1.9080E-03,1.9330E-03,1.9610E-03,1.9770E-03,1.9870E-03,1.9950E-03,2.0040E-03,2.0100E-03,2.0180E-03,2.0230E-03,2.0270E-03,2.0300E-03,2.0320E-03,2.0330E-03,2.0340E-03,2.0350E-03};
	final static double[] TotAttn= {7.8070E+03,3.1310E+03,1.5780E+03,5.8110E+02,3.3560E+02,1.0460E+03,9.8700E+02,9.3120E+02,1.2520E+03,1.2310E+03,1.0660E+03,1.2230E+03,8.1350E+02,5.0720E+02,2.3900E+02,1.3210E+02,4.4450E+01,2.0440E+01,8.3140E+00,4.7320E+01,3.9490E+01,1.8730E+01,1.0300E+01,6.3060E+00,2.9060E+00,1.6090E+00,5.8760E-01,3.1670E-01,1.6140E-01,1.1490E-01,9.3710E-02,8.1380E-02,6.7070E-02,5.8490E-02,5.7760E-02,5.1430E-02,4.6850E-02,4.1510E-02,4.1190E-02,3.7150E-02,3.5820E-02,3.5640E-02,3.5960E-02,3.6560E-02,3.7310E-02,3.8130E-02,3.8990E-02,3.9860E-02,4.0710E-02,4.1550E-02,4.2350E-02,4.3120E-02,4.3850E-02,4.5240E-02,4.6540E-02,4.7770E-02,4.8910E-02,4.9970E-02,5.0960E-02,5.1900E-02,5.5800E-02,5.8820E-02,6.1210E-02,6.4890E-02,6.7520E-02,7.1830E-02,7.4420E-02,7.7490E-02,7.9260E-02,8.0450E-02,8.1290E-02,8.2440E-02,8.3200E-02,8.4250E-02,8.4860E-02,8.5470E-02,8.5820E-02,8.6030E-02,8.6180E-02,8.6390E-02,8.6540E-02,8.6700E-02,8.6800E-02,8.6900E-02,8.6960E-02,8.6950E-02,8.7010E-02,8.7010E-02,8.7060E-02};

	//******************************************************************************

	/**
	 * @return The array of tabulated photon energies
	 */
	public double[] getMevArray()
	{
		return MeV;
	}

	//******************************************************************************

	public double getMuMass(double theMeV, String muMassType)
	{
		double[] muArr;
		double muMass;
		double muLo = 0;
		double muHi = 0;
		double mevLo = 0;
		double mevHi = 0;

		switch(muMassType)
		{
		case "TotAttn":
			muArr = TotAttn;
			break;
		case "Raleigh":
			muArr = Coh;
			break;
		case "Compton":
			muArr = Incoh;
			break;
		case "PhotoElectric":
			muArr = PE;
			break;
		case "PairProdN":
			muArr = PrProdN;
			break;
		case "PairProdE":
			muArr = PrProdE;
			break;
		default:
			muArr = TotAttn;
			break;
		}

		//Report the muMass at 100GeV for any energy at or above 100GeV
		if(theMeV >= 100000.0)
		{
			muMass = muArr[muArr.length - 1];
		}			
		else
		{
			//Look everywhere except the last point
			for(int i = 0; i< muArr.length - 1;i++)
			{
				if(MeV[i] <= theMeV && MeV[i + 1] > theMeV)
				{
					mevLo = MeV[i];
					mevHi = MeV[i+1];
					muLo = muArr[i];
					muHi = muArr[i + 1];
					break;
				}
			}
			if(muLo ==0) muMass = 0.0;
			else muMass = Interpolation.logTerp(mevLo, mevHi, theMeV, muLo, muHi);
		}
		return muMass;
	}		
}
