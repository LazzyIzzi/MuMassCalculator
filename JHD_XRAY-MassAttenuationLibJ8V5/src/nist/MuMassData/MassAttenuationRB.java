package nist.MuMassData;
/**
 * @author John H Dunsmuir
 * @hidden
 */

import jhd.MathTools.Interpolation;


class MassAttenuationRB {

	final static double[] MeV= {1.00000E-03,1.50000E-03,1.80400E-03,1.80401E-03,1.83400E-03,1.86400E-03,1.86401E-03,2.00000E-03,2.06500E-03,
			2.06501E-03,3.00000E-03,4.00000E-03,5.00000E-03,6.00000E-03,8.00000E-03,1.00000E-02,1.50000E-02,1.52000E-02,1.52001E-02,
			2.00000E-02,3.00000E-02,4.00000E-02,5.00000E-02,6.00000E-02,8.00000E-02,1.00000E-01,1.50000E-01,2.00000E-01,3.00000E-01,
			4.00000E-01,5.00000E-01,6.00000E-01,8.00000E-01,1.00000E+00,1.02200E+00,1.25000E+00,1.50000E+00,2.00000E+00,2.04400E+00,
			3.00000E+00,4.00000E+00,5.00000E+00,6.00000E+00,7.00000E+00,8.00000E+00,9.00000E+00,1.00000E+01,1.10000E+01,1.20000E+01,
			1.30000E+01,1.40000E+01,1.50000E+01,1.60000E+01,1.80000E+01,2.00000E+01,2.20000E+01,2.40000E+01,2.60000E+01,2.80000E+01,
			3.00000E+01,4.00000E+01,5.00000E+01,6.00000E+01,8.00000E+01,1.00000E+02,1.50000E+02,2.00000E+02,3.00000E+02,4.00000E+02,
			5.00000E+02,6.00000E+02,8.00000E+02,1.00000E+03,1.50000E+03,2.00000E+03,3.00000E+03,4.00000E+03,5.00000E+03,6.00000E+03,
			8.00000E+03,1.00000E+04,1.50000E+04,2.00000E+04,3.00000E+04,4.00000E+04,5.00000E+04,6.00000E+04,8.00000E+04,1.00000E+05};
	final static double[] Coh= {5.9960E+00,5.6520E+00,5.4390E+00,5.4390E+00,5.4170E+00,5.3950E+00,5.3950E+00,5.2960E+00,5.2490E+00,5.2490E+00,4.5990E+00,3.9850E+00,3.4810E+00,3.0690E+00,2.4310E+00,1.9540E+00,1.2020E+00,1.1820E+00,1.1820E+00,8.1730E-01,4.6300E-01,2.9790E-01,2.0650E-01,1.5170E-01,9.2520E-02,6.2600E-02,3.0100E-02,1.7570E-02,8.0960E-03,4.6360E-03,2.9960E-03,2.0930E-03,1.1850E-03,7.6100E-04,7.2860E-04,4.8790E-04,3.3920E-04,1.9100E-04,1.8290E-04,8.4980E-05,4.7810E-05,3.0610E-05,2.1260E-05,1.5610E-05,1.1960E-05,9.4490E-06,7.6520E-06,6.3250E-06,5.3140E-06,4.5290E-06,3.9040E-06,3.4010E-06,2.9900E-06,2.3620E-06,1.9130E-06,1.5810E-06,1.3290E-06,1.1320E-06,9.7590E-07,8.5050E-07,4.7830E-07,3.0620E-07,2.1260E-07,1.1960E-07,7.6520E-08,3.4010E-08,1.9130E-08,8.5050E-09,4.7830E-09,3.0610E-09,2.1260E-09,1.1960E-09,7.6520E-10,3.4010E-10,1.9130E-10,8.5050E-11,4.7830E-11,3.0610E-11,2.1260E-11,1.1960E-11,7.6520E-12,3.4010E-12,1.9130E-12,8.5050E-13,4.7830E-13,3.0610E-13,2.1260E-13,1.1960E-13,7.6520E-14};
	final static double[] Incoh= {6.9650E-03,1.1490E-02,1.4320E-02,1.4320E-02,1.4600E-02,1.4880E-02,1.4880E-02,1.6140E-02,1.6750E-02,1.6750E-02,2.5230E-02,3.3600E-02,4.1110E-02,4.7700E-02,5.8690E-02,6.7750E-02,8.5050E-02,8.5610E-02,8.5610E-02,9.6810E-02,1.1040E-01,1.1700E-01,1.2000E-01,1.2110E-01,1.2010E-01,1.1760E-01,1.0970E-01,1.0230E-01,9.0400E-02,8.1520E-02,7.4760E-02,6.9310E-02,6.1030E-02,5.4950E-02,5.4370E-02,4.9170E-02,4.4710E-02,3.8180E-02,3.7710E-02,3.0050E-02,2.5070E-02,2.1650E-02,1.9140E-02,1.7200E-02,1.5660E-02,1.4400E-02,1.3340E-02,1.2440E-02,1.1670E-02,1.0990E-02,1.0390E-02,9.8720E-03,9.3990E-03,8.5890E-03,7.9200E-03,7.3560E-03,6.8760E-03,6.4570E-03,6.0910E-03,5.7670E-03,4.5830E-03,3.8260E-03,3.2960E-03,2.5990E-03,2.1580E-03,1.5370E-03,1.2050E-03,8.5400E-04,6.6870E-04,5.5360E-04,4.7400E-04,3.7020E-04,3.0450E-04,2.1270E-04,1.6460E-04,1.1440E-04,8.8360E-05,7.2220E-05,6.1260E-05,4.7190E-05,3.8540E-05,2.6630E-05,2.0480E-05,1.4120E-05,1.0840E-05,8.8290E-06,7.4620E-06,5.7210E-06,4.6550E-06};
	final static double[] PE= {3.1680E+03,1.2130E+03,7.7300E+02,3.0900E+03,2.9710E+03,2.8560E+03,3.9520E+03,3.4050E+03,3.1480E+03,3.6010E+03,1.4130E+03,6.7080E+02,3.7090E+02,2.2690E+02,1.0330E+02,5.5640E+01,1.7810E+01,1.7150E+01,1.1960E+02,5.8880E+01,1.9510E+01,8.6950E+00,4.5920E+00,2.7060E+00,1.1630E+00,5.9980E-01,1.7900E-01,7.6170E-02,2.3440E-02,1.0540E-02,5.8500E-03,3.7080E-03,1.9010E-03,1.1840E-03,1.1260E-03,7.6030E-04,5.4640E-04,3.3470E-04,3.2310E-04,1.7970E-04,1.2010E-04,8.9340E-05,7.0880E-05,5.8580E-05,4.9870E-05,4.3370E-05,3.8340E-05,3.4360E-05,3.1110E-05,2.8420E-05,2.6150E-05,2.4210E-05,2.2540E-05,1.9810E-05,1.7660E-05,1.5930E-05,1.4510E-05,1.3320E-05,1.2310E-05,1.1440E-05,8.4550E-06,6.7070E-06,5.5570E-06,4.1370E-06,3.2950E-06,2.1840E-06,1.6330E-06,1.0850E-06,8.1240E-07,6.4950E-07,5.4090E-07,4.0540E-07,3.2420E-07,2.1600E-07,1.6190E-07,1.0790E-07,8.0960E-08,6.4740E-08,5.3940E-08,4.0460E-08,3.2360E-08,2.1580E-08,1.6180E-08,1.0790E-08,8.0890E-09,6.4720E-09,5.3930E-09,4.0440E-09,3.2360E-09};
	final static double[] PrProdN= {0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,1.0850E-04,5.2700E-04,1.9110E-03,2.0490E-03,5.1280E-03,8.0680E-03,1.0650E-02,1.2910E-02,1.4920E-02,1.6730E-02,1.8380E-02,1.9880E-02,2.1260E-02,2.2510E-02,2.3670E-02,2.4740E-02,2.5730E-02,2.6670E-02,2.8370E-02,2.9910E-02,3.1300E-02,3.2560E-02,3.3720E-02,3.4770E-02,3.5740E-02,3.9710E-02,4.2660E-02,4.4950E-02,4.8350E-02,5.0760E-02,5.4590E-02,5.6880E-02,5.9550E-02,6.1090E-02,6.2100E-02,6.2820E-02,6.3780E-02,6.4410E-02,6.5310E-02,6.5800E-02,6.6330E-02,6.6620E-02,6.6800E-02,6.6920E-02,6.7090E-02,6.7190E-02,6.7340E-02,6.7410E-02,6.7490E-02,6.7540E-02,6.7560E-02,6.7580E-02,6.7610E-02,6.7620E-02};
	final static double[] PrProdE= {0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,1.0510E-05,4.2910E-05,8.5470E-05,1.3110E-04,1.7670E-04,2.2080E-04,2.6300E-04,3.0320E-04,3.4120E-04,3.7710E-04,4.1090E-04,4.4310E-04,4.7360E-04,5.0260E-04,5.5640E-04,6.0530E-04,6.5020E-04,6.9150E-04,7.3000E-04,7.6520E-04,7.9830E-04,9.3500E-04,1.0390E-03,1.1220E-03,1.2460E-03,1.3380E-03,1.4900E-03,1.5850E-03,1.7030E-03,1.7740E-03,1.8220E-03,1.8580E-03,1.9070E-03,1.9400E-03,1.9900E-03,2.0180E-03,2.0490E-03,2.0670E-03,2.0790E-03,2.0860E-03,2.0970E-03,2.1030E-03,2.1120E-03,2.1180E-03,2.1230E-03,2.1270E-03,2.1280E-03,2.1290E-03,2.1310E-03,2.1310E-03};
	final static double[] TotAttn= {3.1740E+03,1.2190E+03,7.7840E+02,3.0960E+03,2.9760E+03,2.8610E+03,3.9580E+03,3.4100E+03,3.1530E+03,3.6070E+03,1.4180E+03,6.7480E+02,3.7440E+02,2.3000E+02,1.0580E+02,5.7660E+01,1.9090E+01,1.8420E+01,1.2080E+02,5.9800E+01,2.0080E+01,9.1100E+00,4.9180E+00,2.9780E+00,1.3750E+00,7.8000E-01,3.1880E-01,1.9610E-01,1.2190E-01,9.6700E-02,8.3600E-02,7.5110E-02,6.4120E-02,5.6890E-02,5.6220E-02,5.0520E-02,4.6130E-02,4.0610E-02,4.0270E-02,3.5450E-02,3.3350E-02,3.2500E-02,3.2270E-02,3.2370E-02,3.2670E-02,3.3090E-02,3.3570E-02,3.4080E-02,3.4590E-02,3.5100E-02,3.5600E-02,3.6110E-02,3.6600E-02,3.7540E-02,3.8460E-02,3.9320E-02,4.0140E-02,4.0920E-02,4.1640E-02,4.2320E-02,4.5240E-02,4.7530E-02,4.9380E-02,5.2200E-02,5.4260E-02,5.7620E-02,5.9670E-02,6.2110E-02,6.3530E-02,6.4470E-02,6.5160E-02,6.6060E-02,6.6650E-02,6.7510E-02,6.7990E-02,6.8500E-02,6.8780E-02,6.8950E-02,6.9070E-02,6.9230E-02,6.9330E-02,6.9480E-02,6.9550E-02,6.9630E-02,6.9670E-02,6.9700E-02,6.9720E-02,6.9740E-02,6.9760E-02};

	//******************************************************************************

	/**
	 * @return The array of tabulated photon energies
	 */
	public double[] getMevArray()
	{
		return MeV;
	}

	//******************************************************************************

	public double getMuMass(double theMeV, String muMassType)
	{
		double[] muArr;
		double muMass;
		double muLo = 0;
		double muHi = 0;
		double mevLo = 0;
		double mevHi = 0;

		switch(muMassType)
		{
		case "TotAttn":
			muArr = TotAttn;
			break;
		case "Raleigh":
			muArr = Coh;
			break;
		case "Compton":
			muArr = Incoh;
			break;
		case "PhotoElectric":
			muArr = PE;
			break;
		case "PairProdN":
			muArr = PrProdN;
			break;
		case "PairProdE":
			muArr = PrProdE;
			break;
		default:
			muArr = TotAttn;
			break;
		}

		//Report the muMass at 100GeV for any energy at or above 100GeV
		if(theMeV >= 100000.0)
		{
			muMass = muArr[muArr.length - 1];
		}			
		else
		{
			//Look everywhere except the last point
			for(int i = 0; i< muArr.length - 1;i++)
			{
				if(MeV[i] <= theMeV && MeV[i + 1] > theMeV)
				{
					mevLo = MeV[i];
					mevHi = MeV[i+1];
					muLo = muArr[i];
					muHi = muArr[i + 1];
					break;
				}
			}
			if(muLo ==0) muMass = 0.0;
			else muMass = Interpolation.logTerp(mevLo, mevHi, theMeV, muLo, muHi);
		}
		return muMass;
	}		
}
