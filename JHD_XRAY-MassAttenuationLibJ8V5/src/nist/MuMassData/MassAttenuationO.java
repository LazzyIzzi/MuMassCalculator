package nist.MuMassData;
/**
 * @author John H Dunsmuir
 * @hidden
 */

import jhd.MathTools.Interpolation;


class MassAttenuationO {

	final static double[] MeV= {1.0000E-03,1.5000E-03,2.0000E-03,3.0000E-03,4.0000E-03,5.0000E-03,6.0000E-03,8.0000E-03,1.0000E-02,1.5000E-02,2.0000E-02,3.0000E-02,4.0000E-02,5.0000E-02,6.0000E-02,8.0000E-02,1.0000E-01,1.5000E-01,2.0000E-01,3.0000E-01,4.0000E-01,5.0000E-01,6.0000E-01,8.0000E-01,1.0000E+00,1.0220E+00,1.2500E+00,1.5000E+00,2.0000E+00,2.0440E+00,3.0000E+00,4.0000E+00,5.0000E+00,6.0000E+00,7.0000E+00,8.0000E+00,9.0000E+00,1.0000E+01,1.1000E+01,1.2000E+01,1.3000E+01,1.4000E+01,1.5000E+01,1.6000E+01,1.8000E+01,2.0000E+01,2.2000E+01,2.4000E+01,2.6000E+01,2.8000E+01,3.0000E+01,4.0000E+01,5.0000E+01,6.0000E+01,8.0000E+01,1.0000E+02,1.5000E+02,2.0000E+02,3.0000E+02,4.0000E+02,5.0000E+02,6.0000E+02,8.0000E+02,1.0000E+03,1.5000E+03,2.0000E+03,3.0000E+03,4.0000E+03,5.0000E+03,6.0000E+03,8.0000E+03,1.0000E+04,1.5000E+04,2.0000E+04,3.0000E+04,4.0000E+04,5.0000E+04,6.0000E+04,8.0000E+04,1.0000E+05};
	final static double[] Coh= {1.5010E+00,1.3920E+00,1.2630E+00,1.0020E+00,7.8330E-01,6.1800E-01,4.9800E-01,3.4470E-01,2.5650E-01,1.4860E-01,9.8880E-02,5.2470E-02,3.2150E-02,2.1660E-02,1.5580E-02,9.1390E-03,5.9880E-03,2.7340E-03,1.5540E-03,6.9600E-04,3.9260E-04,2.5160E-04,1.7480E-04,9.8430E-05,6.3010E-05,6.0340E-05,4.0350E-05,2.8010E-05,1.5760E-05,1.5090E-05,7.0050E-06,3.9410E-06,2.5210E-06,1.7510E-06,1.2870E-06,9.8500E-07,7.7840E-07,6.3050E-07,5.2090E-07,4.3780E-07,3.7300E-07,3.2160E-07,2.8020E-07,2.4620E-07,1.9460E-07,1.5760E-07,1.3030E-07,1.0950E-07,9.3270E-08,8.0400E-08,7.0050E-08,3.9410E-08,2.5210E-08,1.7510E-08,9.8500E-09,6.3050E-09,2.8020E-09,1.5760E-09,7.0050E-10,3.9410E-10,2.5210E-10,1.7510E-10,9.8500E-11,6.3050E-11,2.8020E-11,1.5760E-11,7.0050E-12,3.9410E-12,2.5210E-12,1.7510E-12,9.8500E-13,6.3050E-13,2.8020E-13,1.5760E-13,7.0050E-14,3.9410E-14,2.5210E-14,1.7510E-14,9.8500E-15,6.3050E-15};
	final static double[] Incoh= {8.5140E-03,1.7680E-02,2.8460E-02,5.0890E-02,7.0990E-02,8.7440E-02,1.0030E-01,1.1820E-01,1.2940E-01,1.4540E-01,1.5400E-01,1.6130E-01,1.6240E-01,1.6090E-01,1.5840E-01,1.5220E-01,1.4600E-01,1.3250E-01,1.2180E-01,1.0620E-01,9.5230E-02,8.7020E-02,8.0510E-02,7.0760E-02,6.3650E-02,6.2970E-02,5.6910E-02,5.1720E-02,4.4150E-02,4.3590E-02,3.4730E-02,2.8970E-02,2.5020E-02,2.2110E-02,1.9870E-02,1.8090E-02,1.6630E-02,1.5410E-02,1.4370E-02,1.3480E-02,1.2690E-02,1.2010E-02,1.1400E-02,1.0860E-02,9.9220E-03,9.1500E-03,8.4990E-03,7.9420E-03,7.4560E-03,7.0350E-03,6.6620E-03,5.2920E-03,4.4190E-03,3.8050E-03,3.0030E-03,2.4920E-03,1.7750E-03,1.3920E-03,9.8620E-04,7.7240E-04,6.3950E-04,5.4770E-04,4.2760E-04,3.5180E-04,2.4570E-04,1.9020E-04,1.3220E-04,1.0200E-04,8.3450E-05,7.0760E-05,5.4500E-05,4.4490E-05,3.0760E-05,2.3650E-05,1.6310E-05,1.2520E-05,1.0200E-05,8.6200E-06,6.6100E-06,5.3750E-06};
	final static double[] PE= {4.5880E+03,1.5470E+03,6.9370E+02,2.1600E+02,9.2290E+01,4.7200E+01,2.7100E+01,1.1170E+01,5.5670E+00,1.5420E+00,6.1240E-01,1.6410E-01,6.3950E-02,3.0680E-02,1.6810E-02,6.4970E-03,3.1110E-03,8.2280E-04,3.2510E-04,9.1880E-05,3.9330E-05,2.1210E-05,1.3210E-05,6.6660E-06,4.1440E-06,3.8620E-06,2.6220E-06,1.9020E-06,1.1970E-06,1.1570E-06,6.6850E-07,4.5880E-07,3.4790E-07,2.7970E-07,2.3360E-07,2.0050E-07,1.7550E-07,1.5610E-07,1.4050E-07,1.2770E-07,1.1700E-07,1.0800E-07,1.0030E-07,9.3570E-08,8.2540E-08,7.3810E-08,6.6770E-08,6.0940E-08,5.6050E-08,5.1870E-08,4.8290E-08,3.5870E-08,2.8530E-08,2.3690E-08,1.7680E-08,1.4100E-08,9.3650E-09,7.0120E-09,4.6640E-09,3.4960E-09,2.7950E-09,2.3280E-09,1.7450E-09,1.3960E-09,9.3010E-10,6.9750E-10,4.6490E-10,3.4860E-10,2.7890E-10,2.3240E-10,1.7430E-10,1.3940E-10,9.2930E-11,6.9710E-11,4.6490E-11,3.4850E-11,2.7880E-11,2.3240E-11,1.7430E-11,1.3940E-11};
	final static double[] PrProdN= {0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,1.9420E-05,1.0730E-04,4.2680E-04,4.6000E-04,1.2200E-03,1.9780E-03,2.6540E-03,3.2610E-03,3.8020E-03,4.2870E-03,4.7310E-03,5.1300E-03,5.4950E-03,5.8300E-03,6.1430E-03,6.4330E-03,6.7040E-03,6.9600E-03,7.4260E-03,7.8440E-03,8.2240E-03,8.5710E-03,8.8870E-03,9.1800E-03,9.4510E-03,1.0550E-02,1.1400E-02,1.2060E-02,1.3070E-02,1.3810E-02,1.5030E-02,1.5780E-02,1.6690E-02,1.7210E-02,1.7560E-02,1.7810E-02,1.8150E-02,1.8380E-02,1.8700E-02,1.8880E-02,1.9070E-02,1.9170E-02,1.9230E-02,1.9280E-02,1.9340E-02,1.9380E-02,1.9430E-02,1.9460E-02,1.9490E-02,1.9500E-02,1.9510E-02,1.9520E-02,1.9530E-02,1.9540E-02};
	final static double[] PrProdE= {0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,1.2150E-05,4.9610E-05,9.8840E-05,1.5180E-04,2.0470E-04,2.5610E-04,3.0530E-04,3.5220E-04,3.9670E-04,4.3890E-04,4.7880E-04,5.1680E-04,5.5260E-04,5.8720E-04,6.5120E-04,7.0950E-04,7.6370E-04,8.1340E-04,8.5970E-04,9.0300E-04,9.4330E-04,1.1130E-03,1.2450E-03,1.3530E-03,1.5190E-03,1.6440E-03,1.8600E-03,2.0010E-03,2.1800E-03,2.2900E-03,2.3660E-03,2.4220E-03,2.5010E-03,2.5530E-03,2.6320E-03,2.6770E-03,2.7250E-03,2.7540E-03,2.7720E-03,2.7840E-03,2.8000E-03,2.8110E-03,2.8250E-03,2.8330E-03,2.8410E-03,2.8460E-03,2.8490E-03,2.8510E-03,2.8530E-03,2.8550E-03};
	final static double[] TotAttn= {4.5900E+03,1.5490E+03,6.9500E+02,2.1710E+02,9.3150E+01,4.7910E+01,2.7700E+01,1.1630E+01,5.9530E+00,1.8360E+00,8.6530E-01,3.7790E-01,2.5850E-01,2.1330E-01,1.9070E-01,1.6790E-01,1.5510E-01,1.3610E-01,1.2370E-01,1.0700E-01,9.5660E-02,8.7300E-02,8.0700E-02,7.0870E-02,6.3720E-02,6.3040E-02,5.6970E-02,5.1850E-02,4.4600E-02,4.4060E-02,3.5970E-02,3.1000E-02,2.7770E-02,2.5520E-02,2.3880E-02,2.2630E-02,2.1660E-02,2.0890E-02,2.0260E-02,1.9740E-02,1.9310E-02,1.8960E-02,1.8660E-02,1.8410E-02,1.8000E-02,1.7700E-02,1.7490E-02,1.7330E-02,1.7200E-02,1.7120E-02,1.7060E-02,1.6960E-02,1.7060E-02,1.7220E-02,1.7590E-02,1.7940E-02,1.8660E-02,1.9170E-02,1.9850E-02,2.0280E-02,2.0570E-02,2.0790E-02,2.1080E-02,2.1280E-02,2.1580E-02,2.1740E-02,2.1930E-02,2.2030E-02,2.2090E-02,2.2140E-02,2.2190E-02,2.2230E-02,2.2290E-02,2.2320E-02,2.2350E-02,2.2360E-02,2.2370E-02,2.2380E-02,2.2390E-02,2.2400E-02};

	//******************************************************************************

	/**
	 * @return The array of tabulated photon energies
	 */
	public double[] getMevArray()
	{
		return MeV;
	}

	//******************************************************************************

	public double getMuMass(double theMeV, String muMassType)
	{
		double[] muArr;
		double muMass;
		double muLo = 0;
		double muHi = 0;
		double mevLo = 0;
		double mevHi = 0;

		switch(muMassType)
		{
		case "TotAttn":
			muArr = TotAttn;
			break;
		case "Raleigh":
			muArr = Coh;
			break;
		case "Compton":
			muArr = Incoh;
			break;
		case "PhotoElectric":
			muArr = PE;
			break;
		case "PairProdN":
			muArr = PrProdN;
			break;
		case "PairProdE":
			muArr = PrProdE;
			break;
		default:
			muArr = TotAttn;
			break;
		}

		//Report the muMass at 100GeV for any energy at or above 100GeV
		if(theMeV >= 100000.0)
		{
			muMass = muArr[muArr.length - 1];
		}			
		else
		{
			//Look everywhere except the last point
			for(int i = 0; i< muArr.length - 1;i++)
			{
				if(MeV[i] <= theMeV && MeV[i + 1] > theMeV)
				{
					mevLo = MeV[i];
					mevHi = MeV[i+1];
					muLo = muArr[i];
					muHi = muArr[i + 1];
					break;
				}
			}
			if(muLo ==0) muMass = 0.0;
			else muMass = Interpolation.logTerp(mevLo, mevHi, theMeV, muLo, muHi);
		}
		return muMass;
	}		
}
