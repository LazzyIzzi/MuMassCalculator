package nist.MuMassData;
/**
 * @author John H Dunsmuir
 * @hidden
 */

import jhd.MathTools.Interpolation;


class MassAttenuationU {

	final static double[] MeV= {1.00000E-03,1.02200E-03,1.04500E-03,1.04501E-03,1.15300E-03,1.27300E-03,1.27301E-03,1.35400E-03,1.44100E-03,
			1.44101E-03,1.50000E-03,2.00000E-03,3.00000E-03,3.55200E-03,3.55210E-03,3.63900E-03,3.72800E-03,3.72810E-03,4.00000E-03,
			4.30300E-03,4.30310E-03,5.00000E-03,5.18200E-03,5.18210E-03,5.36200E-03,5.54800E-03,5.54810E-03,6.00000E-03,8.00000E-03,
			1.00000E-02,1.50000E-02,1.71700E-02,1.71701E-02,2.00000E-02,2.09500E-02,2.09501E-02,2.13500E-02,2.17600E-02,2.17601E-02,
			3.00000E-02,4.00000E-02,5.00000E-02,6.00000E-02,8.00000E-02,1.00000E-01,1.15600E-01,1.15601E-01,1.50000E-01,2.00000E-01,
			3.00000E-01,4.00000E-01,5.00000E-01,6.00000E-01,8.00000E-01,1.00000E+00,1.02200E+00,1.25000E+00,1.50000E+00,2.00000E+00,
			2.04400E+00,3.00000E+00,4.00000E+00,5.00000E+00,6.00000E+00,7.00000E+00,8.00000E+00,9.00000E+00,1.00000E+01,1.10000E+01,
			1.20000E+01,1.30000E+01,1.40000E+01,1.50000E+01,1.60000E+01,1.80000E+01,2.00000E+01,2.20000E+01,2.40000E+01,2.60000E+01,
			2.80000E+01,3.00000E+01,4.00000E+01,5.00000E+01,6.00000E+01,8.00000E+01,1.00000E+02,1.50000E+02,2.00000E+02,3.00000E+02,
			4.00000E+02,5.00000E+02,6.00000E+02,8.00000E+02,1.00000E+03,1.50000E+03,2.00000E+03,3.00000E+03,4.00000E+03,5.00000E+03,
			6.00000E+03,8.00000E+03,1.00000E+04,1.50000E+04,2.00000E+04,3.00000E+04,4.00000E+04,5.00000E+04,6.00000E+04,8.00000E+04,
			1.00000E+05};
	final static double[] Coh= {1.3570E+01,1.3540E+01,1.3520E+01,1.3520E+01,1.3390E+01,1.3250E+01,1.3250E+01,1.3140E+01,1.3030E+01,1.3030E+01,1.2950E+01,1.2300E+01,1.1020E+01,1.0360E+01,1.0360E+01,1.0260E+01,1.0160E+01,1.0160E+01,9.8540E+00,9.5310E+00,9.5310E+00,8.8400E+00,8.6700E+00,8.6700E+00,8.5090E+00,8.3460E+00,8.3460E+00,7.9700E+00,6.5680E+00,5.4980E+00,3.7340E+00,3.2180E+00,3.2180E+00,2.6890E+00,2.5400E+00,2.5400E+00,2.4820E+00,2.4250E+00,2.4250E+00,1.5850E+00,1.0650E+00,7.6810E-01,5.7810E-01,3.6310E-01,2.5190E-01,1.9740E-01,1.9740E-01,1.2600E-01,7.5440E-02,3.6200E-02,2.1310E-02,1.4020E-02,9.9200E-03,5.7130E-03,3.7090E-03,3.5550E-03,2.4000E-03,1.6790E-03,9.5230E-04,9.1230E-04,4.2630E-04,2.4050E-04,1.5410E-04,1.0710E-04,7.8730E-05,6.0290E-05,4.7670E-05,3.8610E-05,3.1900E-05,2.6820E-05,2.2850E-05,1.9710E-05,1.7170E-05,1.5090E-05,1.1920E-05,9.6570E-06,7.9820E-06,6.7070E-06,5.7150E-06,4.9280E-06,4.2930E-06,2.4150E-06,1.5460E-06,1.0730E-06,6.0370E-07,3.8630E-07,1.7170E-07,9.6600E-08,4.2930E-08,2.4150E-08,1.5460E-08,1.0730E-08,6.0370E-09,3.8630E-09,1.7170E-09,9.6600E-10,4.2930E-10,2.4150E-10,1.5460E-10,1.0730E-10,6.0370E-11,3.8630E-11,1.7170E-11,9.6600E-12,4.2930E-12,2.4150E-12,1.5460E-12,1.0730E-12,6.0370E-13,3.8630E-13};
	final static double[] Incoh= {4.5260E-03,4.6590E-03,4.7940E-03,4.7940E-03,5.4280E-03,6.1200E-03,6.1200E-03,6.5970E-03,7.1070E-03,7.1070E-03,7.4530E-03,1.0340E-02,1.5950E-02,1.8890E-02,1.8890E-02,1.9330E-02,1.9790E-02,1.9790E-02,2.1160E-02,2.2640E-02,2.2640E-02,2.5880E-02,2.6670E-02,2.6670E-02,2.7440E-02,2.8230E-02,2.8230E-02,3.0080E-02,3.7470E-02,4.3970E-02,5.7050E-02,6.1430E-02,6.1430E-02,6.6260E-02,6.7700E-02,6.7700E-02,6.8300E-02,6.8890E-02,6.8890E-02,7.8330E-02,8.5770E-02,9.0350E-02,9.3050E-02,9.5180E-02,9.5100E-02,9.4340E-02,9.4340E-02,9.1590E-02,8.6830E-02,7.8050E-02,7.1070E-02,6.5530E-02,6.1000E-02,5.3960E-02,4.8700E-02,4.8200E-02,4.3670E-02,3.9770E-02,3.4000E-02,3.3570E-02,2.6790E-02,2.2360E-02,1.9320E-02,1.7080E-02,1.5350E-02,1.3970E-02,1.2840E-02,1.1900E-02,1.1100E-02,1.0410E-02,9.8090E-03,9.2800E-03,8.8090E-03,8.3890E-03,7.6680E-03,7.0710E-03,6.5680E-03,6.1380E-03,5.7630E-03,5.4370E-03,5.1490E-03,4.0910E-03,3.4160E-03,2.9420E-03,2.3210E-03,1.9260E-03,1.3720E-03,1.0760E-03,7.6230E-04,5.9710E-04,4.9440E-04,4.2330E-04,3.3040E-04,2.7200E-04,1.8990E-04,1.4700E-04,1.0220E-04,7.8890E-05,6.4490E-05,5.4700E-05,4.2120E-05,3.4410E-05,2.3770E-05,1.8280E-05,1.2610E-05,9.6770E-06,7.8810E-06,6.6610E-06,5.1080E-06,4.1570E-06};
	final static double[] PE= {6.6130E+03,6.3600E+03,6.1150E+03,6.5070E+03,5.4180E+03,4.5140E+03,4.5770E+03,4.0500E+03,3.5850E+03,3.6560E+03,3.3670E+03,1.8530E+03,7.5820E+02,5.1540E+02,1.2550E+03,1.1760E+03,1.1020E+03,1.5720E+03,1.3190E+03,1.1010E+03,1.2820E+03,8.8020E+02,8.0300E+02,8.5240E+02,7.8330E+02,7.1980E+02,7.5070E+02,6.2040E+02,3.0410E+02,1.7360E+02,6.1480E+01,4.3340E+01,1.0370E+02,6.8310E+01,6.0390E+01,8.5770E+01,8.1660E+01,7.7750E+01,8.9710E+01,3.9620E+01,1.8680E+01,1.0350E+01,6.3630E+00,2.9370E+00,1.6080E+00,1.0860E+00,4.6020E+00,2.3730E+00,1.1360E+00,4.0510E-01,1.9980E-01,1.1810E-01,7.8080E-02,4.1920E-02,2.6540E-02,2.5430E-02,1.7180E-02,1.2220E-02,7.3800E-03,7.1140E-03,3.8460E-03,2.5090E-03,1.8350E-03,1.4350E-03,1.1730E-03,9.8950E-04,8.5440E-04,7.5090E-04,6.6920E-04,6.0320E-04,5.4880E-04,5.0320E-04,4.6480E-04,4.3140E-04,3.7720E-04,3.3520E-04,3.0130E-04,2.7370E-04,2.5070E-04,2.3130E-04,2.1460E-04,1.5760E-04,1.2450E-04,1.0290E-04,7.6360E-05,6.0690E-05,4.0100E-05,2.9960E-05,1.9880E-05,1.4880E-05,1.1880E-05,9.8950E-06,7.4130E-06,5.9250E-06,3.9470E-06,2.9600E-06,1.9720E-06,1.4790E-06,1.1830E-06,9.8540E-07,7.3900E-07,5.9130E-07,3.9420E-07,2.9550E-07,1.9700E-07,1.4780E-07,1.1820E-07,9.8520E-08,7.3880E-08,5.9100E-08};
	final static double[] PrProdN= {};
	final static double[] PrProdE= {};
	final static double[] TotAttn= {6.6270E+03,6.3730E+03,6.1290E+03,6.5210E+03,5.4320E+03,4.5270E+03,4.5900E+03,4.0630E+03,3.5980E+03,3.6690E+03,3.3800E+03,1.8650E+03,7.6930E+02,5.2570E+02,1.2660E+03,1.1860E+03,1.1120E+03,1.5820E+03,1.3290E+03,1.1100E+03,1.2920E+03,8.8910E+02,8.1170E+02,8.6110E+02,7.9190E+02,7.2820E+02,7.5900E+02,6.2840E+02,3.1070E+02,1.7910E+02,6.5270E+01,4.6620E+01,1.0700E+02,7.1070E+01,6.3000E+01,8.8370E+01,8.4210E+01,8.0240E+01,9.2210E+01,4.1280E+01,1.9830E+01,1.1210E+01,7.0340E+00,3.3960E+00,1.9550E+00,1.3780E+00,4.8940E+00,2.5910E+00,1.2980E+00,5.1930E-01,2.9220E-01,1.9760E-01,1.4900E-01,1.0160E-01,7.8950E-02,7.7180E-02,6.3700E-02,5.5870E-02,4.8780E-02,4.8400E-02,4.4470E-02,4.3920E-02,4.4630E-02,4.5830E-02,4.7270E-02,4.8790E-02,5.0390E-02,5.1950E-02,5.3520E-02,5.5020E-02,5.6480E-02,5.7910E-02,5.9270E-02,6.0560E-02,6.2940E-02,6.5120E-02,6.7150E-02,6.9030E-02,7.0790E-02,7.2390E-02,7.3910E-02,8.0170E-02,8.4930E-02,8.8700E-02,9.4300E-02,9.8310E-02,1.0470E-01,1.0850E-01,1.1310E-01,1.1570E-01,1.1740E-01,1.1860E-01,1.2030E-01,1.2130E-01,1.2290E-01,1.2370E-01,1.2460E-01,1.2520E-01,1.2550E-01,1.2570E-01,1.2600E-01,1.2610E-01,1.2640E-01,1.2650E-01,1.2670E-01,1.2670E-01,1.2680E-01,1.2680E-01,1.2690E-01,1.2690E-01};

	//******************************************************************************

	/**
	 * @return The array of tabulated photon energies
	 */
	public double[] getMevArray()
	{
		return MeV;
	}

	//******************************************************************************

	public double getMuMass(double theMeV, String muMassType)
	{
		double[] muArr;
		double muMass;
		double muLo = 0;
		double muHi = 0;
		double mevLo = 0;
		double mevHi = 0;

		switch(muMassType)
		{
		case "TotAttn":
			muArr = TotAttn;
			break;
		case "Raleigh":
			muArr = Coh;
			break;
		case "Compton":
			muArr = Incoh;
			break;
		case "PhotoElectric":
			muArr = PE;
			break;
		case "PairProdN":
			muArr = PrProdN;
			break;
		case "PairProdE":
			muArr = PrProdE;
			break;
		default:
			muArr = TotAttn;
			break;
		}

		//Report the muMass at 100GeV for any energy at or above 100GeV
		if(theMeV >= 100000.0)
		{
			muMass = muArr[muArr.length - 1];
		}			
		else
		{
			//Look everywhere except the last point
			for(int i = 0; i< muArr.length - 1;i++)
			{
				if(MeV[i] <= theMeV && MeV[i + 1] > theMeV)
				{
					mevLo = MeV[i];
					mevHi = MeV[i+1];
					muLo = muArr[i];
					muHi = muArr[i + 1];
					break;
				}
			}
			if(muLo ==0) muMass = 0.0;
			else muMass = Interpolation.logTerp(mevLo, mevHi, theMeV, muLo, muHi);
		}
		return muMass;
	}		
}
