package nist.MuMassData;
/**
 * @author John H Dunsmuir
 * @hidden
 */

import jhd.MathTools.Interpolation;


class MassAttenuationAT {

	final static double[] MeV= {1.00000E-03,1.02100E-03,1.04200E-03,1.04201E-03,1.50000E-03,2.00000E-03,2.78700E-03,2.78701E-03,2.84700E-03,
			2.90900E-03,2.90901E-03,3.00000E-03,3.42600E-03,3.42610E-03,4.00000E-03,4.00800E-03,4.00810E-03,4.16000E-03,4.31700E-03,
			4.31710E-03,5.00000E-03,6.00000E-03,8.00000E-03,1.00000E-02,1.42100E-02,1.42101E-02,1.50000E-02,1.67800E-02,1.67801E-02,
			1.71400E-02,1.74900E-02,1.74901E-02,2.00000E-02,3.00000E-02,4.00000E-02,5.00000E-02,6.00000E-02,8.00000E-02,9.57300E-02,
			9.57310E-02,1.00000E-01,1.50000E-01,2.00000E-01,3.00000E-01,4.00000E-01,5.00000E-01,6.00000E-01,8.00000E-01,1.00000E+00,
			1.02200E+00,1.25000E+00,1.50000E+00,2.00000E+00,2.04400E+00,3.00000E+00,4.00000E+00,5.00000E+00,6.00000E+00,7.00000E+00,
			8.00000E+00,9.00000E+00,1.00000E+01,1.10000E+01,1.20000E+01,1.30000E+01,1.40000E+01,1.50000E+01,1.60000E+01,1.80000E+01,
			2.00000E+01,2.20000E+01,2.40000E+01,2.60000E+01,2.80000E+01,3.00000E+01,4.00000E+01,5.00000E+01,6.00000E+01,8.00000E+01,
			1.00000E+02,1.50000E+02,2.00000E+02,3.00000E+02,4.00000E+02,5.00000E+02,6.00000E+02,8.00000E+02,1.00000E+03,1.50000E+03,
			2.00000E+03,3.00000E+03,4.00000E+03,5.00000E+03,6.00000E+03,8.00000E+03,1.00000E+04,1.50000E+04,2.00000E+04,3.00000E+04,
			4.00000E+04,5.00000E+04,6.00000E+04,8.00000E+04,1.00000E+05};
	final static double[] Coh= {1.3240E+01,1.3220E+01,1.3200E+01,1.3200E+01,1.2680E+01,1.2050E+01,1.1050E+01,1.1050E+01,1.0970E+01,1.0900E+01,1.0900E+01,1.0780E+01,1.0280E+01,1.0280E+01,9.6420E+00,9.6330E+00,9.6330E+00,9.4740E+00,9.3150E+00,9.3150E+00,8.6470E+00,7.7810E+00,6.3670E+00,5.2970E+00,3.7600E+00,3.7600E+00,3.5450E+00,3.1200E+00,3.1200E+00,3.0420E+00,2.9650E+00,2.9650E+00,2.5190E+00,1.4820E+00,9.9340E-01,7.0980E-01,5.3170E-01,3.3380E-01,2.4870E-01,2.4870E-01,2.3110E-01,1.1440E-01,6.8340E-02,3.2660E-02,1.9130E-02,1.2550E-02,8.8530E-03,5.0820E-03,3.2920E-03,3.1550E-03,2.1260E-03,1.4850E-03,8.4090E-04,8.0530E-04,3.7570E-04,2.1180E-04,1.3570E-04,9.4300E-05,6.9290E-05,5.3060E-05,4.1930E-05,3.3980E-05,2.8080E-05,2.3600E-05,2.0110E-05,1.7340E-05,1.5100E-05,1.3280E-05,1.0490E-05,8.4970E-06,7.0210E-06,5.8990E-06,5.0270E-06,4.3360E-06,3.7770E-06,2.1240E-06,1.3600E-06,9.4410E-07,5.3110E-07,3.3980E-07,1.5110E-07,8.4970E-08,3.7770E-08,2.1240E-08,1.3600E-08,9.4410E-09,5.3110E-09,3.3980E-09,1.5110E-09,8.4970E-10,3.7770E-10,2.1240E-10,1.3600E-10,9.4410E-11,5.3110E-11,3.3980E-11,1.5110E-11,8.4970E-12,3.7770E-12,2.1240E-12,1.3600E-12,9.4410E-13,5.3110E-13,3.3980E-13};
	final static double[] Incoh= {3.4360E-03,3.5560E-03,3.6790E-03,3.6790E-03,6.5390E-03,9.7770E-03,1.4720E-02,1.4720E-02,1.5080E-02,1.5450E-02,1.5450E-02,1.5990E-02,1.8430E-02,1.8430E-02,2.1520E-02,2.1560E-02,2.1560E-02,2.2320E-02,2.3110E-02,2.3110E-02,2.6400E-02,3.0890E-02,3.9090E-02,4.6370E-02,5.8480E-02,5.8480E-02,6.0370E-02,6.4240E-02,6.4240E-02,6.4920E-02,6.5590E-02,6.5590E-02,7.0150E-02,8.3400E-02,9.1460E-02,9.6190E-02,9.8880E-02,1.0090E-01,1.0090E-01,1.0090E-01,1.0070E-01,9.6680E-02,9.1480E-02,8.2050E-02,7.4650E-02,6.8800E-02,6.4010E-02,5.6580E-02,5.1080E-02,5.0530E-02,4.5770E-02,4.1670E-02,3.5620E-02,3.5190E-02,2.8060E-02,2.3420E-02,2.0230E-02,1.7890E-02,1.6080E-02,1.4630E-02,1.3450E-02,1.2470E-02,1.1630E-02,1.0900E-02,1.0270E-02,9.7190E-03,9.2290E-03,8.7870E-03,8.0330E-03,7.4080E-03,6.8800E-03,6.4300E-03,6.0370E-03,5.6960E-03,5.3920E-03,4.2850E-03,3.5760E-03,3.0830E-03,2.4310E-03,2.0180E-03,1.4370E-03,1.1260E-03,7.9840E-04,6.2520E-04,5.1760E-04,4.4310E-04,3.4620E-04,2.8480E-04,1.9890E-04,1.5390E-04,1.0700E-04,8.2620E-05,6.7540E-05,5.7270E-05,4.4140E-05,3.6020E-05,2.4900E-05,1.9140E-05,1.3200E-05,1.0140E-05,8.2540E-06,6.9780E-06,5.3490E-06,4.3530E-06};
	final static double[] PE= {5.8530E+03,5.6360E+03,5.4260E+03,5.5410E+03,2.7180E+03,1.4820E+03,7.1150E+02,2.4210E+03,2.0140E+03,1.6760E+03,2.7830E+03,2.2390E+03,1.6040E+03,1.8560E+03,1.2660E+03,1.2600E+03,1.3360E+03,1.2210E+03,1.1170E+03,1.1650E+03,8.1650E+02,5.2200E+02,2.5370E+02,1.4360E+02,5.7820E+01,1.4220E+02,1.2420E+02,9.0970E+01,1.2710E+02,1.2090E+02,1.1500E+02,1.3300E+02,9.4440E+01,3.2870E+01,1.5290E+01,8.3880E+00,5.1160E+00,2.3340E+00,1.4270E+00,6.5440E+00,5.8420E+00,2.0380E+00,9.5790E-01,3.3440E-01,1.6270E-01,9.5180E-02,6.2490E-02,3.3300E-02,2.1010E-02,2.0110E-02,1.3570E-02,9.6620E-03,5.8420E-03,5.6320E-03,3.0510E-03,1.9950E-03,1.4610E-03,1.1440E-03,9.3660E-04,7.9100E-04,6.8310E-04,6.0080E-04,5.3570E-04,4.8320E-04,4.3990E-04,4.0350E-04,3.7250E-04,3.4620E-04,3.0280E-04,2.6910E-04,2.4200E-04,2.1990E-04,2.0150E-04,1.8590E-04,1.7250E-04,1.2680E-04,1.0020E-04,8.2820E-05,6.1490E-05,4.8870E-05,3.2320E-05,2.4130E-05,1.6020E-05,1.1990E-05,9.5790E-06,7.9760E-06,5.9770E-06,4.7780E-06,3.1830E-06,2.3860E-06,1.5900E-06,1.1920E-06,9.5360E-07,7.9440E-07,5.9590E-07,4.7660E-07,3.1780E-07,2.3830E-07,1.5890E-07,1.1910E-07,9.5300E-08,7.9410E-08,5.9570E-08,4.7660E-08};
	final static double[] PrProdN= {0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,4.1070E-04,1.9790E-03,5.9140E-03,6.2550E-03,1.2740E-02,1.8170E-02,2.2700E-02,2.6610E-02,3.0060E-02,3.3150E-02,3.5960E-02,3.8570E-02,4.0980E-02,4.3250E-02,4.5340E-02,4.7290E-02,4.9130E-02,5.0850E-02,5.3940E-02,5.6700E-02,5.9220E-02,6.1490E-02,6.3580E-02,6.5500E-02,6.7280E-02,7.4480E-02,7.9840E-02,8.3970E-02,9.0080E-02,9.4350E-02,1.0110E-01,1.0520E-01,1.0990E-01,1.1250E-01,1.1430E-01,1.1550E-01,1.1720E-01,1.1830E-01,1.1980E-01,1.2070E-01,1.2160E-01,1.2210E-01,1.2240E-01,1.2270E-01,1.2290E-01,1.2310E-01,1.2340E-01,1.2350E-01,1.2360E-01,1.2370E-01,1.2370E-01,1.2380E-01,1.2380E-01,1.2390E-01};
	final static double[] PrProdE= {};
	final static double[] TotAttn= {5.8670E+03,5.6490E+03,5.4390E+03,5.5540E+03,2.7310E+03,1.4940E+03,7.2260E+02,2.4320E+03,2.0250E+03,1.6870E+03,2.7940E+03,2.2490E+03,1.6140E+03,1.8660E+03,1.2760E+03,1.2690E+03,1.3460E+03,1.2310E+03,1.1260E+03,1.1750E+03,8.2520E+02,5.2980E+02,2.6010E+02,1.4890E+02,6.1630E+01,1.4610E+02,1.2780E+02,9.4150E+01,1.3030E+02,1.2400E+02,1.1810E+02,1.3600E+02,9.7030E+01,3.4430E+01,1.6380E+01,9.1940E+00,5.7470E+00,2.7690E+00,1.7770E+00,6.8940E+00,6.1740E+00,2.2490E+00,1.1180E+00,4.4910E-01,2.5650E-01,1.7650E-01,1.3540E-01,9.4960E-02,7.5380E-02,7.3800E-02,6.1880E-02,5.4800E-02,4.8220E-02,4.7880E-02,4.4240E-02,4.3830E-02,4.4610E-02,4.5860E-02,4.7300E-02,4.8840E-02,5.0380E-02,5.1950E-02,5.3490E-02,5.5010E-02,5.6450E-02,5.7840E-02,5.9180E-02,6.0450E-02,6.2800E-02,6.4940E-02,6.6940E-02,6.8770E-02,7.0490E-02,7.2080E-02,7.3570E-02,7.9730E-02,8.4450E-02,8.8140E-02,9.3680E-02,9.7600E-02,1.0390E-01,1.0770E-01,1.1220E-01,1.1470E-01,1.1640E-01,1.1760E-01,1.1920E-01,1.2020E-01,1.2170E-01,1.2260E-01,1.2350E-01,1.2390E-01,1.2420E-01,1.2450E-01,1.2480E-01,1.2490E-01,1.2520E-01,1.2530E-01,1.2540E-01,1.2550E-01,1.2550E-01,1.2560E-01,1.2560E-01,1.2570E-01};

	//******************************************************************************

	/**
	 * @return The array of tabulated photon energies
	 */
	public double[] getMevArray()
	{
		return MeV;
	}

	//******************************************************************************

	public double getMuMass(double theMeV, String muMassType)
	{
		double[] muArr;
		double muMass;
		double muLo = 0;
		double muHi = 0;
		double mevLo = 0;
		double mevHi = 0;

		switch(muMassType)
		{
		case "TotAttn":
			muArr = TotAttn;
			break;
		case "Raleigh":
			muArr = Coh;
			break;
		case "Compton":
			muArr = Incoh;
			break;
		case "PhotoElectric":
			muArr = PE;
			break;
		case "PairProdN":
			muArr = PrProdN;
			break;
		case "PairProdE":
			muArr = PrProdE;
			break;
		default:
			muArr = TotAttn;
			break;
		}

		//Report the muMass at 100GeV for any energy at or above 100GeV
		if(theMeV >= 100000.0)
		{
			muMass = muArr[muArr.length - 1];
		}			
		else
		{
			//Look everywhere except the last point
			for(int i = 0; i< muArr.length - 1;i++)
			{
				if(MeV[i] <= theMeV && MeV[i + 1] > theMeV)
				{
					mevLo = MeV[i];
					mevHi = MeV[i+1];
					muLo = muArr[i];
					muHi = muArr[i + 1];
					break;
				}
			}
			if(muLo ==0) muMass = 0.0;
			else muMass = Interpolation.logTerp(mevLo, mevHi, theMeV, muLo, muHi);
		}
		return muMass;
	}		
}
