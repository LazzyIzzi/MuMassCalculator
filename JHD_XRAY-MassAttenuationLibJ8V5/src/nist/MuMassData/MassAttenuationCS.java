package nist.MuMassData;
/**
 * @author John H Dunsmuir
 * @hidden
 */

import jhd.MathTools.Interpolation;


class MassAttenuationCS {

	final static double[] MeV= {1.00000E-03,1.03200E-03,1.06500E-03,1.06501E-03,1.13900E-03,1.21700E-03,1.21701E-03,1.50000E-03,2.00000E-03,
			3.00000E-03,4.00000E-03,5.00000E-03,5.01200E-03,5.01210E-03,5.18300E-03,5.35900E-03,5.35910E-03,5.53400E-03,5.71400E-03,
			5.71410E-03,6.00000E-03,8.00000E-03,1.00000E-02,1.50000E-02,2.00000E-02,3.00000E-02,3.59800E-02,3.59810E-02,4.00000E-02,
			5.00000E-02,6.00000E-02,8.00000E-02,1.00000E-01,1.50000E-01,2.00000E-01,3.00000E-01,4.00000E-01,5.00000E-01,6.00000E-01,
			8.00000E-01,1.00000E+00,1.02200E+00,1.25000E+00,1.50000E+00,2.00000E+00,2.04400E+00,3.00000E+00,4.00000E+00,5.00000E+00,
			6.00000E+00,7.00000E+00,8.00000E+00,9.00000E+00,1.00000E+01,1.10000E+01,1.20000E+01,1.30000E+01,1.40000E+01,1.50000E+01,
			1.60000E+01,1.80000E+01,2.00000E+01,2.20000E+01,2.40000E+01,2.60000E+01,2.80000E+01,3.00000E+01,4.00000E+01,5.00000E+01,
			6.00000E+01,8.00000E+01,1.00000E+02,1.50000E+02,2.00000E+02,3.00000E+02,4.00000E+02,5.00000E+02,6.00000E+02,8.00000E+02,
			1.00000E+03,1.50000E+03,2.00000E+03,3.00000E+03,4.00000E+03,5.00000E+03,6.00000E+03,8.00000E+03,1.00000E+04,1.50000E+04,
			2.00000E+04,3.00000E+04,4.00000E+04,5.00000E+04,6.00000E+04,8.00000E+04,1.00000E+05};
	final static double[] Coh= {8.5500E+00,8.5210E+00,8.4910E+00,8.4910E+00,8.4220E+00,8.3460E+00,8.3460E+00,8.0740E+00,7.5760E+00,6.5930E+00,5.7450E+00,5.0430E+00,5.0340E+00,5.0340E+00,4.9210E+00,4.8210E+00,4.8210E+00,4.7210E+00,4.6170E+00,4.6170E+00,4.4590E+00,3.5480E+00,2.8860E+00,1.8990E+00,1.3590E+00,7.7890E-01,5.9450E-01,5.9450E-01,5.0700E-01,3.6050E-01,2.6980E-01,1.6640E-01,1.1280E-01,5.4870E-02,3.2510E-02,1.5200E-02,8.7540E-03,5.6870E-03,3.9850E-03,2.2660E-03,1.4590E-03,1.3970E-03,9.3750E-04,6.5250E-04,3.6790E-04,3.5230E-04,1.6380E-04,9.2210E-05,5.9040E-05,4.1000E-05,3.0130E-05,2.3070E-05,1.8220E-05,1.4760E-05,1.2200E-05,1.0250E-05,8.7360E-06,7.5310E-06,6.5610E-06,5.7680E-06,4.5580E-06,3.6920E-06,3.0510E-06,2.5630E-06,2.1840E-06,1.8830E-06,1.6410E-06,9.2300E-07,5.9040E-07,4.1020E-07,2.3070E-07,1.4770E-07,6.5610E-08,3.6910E-08,1.6410E-08,9.2300E-09,5.9040E-09,4.1010E-09,2.3070E-09,1.4760E-09,6.5610E-10,3.6910E-10,1.6410E-10,9.2300E-11,5.9040E-11,4.1010E-11,2.3070E-11,1.4760E-11,6.5610E-12,3.6910E-12,1.6410E-12,9.2300E-13,5.9040E-13,4.1010E-13,2.3070E-13,1.4760E-13};
	final static double[] Incoh= {5.8810E-03,6.1330E-03,6.3930E-03,6.3930E-03,6.9730E-03,7.5940E-03,7.5940E-03,9.8640E-03,1.3990E-02,2.2030E-02,2.9410E-02,3.5820E-02,3.5890E-02,3.5890E-02,3.6900E-02,3.7910E-02,3.7910E-02,3.8870E-02,3.9850E-02,3.9850E-02,4.1370E-02,5.0790E-02,5.8900E-02,7.4630E-02,8.5190E-02,9.7600E-02,1.0200E-01,1.0200E-01,1.0420E-01,1.0770E-01,1.0950E-01,1.1010E-01,1.0860E-01,1.0240E-01,9.6010E-02,8.5410E-02,7.7350E-02,7.1050E-02,6.5970E-02,5.8180E-02,5.2430E-02,5.1880E-02,4.6940E-02,4.2690E-02,3.6470E-02,3.6020E-02,2.8710E-02,2.3960E-02,2.0690E-02,1.8290E-02,1.6440E-02,1.4970E-02,1.3760E-02,1.2750E-02,1.1890E-02,1.1150E-02,1.0500E-02,9.9370E-03,9.4340E-03,8.9850E-03,8.2100E-03,7.5720E-03,7.0320E-03,6.5750E-03,6.1710E-03,5.8230E-03,5.5140E-03,4.3810E-03,3.6570E-03,3.1510E-03,2.4850E-03,2.0630E-03,1.4690E-03,1.1520E-03,8.1610E-04,6.3930E-04,5.2920E-04,4.5310E-04,3.5390E-04,2.9110E-04,2.0330E-04,1.5740E-04,1.0940E-04,8.4460E-05,6.9050E-05,5.8540E-05,4.5120E-05,3.6830E-05,2.5460E-05,1.9570E-05,1.3500E-05,1.0360E-05,8.4370E-06,7.1320E-06,5.4690E-06,4.4500E-06};
	final static double[] PE= {9.3570E+03,8.7630E+03,8.2060E+03,8.6770E+03,7.5550E+03,6.5790E+03,6.8830E+03,4.3270E+03,2.2180E+03,8.2510E+02,3.9970E+02,2.2530E+02,2.2400E+02,6.6250E+02,6.0880E+02,5.5960E+02,7.6440E+02,7.0540E+02,6.5110E+02,7.4990E+02,6.6650E+02,3.1790E+02,1.7640E+02,5.9090E+01,2.6770E+01,8.6320E+00,5.1660E+00,3.0730E+01,2.3190E+01,1.2930E+01,7.8710E+00,3.5600E+00,1.9030E+00,6.0170E-01,2.6560E-01,8.5640E-02,3.9610E-02,2.2380E-02,1.4350E-02,7.4490E-03,4.6530E-03,4.4530E-03,3.0030E-03,2.1480E-03,1.3070E-03,1.2610E-03,6.9190E-04,4.5810E-04,3.3830E-04,2.6680E-04,2.1960E-04,1.8630E-04,1.6150E-04,1.4250E-04,1.2740E-04,1.1520E-04,1.0500E-04,9.6510E-05,8.9310E-05,8.3060E-05,7.2820E-05,6.4840E-05,5.8450E-05,5.3150E-05,4.8760E-05,4.5030E-05,4.1830E-05,3.0850E-05,2.4430E-05,2.0220E-05,1.5030E-05,1.1960E-05,7.9200E-06,5.9180E-06,3.9320E-06,2.9440E-06,2.3530E-06,1.9590E-06,1.4680E-06,1.1740E-06,7.8210E-07,5.8630E-07,3.9070E-07,2.9300E-07,2.3440E-07,1.9530E-07,1.4640E-07,1.1720E-07,7.8120E-08,5.8590E-08,3.9040E-08,2.9280E-08,2.3430E-08,1.9520E-08,1.4640E-08,1.1710E-08};
	final static double[] PrProdN= {0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,1.9870E-04,9.1890E-04,3.0690E-03,3.2760E-03,7.6710E-03,1.1700E-02,1.5180E-02,1.8170E-02,2.0830E-02,2.3220E-02,2.5390E-02,2.7380E-02,2.9210E-02,3.0910E-02,3.2490E-02,3.3960E-02,3.5310E-02,3.6560E-02,3.8840E-02,4.0880E-02,4.2740E-02,4.4420E-02,4.5950E-02,4.7350E-02,4.8660E-02,5.3920E-02,5.7820E-02,6.0900E-02,6.5380E-02,6.8560E-02,7.3630E-02,7.6670E-02,8.0200E-02,8.2240E-02,8.3600E-02,8.4550E-02,8.5820E-02,8.6680E-02,8.7860E-02,8.8490E-02,8.9220E-02,8.9580E-02,8.9850E-02,8.9990E-02,9.0220E-02,9.0350E-02,9.0580E-02,9.0670E-02,9.0760E-02,9.0800E-02,9.0850E-02,9.0890E-02,9.0890E-02,9.0940E-02};
	final static double[] PrProdE= {};
	final static double[] TotAttn= {9.3650E+03,8.7710E+03,8.2140E+03,8.6860E+03,7.5630E+03,6.5880E+03,6.8910E+03,4.3350E+03,2.2260E+03,8.3170E+02,4.0550E+02,2.3040E+02,2.2900E+02,6.6750E+02,6.1380E+02,5.6450E+02,7.6930E+02,7.1020E+02,6.5580E+02,7.5460E+02,6.7100E+02,3.2150E+02,1.7930E+02,6.1060E+01,2.8220E+01,9.5080E+00,5.8620E+00,3.1430E+01,2.3810E+01,1.3400E+01,8.2500E+00,3.8360E+00,2.1240E+00,7.5900E-01,3.9410E-01,1.8620E-01,1.2570E-01,9.9120E-02,8.4310E-02,6.7900E-02,5.8540E-02,5.7730E-02,5.1080E-02,4.6410E-02,4.1210E-02,4.0910E-02,3.7250E-02,3.6250E-02,3.6350E-02,3.6890E-02,3.7690E-02,3.8600E-02,3.9570E-02,4.0570E-02,4.1570E-02,4.2550E-02,4.3500E-02,4.4420E-02,4.5290E-02,4.6110E-02,4.7660E-02,4.9100E-02,5.0450E-02,5.1710E-02,5.2860E-02,5.3940E-02,5.4980E-02,5.9210E-02,6.2480E-02,6.5120E-02,6.9050E-02,7.1880E-02,7.6500E-02,7.9300E-02,8.2600E-02,8.4530E-02,8.5820E-02,8.6730E-02,8.7940E-02,8.8770E-02,8.9900E-02,9.0510E-02,9.1220E-02,9.1570E-02,9.1840E-02,9.1970E-02,9.2190E-02,9.2330E-02,9.2550E-02,9.2640E-02,9.2730E-02,9.2770E-02,9.2820E-02,9.2860E-02,9.2860E-02,9.2910E-02};

	//******************************************************************************

	/**
	 * @return The array of tabulated photon energies
	 */
	public double[] getMevArray()
	{
		return MeV;
	}

	//******************************************************************************

	public double getMuMass(double theMeV, String muMassType)
	{
		double[] muArr;
		double muMass;
		double muLo = 0;
		double muHi = 0;
		double mevLo = 0;
		double mevHi = 0;

		switch(muMassType)
		{
		case "TotAttn":
			muArr = TotAttn;
			break;
		case "Raleigh":
			muArr = Coh;
			break;
		case "Compton":
			muArr = Incoh;
			break;
		case "PhotoElectric":
			muArr = PE;
			break;
		case "PairProdN":
			muArr = PrProdN;
			break;
		case "PairProdE":
			muArr = PrProdE;
			break;
		default:
			muArr = TotAttn;
			break;
		}

		//Report the muMass at 100GeV for any energy at or above 100GeV
		if(theMeV >= 100000.0)
		{
			muMass = muArr[muArr.length - 1];
		}			
		else
		{
			//Look everywhere except the last point
			for(int i = 0; i< muArr.length - 1;i++)
			{
				if(MeV[i] <= theMeV && MeV[i + 1] > theMeV)
				{
					mevLo = MeV[i];
					mevHi = MeV[i+1];
					muLo = muArr[i];
					muHi = muArr[i + 1];
					break;
				}
			}
			if(muLo ==0) muMass = 0.0;
			else muMass = Interpolation.logTerp(mevLo, mevHi, theMeV, muLo, muHi);
		}
		return muMass;
	}		
}
