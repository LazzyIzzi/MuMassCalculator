package nist.MuMassData;
/**
 * @author John H Dunsmuir
 * @hidden
 */

import jhd.MathTools.Interpolation;


class MassAttenuationFE {

	final static double[] MeV= {1.00000E-03,1.50000E-03,2.00000E-03,3.00000E-03,4.00000E-03,5.00000E-03,6.00000E-03,7.11200E-03,7.11210E-03,
			8.00000E-03,1.00000E-02,1.50000E-02,2.00000E-02,3.00000E-02,4.00000E-02,5.00000E-02,6.00000E-02,8.00000E-02,1.00000E-01,
			1.50000E-01,2.00000E-01,3.00000E-01,4.00000E-01,5.00000E-01,6.00000E-01,8.00000E-01,1.00000E+00,1.02200E+00,1.25000E+00,
			1.50000E+00,2.00000E+00,2.04400E+00,3.00000E+00,4.00000E+00,5.00000E+00,6.00000E+00,7.00000E+00,8.00000E+00,9.00000E+00,
			1.00000E+01,1.10000E+01,1.20000E+01,1.30000E+01,1.40000E+01,1.50000E+01,1.60000E+01,1.80000E+01,2.00000E+01,2.20000E+01,
			2.40000E+01,2.60000E+01,2.80000E+01,3.00000E+01,4.00000E+01,5.00000E+01,6.00000E+01,8.00000E+01,1.00000E+02,1.50000E+02,
			2.00000E+02,3.00000E+02,4.00000E+02,5.00000E+02,6.00000E+02,8.00000E+02,1.00000E+03,1.50000E+03,2.00000E+03,3.00000E+03,
			4.00000E+03,5.00000E+03,6.00000E+03,8.00000E+03,1.00000E+04,1.50000E+04,2.00000E+04,3.00000E+04,4.00000E+04,5.00000E+04,
			6.00000E+04,8.00000E+04,1.00000E+05};
	final static double[] Coh= {4.5370E+00,4.2410E+00,3.9330E+00,3.3540E+00,2.8490E+00,2.4210E+00,2.0650E+00,1.7450E+00,1.7450E+00,1.5420E+00,1.2010E+00,7.4580E-01,5.1700E-01,2.8490E-01,1.7950E-01,1.2440E-01,9.1780E-02,5.6040E-02,3.7680E-02,1.7810E-02,1.0330E-02,4.7280E-03,2.6940E-03,1.7360E-03,1.2100E-03,6.8330E-04,4.3810E-04,4.1960E-04,2.8080E-04,1.9510E-04,1.0990E-04,1.0520E-04,4.8840E-05,2.7480E-05,1.7590E-05,1.2220E-05,8.9730E-06,6.8700E-06,5.4280E-06,4.3960E-06,3.6340E-06,3.0540E-06,2.6020E-06,2.2430E-06,1.9540E-06,1.7180E-06,1.3580E-06,1.0990E-06,9.0850E-07,7.6330E-07,6.5040E-07,5.6080E-07,4.8860E-07,2.7490E-07,1.7590E-07,1.2220E-07,6.8700E-08,4.3960E-08,1.9540E-08,1.0990E-08,4.8850E-09,2.7480E-09,1.7590E-09,1.2220E-09,6.8700E-10,4.3960E-10,1.9540E-10,1.0990E-10,4.8850E-11,2.7480E-11,1.7590E-11,1.2220E-11,6.8700E-12,4.3960E-12,1.9540E-12,1.0990E-12,4.8850E-13,2.7480E-13,1.7590E-13,1.2220E-13,6.8700E-14,4.3960E-14};
	final static double[] Incoh= {8.7770E-03,1.5300E-02,2.1240E-02,3.2060E-02,4.2120E-02,5.1330E-02,5.9660E-02,6.8000E-02,6.8000E-02,7.3950E-02,8.5410E-02,1.0470E-01,1.1620E-01,1.2860E-01,1.3380E-01,1.3550E-01,1.3550E-01,1.3320E-01,1.2960E-01,1.2000E-01,1.1140E-01,9.7880E-02,8.8100E-02,8.0650E-02,7.4720E-02,6.5750E-02,5.9160E-02,5.8530E-02,5.2920E-02,4.8110E-02,4.1070E-02,4.0570E-02,3.2320E-02,2.6970E-02,2.3290E-02,2.0590E-02,1.8500E-02,1.6840E-02,1.5470E-02,1.4340E-02,1.3370E-02,1.2540E-02,1.1820E-02,1.1180E-02,1.0620E-02,1.0110E-02,9.2390E-03,8.5200E-03,7.9140E-03,7.3950E-03,6.9440E-03,6.5510E-03,6.2030E-03,4.9290E-03,4.1140E-03,3.5440E-03,2.7960E-03,2.3210E-03,1.6520E-03,1.2960E-03,9.1830E-04,7.1920E-04,5.9530E-04,5.0970E-04,3.9810E-04,3.2750E-04,2.2870E-04,1.7710E-04,1.2310E-04,9.5010E-05,7.7680E-05,6.5880E-05,5.0760E-05,4.1440E-05,2.8640E-05,2.2020E-05,1.5180E-05,1.1660E-05,9.4930E-06,8.0250E-06,6.1530E-06,5.0060E-06};
	final static double[] PE= {9.0810E+03,3.3960E+03,1.6230E+03,5.5430E+02,2.5380E+02,1.3740E+02,8.2720E+01,5.1380E+01,4.0590E+02,3.0400E+02,1.6940E+02,5.6230E+01,2.5050E+01,7.7630E+00,3.3160E+00,1.6970E+00,9.7760E-01,4.0600E-01,2.0450E-01,5.8610E-02,2.4330E-02,7.2660E-03,3.2090E-03,1.7620E-03,1.1100E-03,5.6500E-04,3.5140E-04,3.3350E-04,2.2560E-04,1.6270E-04,1.0030E-04,9.6920E-05,5.4480E-05,3.6700E-05,2.7470E-05,2.1880E-05,1.8150E-05,1.5480E-05,1.3500E-05,1.1960E-05,1.0730E-05,9.7250E-06,8.8940E-06,8.1920E-06,7.5930E-06,7.0740E-06,6.2230E-06,5.5540E-06,5.0150E-06,4.5710E-06,4.1990E-06,3.8820E-06,3.6100E-06,2.6730E-06,2.1220E-06,1.7590E-06,1.3110E-06,1.0450E-06,6.9270E-07,5.1810E-07,3.4450E-07,2.5800E-07,2.0630E-07,1.7180E-07,1.2880E-07,1.0300E-07,6.8610E-08,5.1450E-08,3.4290E-08,2.5710E-08,2.0560E-08,1.7130E-08,1.2850E-08,1.0280E-08,6.8550E-09,5.1400E-09,3.4270E-09,2.5710E-09,2.0560E-09,1.7130E-09,1.2850E-09,1.0280E-09};
	final static double[] PrProdN= {0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,7.0310E-05,3.5800E-04,1.3640E-03,1.4680E-03,3.7810E-03,6.0390E-03,8.0320E-03,9.8100E-03,1.1390E-02,1.2810E-02,1.4090E-02,1.5260E-02,1.6320E-02,1.7290E-02,1.8170E-02,1.9010E-02,1.9790E-02,2.0520E-02,2.1860E-02,2.3050E-02,2.4140E-02,2.5130E-02,2.6030E-02,2.6850E-02,2.7620E-02,3.0710E-02,3.3030E-02,3.4840E-02,3.7560E-02,3.9500E-02,4.2630E-02,4.4510E-02,4.6710E-02,4.8000E-02,4.8840E-02,4.9440E-02,5.0250E-02,5.0770E-02,5.1530E-02,5.1940E-02,5.2400E-02,5.2630E-02,5.2790E-02,5.2890E-02,5.3030E-02,5.3120E-02,5.3250E-02,5.3310E-02,5.3380E-02,5.3410E-02,5.3440E-02,5.3450E-02,5.3470E-02,5.3490E-02};
	final static double[] PrProdE= {0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,1.1310E-05,4.6170E-05,9.1980E-05,1.4130E-04,1.9030E-04,2.3800E-04,2.8360E-04,3.2690E-04,3.6800E-04,4.0690E-04,4.4350E-04,4.7850E-04,5.1150E-04,5.4290E-04,6.0140E-04,6.5480E-04,7.0360E-04,7.4870E-04,7.9040E-04,8.2920E-04,8.6550E-04,1.0160E-03,1.1320E-03,1.2250E-03,1.3650E-03,1.4690E-03,1.6430E-03,1.7530E-03,1.8900E-03,1.9730E-03,2.0300E-03,2.0730E-03,2.1310E-03,2.1710E-03,2.2290E-03,2.2630E-03,2.3000E-03,2.3220E-03,2.3350E-03,2.3440E-03,2.3570E-03,2.3650E-03,2.3760E-03,2.3820E-03,2.3880E-03,2.3920E-03,2.3940E-03,2.3960E-03,2.3970E-03,2.3980E-03};
	final static double[] TotAttn= {9.0850E+03,3.4000E+03,1.6270E+03,5.5760E+02,2.5670E+02,1.3990E+02,8.4840E+01,5.3200E+01,4.0770E+02,3.0560E+02,1.7070E+02,5.7090E+01,2.5680E+01,8.1760E+00,3.6290E+00,1.9570E+00,1.2050E+00,5.9520E-01,3.7170E-01,1.9640E-01,1.4600E-01,1.0990E-01,9.4000E-02,8.4150E-02,7.7040E-02,6.6990E-02,5.9950E-02,5.9280E-02,5.3500E-02,4.8830E-02,4.2650E-02,4.2240E-02,3.6210E-02,3.3120E-02,3.1460E-02,3.0570E-02,3.0110E-02,2.9910E-02,2.9870E-02,2.9940E-02,3.0070E-02,3.0250E-02,3.0440E-02,3.0680E-02,3.0920E-02,3.1180E-02,3.1710E-02,3.2240E-02,3.2770E-02,3.3270E-02,3.3770E-02,3.4230E-02,3.4690E-02,3.6660E-02,3.8280E-02,3.9610E-02,4.1720E-02,4.3290E-02,4.5920E-02,4.7560E-02,4.9520E-02,5.0690E-02,5.1460E-02,5.2020E-02,5.2780E-02,5.3270E-02,5.3990E-02,5.4380E-02,5.4820E-02,5.5050E-02,5.5210E-02,5.5300E-02,5.5440E-02,5.5520E-02,5.5650E-02,5.5720E-02,5.5780E-02,5.5810E-02,5.5850E-02,5.5860E-02,5.5880E-02,5.5890E-02};

	//******************************************************************************

	/**
	 * @return The array of tabulated photon energies
	 */
	public double[] getMevArray()
	{
		return MeV;
	}

	//******************************************************************************

	public double getMuMass(double theMeV, String muMassType)
	{
		double[] muArr;
		double muMass;
		double muLo = 0;
		double muHi = 0;
		double mevLo = 0;
		double mevHi = 0;

		switch(muMassType)
		{
		case "TotAttn":
			muArr = TotAttn;
			break;
		case "Raleigh":
			muArr = Coh;
			break;
		case "Compton":
			muArr = Incoh;
			break;
		case "PhotoElectric":
			muArr = PE;
			break;
		case "PairProdN":
			muArr = PrProdN;
			break;
		case "PairProdE":
			muArr = PrProdE;
			break;
		default:
			muArr = TotAttn;
			break;
		}

		//Report the muMass at 100GeV for any energy at or above 100GeV
		if(theMeV >= 100000.0)
		{
			muMass = muArr[muArr.length - 1];
		}			
		else
		{
			//Look everywhere except the last point
			for(int i = 0; i< muArr.length - 1;i++)
			{
				if(MeV[i] <= theMeV && MeV[i + 1] > theMeV)
				{
					mevLo = MeV[i];
					mevHi = MeV[i+1];
					muLo = muArr[i];
					muHi = muArr[i + 1];
					break;
				}
			}
			if(muLo ==0) muMass = 0.0;
			else muMass = Interpolation.logTerp(mevLo, mevHi, theMeV, muLo, muHi);
		}
		return muMass;
	}		
}
