package nist.MuMassData;
/**
 * @author John H Dunsmuir
 * @hidden
 */

import jhd.MathTools.Interpolation;


class MassAttenuationC {

	final static double[] MeV= {1.0000E-03,1.5000E-03,2.0000E-03,3.0000E-03,4.0000E-03,5.0000E-03,6.0000E-03,8.0000E-03,1.0000E-02,1.5000E-02,2.0000E-02,3.0000E-02,4.0000E-02,5.0000E-02,6.0000E-02,8.0000E-02,1.0000E-01,1.5000E-01,2.0000E-01,3.0000E-01,4.0000E-01,5.0000E-01,6.0000E-01,8.0000E-01,1.0000E+00,1.0220E+00,1.2500E+00,1.5000E+00,2.0000E+00,2.0440E+00,3.0000E+00,4.0000E+00,5.0000E+00,6.0000E+00,7.0000E+00,8.0000E+00,9.0000E+00,1.0000E+01,1.1000E+01,1.2000E+01,1.3000E+01,1.4000E+01,1.5000E+01,1.6000E+01,1.8000E+01,2.0000E+01,2.2000E+01,2.4000E+01,2.6000E+01,2.8000E+01,3.0000E+01,4.0000E+01,5.0000E+01,6.0000E+01,8.0000E+01,1.0000E+02,1.5000E+02,2.0000E+02,3.0000E+02,4.0000E+02,5.0000E+02,6.0000E+02,8.0000E+02,1.0000E+03,1.5000E+03,2.0000E+03,3.0000E+03,4.0000E+03,5.0000E+03,6.0000E+03,8.0000E+03,1.0000E+04,1.5000E+04,2.0000E+04,3.0000E+04,4.0000E+04,5.0000E+04,6.0000E+04,8.0000E+04,1.0000E+05};
	final static double[] Coh= {1.0790E+00,9.5860E-01,8.3180E-01,6.1270E-01,4.6020E-01,3.5950E-01,2.9180E-01,2.0960E-01,1.6200E-01,9.7870E-02,6.4780E-02,3.3650E-02,2.0450E-02,1.3710E-02,9.8070E-03,5.7110E-03,3.7190E-03,1.6850E-03,9.5410E-04,4.2640E-04,2.4030E-04,1.5390E-04,1.0690E-04,6.0170E-05,3.8520E-05,3.6880E-05,2.4650E-05,1.7120E-05,9.6320E-06,9.2200E-06,4.2810E-06,2.4080E-06,1.5410E-06,1.0700E-06,7.8620E-07,6.0220E-07,4.7570E-07,3.8530E-07,3.1850E-07,2.6760E-07,2.2800E-07,1.9660E-07,1.7130E-07,1.5050E-07,1.1890E-07,9.6320E-08,7.9620E-08,6.6880E-08,5.7010E-08,4.9150E-08,4.2810E-08,2.4080E-08,1.5410E-08,1.0700E-08,6.0220E-09,3.8530E-09,1.7120E-09,9.6320E-10,4.2800E-10,2.4080E-10,1.5410E-10,1.0700E-10,6.0220E-11,3.8530E-11,1.7120E-11,9.6320E-12,4.2800E-12,2.4080E-12,1.5410E-12,1.0700E-12,6.0220E-13,3.8530E-13,1.7120E-13,9.6320E-14,4.2800E-14,2.4080E-14,1.5410E-14,1.0700E-14,6.0220E-15,3.8530E-15};
	final static double[] Incoh= {1.2630E-02,2.5070E-02,3.8620E-02,6.4080E-02,8.4480E-02,9.9470E-02,1.1040E-01,1.2520E-01,1.3520E-01,1.5100E-01,1.5950E-01,1.6550E-01,1.6530E-01,1.6300E-01,1.5980E-01,1.5310E-01,1.4660E-01,1.3270E-01,1.2190E-01,1.0620E-01,9.5210E-02,8.6990E-02,8.0470E-02,7.0700E-02,6.3580E-02,6.2920E-02,5.6860E-02,5.1690E-02,4.4100E-02,4.3560E-02,3.4700E-02,2.8940E-02,2.4990E-02,2.2090E-02,1.9850E-02,1.8070E-02,1.6610E-02,1.5390E-02,1.4350E-02,1.3460E-02,1.2680E-02,1.2000E-02,1.1390E-02,1.0840E-02,9.9120E-03,9.1400E-03,8.4930E-03,7.9370E-03,7.4510E-03,7.0290E-03,6.6530E-03,5.2900E-03,4.4150E-03,3.8040E-03,3.0000E-03,2.4900E-03,1.7730E-03,1.3900E-03,9.8520E-04,7.7160E-04,6.3880E-04,5.4700E-04,4.2720E-04,3.5140E-04,2.4540E-04,1.9000E-04,1.3210E-04,1.0190E-04,8.3380E-05,7.0700E-05,5.4450E-05,4.4460E-05,3.0730E-05,2.3630E-05,1.6290E-05,1.2510E-05,1.0190E-05,8.6090E-06,6.6030E-06,5.3700E-06};
	final static double[] PE= {2.2100E+03,6.9940E+02,3.0170E+02,8.9650E+01,3.7240E+01,1.8660E+01,1.0540E+01,4.2410E+00,2.0760E+00,5.5850E-01,2.1770E-01,5.7060E-02,2.1930E-02,1.0420E-02,5.6710E-03,2.1690E-03,1.0310E-03,2.7060E-04,1.0630E-04,2.9800E-05,1.2720E-05,6.8390E-06,4.2530E-06,2.1440E-06,1.3330E-06,1.2290E-06,8.3480E-07,6.0620E-07,3.8260E-07,3.7020E-07,2.1470E-07,1.4780E-07,1.1230E-07,9.0350E-08,7.5560E-08,6.4880E-08,5.6860E-08,5.0590E-08,4.5530E-08,4.1400E-08,3.7960E-08,3.5040E-08,3.2540E-08,3.0370E-08,2.6800E-08,2.3980E-08,2.1690E-08,1.9800E-08,1.8220E-08,1.6860E-08,1.5700E-08,1.1670E-08,9.2810E-09,7.7060E-09,5.7560E-09,4.5910E-09,3.0490E-09,2.2830E-09,1.5190E-09,1.1380E-09,9.1000E-10,7.5810E-10,5.6810E-10,4.5450E-10,3.0290E-10,2.2710E-10,1.5140E-10,1.1350E-10,9.0800E-11,7.5660E-11,5.6760E-11,4.5410E-11,3.0270E-11,2.2700E-11,1.5130E-11,1.1350E-11,9.0800E-12,7.5660E-12,5.6760E-12,4.5400E-12};
	final static double[] PrProdN= {0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,1.4390E-05,7.9920E-05,3.1870E-04,3.4350E-04,9.1250E-04,1.4820E-03,1.9880E-03,2.4450E-03,2.8510E-03,3.2180E-03,3.5510E-03,3.8540E-03,4.1290E-03,4.3820E-03,4.6170E-03,4.8360E-03,5.0390E-03,5.2340E-03,5.5850E-03,5.9010E-03,6.1920E-03,6.4530E-03,6.6930E-03,6.9140E-03,7.1200E-03,7.9620E-03,8.5940E-03,9.1000E-03,9.8620E-03,1.0420E-02,1.1370E-02,1.1950E-02,1.2680E-02,1.3100E-02,1.3390E-02,1.3600E-02,1.3880E-02,1.4060E-02,1.4330E-02,1.4490E-02,1.4650E-02,1.4740E-02,1.4800E-02,1.4830E-02,1.4890E-02,1.4920E-02,1.4960E-02,1.4990E-02,1.5010E-02,1.5030E-02,1.5030E-02,1.5040E-02,1.5050E-02,1.5050E-02};
	final static double[] PrProdE= {0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,1.2140E-05,4.9560E-05,9.8770E-05,1.5170E-04,2.0450E-04,2.5580E-04,3.0500E-04,3.5190E-04,3.9640E-04,4.3850E-04,4.7820E-04,5.1640E-04,5.5250E-04,5.8660E-04,6.5080E-04,7.0950E-04,7.6360E-04,8.1370E-04,8.5990E-04,9.0350E-04,9.4410E-04,1.1150E-03,1.2480E-03,1.3570E-03,1.5250E-03,1.6520E-03,1.8720E-03,2.0180E-03,2.2050E-03,2.3210E-03,2.4030E-03,2.4640E-03,2.5490E-03,2.6060E-03,2.6930E-03,2.7430E-03,2.7980E-03,2.8300E-03,2.8500E-03,2.8640E-03,2.8820E-03,2.8940E-03,2.9110E-03,2.9200E-03,2.9290E-03,2.9350E-03,2.9380E-03,2.9410E-03,2.9430E-03,2.9450E-03};
	final static double[] TotAttn= {2.2110E+03,7.0040E+02,3.0260E+02,9.0320E+01,3.7780E+01,1.9120E+01,1.0950E+01,4.5760E+00,2.3730E+00,8.0740E-01,4.4200E-01,2.5620E-01,2.0760E-01,1.8710E-01,1.7530E-01,1.6100E-01,1.5140E-01,1.3470E-01,1.2290E-01,1.0660E-01,9.5470E-02,8.7150E-02,8.0580E-02,7.0760E-02,6.3620E-02,6.2960E-02,5.6900E-02,5.1790E-02,4.4430E-02,4.3910E-02,3.5630E-02,3.0470E-02,2.7080E-02,2.4690E-02,2.2910E-02,2.1540E-02,2.0470E-02,1.9590E-02,1.8880E-02,1.8280E-02,1.7780E-02,1.7350E-02,1.6980E-02,1.6670E-02,1.6150E-02,1.5750E-02,1.5450E-02,1.5200E-02,1.5000E-02,1.4850E-02,1.4720E-02,1.4370E-02,1.4260E-02,1.4260E-02,1.4390E-02,1.4570E-02,1.5010E-02,1.5360E-02,1.5860E-02,1.6190E-02,1.6430E-02,1.6610E-02,1.6850E-02,1.7020E-02,1.7270E-02,1.7420E-02,1.7580E-02,1.7670E-02,1.7730E-02,1.7770E-02,1.7820E-02,1.7860E-02,1.7900E-02,1.7930E-02,1.7960E-02,1.7970E-02,1.7980E-02,1.7990E-02,1.8000E-02,1.8000E-02};

	//******************************************************************************

	/**
	 * @return The array of tabulated photon energies
	 */
	public double[] getMevArray()
	{
		return MeV;
	}

	//******************************************************************************

	public double getMuMass(double theMeV, String muMassType)
	{
		double[] muArr;
		double muMass;
		double muLo = 0;
		double muHi = 0;
		double mevLo = 0;
		double mevHi = 0;

		switch(muMassType)
		{
		case "TotAttn":
			muArr = TotAttn;
			break;
		case "Raleigh":
			muArr = Coh;
			break;
		case "Compton":
			muArr = Incoh;
			break;
		case "PhotoElectric":
			muArr = PE;
			break;
		case "PairProdN":
			muArr = PrProdN;
			break;
		case "PairProdE":
			muArr = PrProdE;
			break;
		default:
			muArr = TotAttn;
			break;
		}

		//Report the muMass at 100GeV for any energy at or above 100GeV
		if(theMeV >= 100000.0)
		{
			muMass = muArr[muArr.length - 1];
		}			
		else
		{
			//Look everywhere except the last point
			for(int i = 0; i< muArr.length - 1;i++)
			{
				if(MeV[i] <= theMeV && MeV[i + 1] > theMeV)
				{
					mevLo = MeV[i];
					mevHi = MeV[i+1];
					muLo = muArr[i];
					muHi = muArr[i + 1];
					break;
				}
			}
			if(muLo ==0) muMass = 0.0;
			else muMass = Interpolation.logTerp(mevLo, mevHi, theMeV, muLo, muHi);
		}
		return muMass;
	}		
}
