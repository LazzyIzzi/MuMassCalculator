package nist.MuMassData;
/**
 * @author John H Dunsmuir
 * @hidden
 */

import jhd.MathTools.Interpolation;


class MassAttenuationLI {

	final static double[] MeV= {1.0000E-03,1.5000E-03,2.0000E-03,3.0000E-03,4.0000E-03,5.0000E-03,6.0000E-03,8.0000E-03,1.0000E-02,1.5000E-02,2.0000E-02,3.0000E-02,4.0000E-02,5.0000E-02,6.0000E-02,8.0000E-02,1.0000E-01,1.5000E-01,2.0000E-01,3.0000E-01,4.0000E-01,5.0000E-01,6.0000E-01,8.0000E-01,1.0000E+00,1.0220E+00,1.2500E+00,1.5000E+00,2.0000E+00,2.0440E+00,3.0000E+00,4.0000E+00,5.0000E+00,6.0000E+00,7.0000E+00,8.0000E+00,9.0000E+00,1.0000E+01,1.1000E+01,1.2000E+01,1.3000E+01,1.4000E+01,1.5000E+01,1.6000E+01,1.8000E+01,2.0000E+01,2.2000E+01,2.4000E+01,2.6000E+01,2.8000E+01,3.0000E+01,4.0000E+01,5.0000E+01,6.0000E+01,8.0000E+01,1.0000E+02,1.5000E+02,2.0000E+02,3.0000E+02,4.0000E+02,5.0000E+02,6.0000E+02,8.0000E+02,1.0000E+03,1.5000E+03,2.0000E+03,3.0000E+03,4.0000E+03,5.0000E+03,6.0000E+03,8.0000E+03,1.0000E+04,1.5000E+04,2.0000E+04,3.0000E+04,4.0000E+04,5.0000E+04,6.0000E+04,8.0000E+04,1.0000E+05};
	final static double[] Coh= {4.1070E-01,3.4190E-01,2.9200E-01,2.3160E-01,1.9360E-01,1.6390E-01,1.3900E-01,1.0090E-01,7.4850E-02,4.0140E-02,2.4740E-02,1.1990E-02,7.0060E-03,4.5720E-03,3.2110E-03,1.8270E-03,1.1760E-03,5.2570E-04,2.9630E-04,1.3190E-04,7.4210E-05,4.7500E-05,3.3000E-05,1.8560E-05,1.1880E-05,1.1370E-05,7.6040E-06,5.2800E-06,2.9700E-06,2.8440E-06,1.3200E-06,7.4260E-07,4.7530E-07,3.3000E-07,2.4250E-07,1.8570E-07,1.4670E-07,1.1880E-07,9.8210E-08,8.2510E-08,7.0300E-08,6.0620E-08,5.2800E-08,4.6410E-08,3.6670E-08,2.9710E-08,2.4540E-08,2.0620E-08,1.7580E-08,1.5160E-08,1.3210E-08,7.4250E-09,4.7520E-09,3.3000E-09,1.8560E-09,1.1880E-09,5.2790E-10,2.9690E-10,1.3200E-10,7.4230E-11,4.7510E-11,3.3000E-11,1.8560E-11,1.1880E-11,5.2790E-12,2.9690E-12,1.3200E-12,7.4230E-13,4.7510E-13,3.3000E-13,1.8560E-13,1.1880E-13,5.2790E-14,2.9690E-14,1.3200E-14,7.4230E-15,4.7510E-15,3.3000E-15,1.8560E-15,1.1880E-15};
	final static double[] Incoh= {3.0790E-02,4.5750E-02,5.5340E-02,6.9150E-02,8.1220E-02,9.2230E-02,1.0210E-01,1.1770E-01,1.2870E-01,1.4260E-01,1.4770E-01,1.4910E-01,1.4680E-01,1.4370E-01,1.4030E-01,1.3360E-01,1.2760E-01,1.1520E-01,1.0570E-01,9.1970E-02,8.2420E-02,7.5270E-02,6.9640E-02,6.1190E-02,5.5020E-02,5.4430E-02,4.9190E-02,4.4720E-02,3.8160E-02,3.7690E-02,3.0020E-02,2.5040E-02,2.1620E-02,1.9110E-02,1.7180E-02,1.5630E-02,1.4370E-02,1.3320E-02,1.2420E-02,1.1640E-02,1.0980E-02,1.0380E-02,9.8560E-03,9.3880E-03,8.5780E-03,7.9100E-03,7.3470E-03,6.8650E-03,6.4460E-03,6.0810E-03,5.7580E-03,4.5760E-03,3.8200E-03,3.2910E-03,2.5960E-03,2.1540E-03,1.5340E-03,1.2030E-03,8.5250E-04,6.6770E-04,5.5270E-04,4.7320E-04,3.6960E-04,3.0410E-04,2.1240E-04,1.6430E-04,1.1430E-04,8.8240E-05,7.2130E-05,6.1160E-05,4.7120E-05,3.8470E-05,2.6580E-05,2.0440E-05,1.4100E-05,1.0820E-05,8.8150E-06,7.4490E-06,5.7120E-06,4.6470E-06};
	final static double[] PE= {2.3340E+02,6.6290E+01,2.6720E+01,7.2480E+00,2.8400E+00,1.3630E+00,7.4650E-01,2.8670E-01,1.3600E-01,3.4780E-02,1.3150E-02,3.3330E-03,1.2540E-03,5.8740E-04,3.1620E-04,1.1910E-04,5.6080E-05,1.4450E-05,5.6230E-06,1.5580E-06,6.6070E-07,3.5410E-07,2.1980E-07,1.1070E-07,6.8880E-08,6.1060E-08,4.1540E-08,3.0250E-08,1.9190E-08,1.8580E-08,1.0850E-08,7.4990E-09,5.7140E-09,4.6100E-09,3.8610E-09,3.3200E-09,2.9110E-09,2.5920E-09,2.3350E-09,2.1240E-09,1.9490E-09,1.7990E-09,1.6720E-09,1.5610E-09,1.3780E-09,1.2330E-09,1.1160E-09,1.0190E-09,9.3790E-10,8.6850E-10,8.0850E-10,6.0130E-10,4.7870E-10,3.9750E-10,2.9690E-10,2.3690E-10,1.5740E-10,1.1780E-10,7.8420E-11,5.8770E-11,4.6990E-11,3.9150E-11,2.9350E-11,2.3470E-11,1.5640E-11,1.1730E-11,7.8190E-12,5.8630E-12,4.6900E-12,3.9090E-12,2.9320E-12,2.3450E-12,1.5630E-12,1.1720E-12,7.8160E-13,5.8620E-13,4.6890E-13,3.9080E-13,2.9310E-13,2.3450E-13};
	final static double[] PrProdN= {0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,6.1180E-06,3.4300E-05,1.3730E-04,1.4810E-04,3.9430E-04,6.4060E-04,8.6020E-04,1.0580E-03,1.2340E-03,1.3930E-03,1.5370E-03,1.6690E-03,1.7890E-03,1.8990E-03,2.0020E-03,2.0980E-03,2.1870E-03,2.2720E-03,2.4280E-03,2.5670E-03,2.6950E-03,2.8110E-03,2.9190E-03,3.0180E-03,3.1100E-03,3.4910E-03,3.7780E-03,4.0090E-03,4.3630E-03,4.6170E-03,5.0330E-03,5.2920E-03,5.6090E-03,5.7980E-03,5.9270E-03,6.0200E-03,6.1470E-03,6.2310E-03,6.3540E-03,6.4240E-03,6.4990E-03,6.5400E-03,6.5660E-03,6.5850E-03,6.6090E-03,6.6240E-03,6.6450E-03,6.6570E-03,6.6690E-03,6.6750E-03,6.6800E-03,6.6820E-03,6.6860E-03,6.6880E-03};
	final static double[] PrProdE= {0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,1.0500E-05,4.2880E-05,8.5440E-05,1.3130E-04,1.7690E-04,2.2130E-04,2.6390E-04,3.0440E-04,3.4300E-04,3.7940E-04,4.1380E-04,4.4660E-04,4.7790E-04,5.0770E-04,5.6320E-04,6.1400E-04,6.6100E-04,7.0430E-04,7.4480E-04,7.8250E-04,8.1790E-04,9.6740E-04,1.0850E-03,1.1810E-03,1.3300E-03,1.4440E-03,1.6420E-03,1.7720E-03,1.9420E-03,2.0500E-03,2.1280E-03,2.1870E-03,2.2720E-03,2.3310E-03,2.4230E-03,2.4780E-03,2.5400E-03,2.5770E-03,2.6000E-03,2.6170E-03,2.6390E-03,2.6530E-03,2.6740E-03,2.6850E-03,2.6970E-03,2.7030E-03,2.7080E-03,2.7110E-03,2.7140E-03,2.7170E-03};
	final static double[] TotAttn= {2.3380E+02,6.6680E+01,2.7070E+01,7.5490E+00,3.1140E+00,1.6190E+00,9.8760E-01,5.0540E-01,3.3960E-01,2.1760E-01,1.8560E-01,1.6440E-01,1.5510E-01,1.4880E-01,1.4380E-01,1.3560E-01,1.2890E-01,1.1580E-01,1.0600E-01,9.2100E-02,8.2490E-02,7.5320E-02,6.9680E-02,6.1210E-02,5.5030E-02,5.4450E-02,4.9210E-02,4.4760E-02,3.8300E-02,3.7840E-02,3.0430E-02,2.5720E-02,2.2570E-02,2.0300E-02,1.8590E-02,1.7250E-02,1.6170E-02,1.5290E-02,1.4550E-02,1.3920E-02,1.3390E-02,1.2920E-02,1.2520E-02,1.2170E-02,1.1570E-02,1.1090E-02,1.0700E-02,1.0380E-02,1.0110E-02,9.8810E-03,9.6870E-03,9.0350E-03,8.6830E-03,8.4810E-03,8.2890E-03,8.2150E-03,8.2090E-03,8.2670E-03,8.4030E-03,8.5160E-03,8.6080E-03,8.6800E-03,8.7890E-03,8.8670E-03,8.9900E-03,9.0660E-03,9.1540E-03,9.2050E-03,9.2390E-03,9.2630E-03,9.2950E-03,9.3160E-03,9.3460E-03,9.3630E-03,9.3800E-03,9.3900E-03,9.3960E-03,9.4010E-03,9.4050E-03,9.4090E-03};

	//******************************************************************************

	/**
	 * @return The array of tabulated photon energies
	 */
	public double[] getMevArray()
	{
		return MeV;
	}

	//******************************************************************************

	public double getMuMass(double theMeV, String muMassType)
	{
		double[] muArr;
		double muMass;
		double muLo = 0;
		double muHi = 0;
		double mevLo = 0;
		double mevHi = 0;

		switch(muMassType)
		{
		case "TotAttn":
			muArr = TotAttn;
			break;
		case "Raleigh":
			muArr = Coh;
			break;
		case "Compton":
			muArr = Incoh;
			break;
		case "PhotoElectric":
			muArr = PE;
			break;
		case "PairProdN":
			muArr = PrProdN;
			break;
		case "PairProdE":
			muArr = PrProdE;
			break;
		default:
			muArr = TotAttn;
			break;
		}

		//Report the muMass at 100GeV for any energy at or above 100GeV
		if(theMeV >= 100000.0)
		{
			muMass = muArr[muArr.length - 1];
		}			
		else
		{
			//Look everywhere except the last point
			for(int i = 0; i< muArr.length - 1;i++)
			{
				if(MeV[i] <= theMeV && MeV[i + 1] > theMeV)
				{
					mevLo = MeV[i];
					mevHi = MeV[i+1];
					muLo = muArr[i];
					muHi = muArr[i + 1];
					break;
				}
			}
			if(muLo ==0) muMass = 0.0;
			else muMass = Interpolation.logTerp(mevLo, mevHi, theMeV, muLo, muHi);
		}
		return muMass;
	}		
}
