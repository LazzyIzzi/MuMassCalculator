package nist.MuMassData;
/**
 * @author John H Dunsmuir
 * @hidden
 */

import jhd.MathTools.Interpolation;


class MassAttenuationNI {

	final static double[] MeV= {1.00000E-03,1.00400E-03,1.00800E-03,1.00801E-03,1.50000E-03,2.00000E-03,3.00000E-03,4.00000E-03,5.00000E-03,
			6.00000E-03,8.00000E-03,8.33300E-03,8.33310E-03,1.00000E-02,1.50000E-02,2.00000E-02,3.00000E-02,4.00000E-02,5.00000E-02,
			6.00000E-02,8.00000E-02,1.00000E-01,1.50000E-01,2.00000E-01,3.00000E-01,4.00000E-01,5.00000E-01,6.00000E-01,8.00000E-01,
			1.00000E+00,1.02200E+00,1.25000E+00,1.50000E+00,2.00000E+00,2.04400E+00,3.00000E+00,4.00000E+00,5.00000E+00,6.00000E+00,
			7.00000E+00,8.00000E+00,9.00000E+00,1.00000E+01,1.10000E+01,1.20000E+01,1.30000E+01,1.40000E+01,1.50000E+01,1.60000E+01,
			1.80000E+01,2.00000E+01,2.20000E+01,2.40000E+01,2.60000E+01,2.80000E+01,3.00000E+01,4.00000E+01,5.00000E+01,6.00000E+01,
			8.00000E+01,1.00000E+02,1.50000E+02,2.00000E+02,3.00000E+02,4.00000E+02,5.00000E+02,6.00000E+02,8.00000E+02,1.00000E+03,
			1.50000E+03,2.00000E+03,3.00000E+03,4.00000E+03,5.00000E+03,6.00000E+03,8.00000E+03,1.00000E+04,1.50000E+04,2.00000E+04,
			3.00000E+04,4.00000E+04,5.00000E+04,6.00000E+04,8.00000E+04,1.00000E+05};
	final static double[] Coh= {5.0520E+00,5.0500E+00,5.0470E+00,5.0470E+00,4.7610E+00,4.4470E+00,3.8380E+00,3.2930E+00,2.8190E+00,2.4170E+00,1.8110E+00,1.7330E+00,1.7330E+00,1.4060E+00,8.6010E-01,5.9470E-01,3.3030E-01,2.0820E-01,1.4400E-01,1.0610E-01,6.4830E-02,4.3670E-02,2.0720E-02,1.2030E-02,5.5100E-03,3.1430E-03,2.0270E-03,1.4130E-03,7.9830E-04,5.1200E-04,4.9030E-04,3.2810E-04,2.2800E-04,1.2840E-04,1.2290E-04,5.7080E-05,3.2120E-05,2.0550E-05,1.4270E-05,1.0490E-05,8.0300E-06,6.3450E-06,5.1400E-06,4.2480E-06,3.5690E-06,3.0410E-06,2.6230E-06,2.2840E-06,2.0080E-06,1.5860E-06,1.2850E-06,1.0620E-06,8.9240E-07,7.6030E-07,6.5560E-07,5.7110E-07,3.2130E-07,2.0560E-07,1.4270E-07,8.0300E-08,5.1400E-08,2.2840E-08,1.2850E-08,5.7100E-09,3.2120E-09,2.0550E-09,1.4270E-09,8.0300E-10,5.1400E-10,2.2840E-10,1.2850E-10,5.7100E-11,3.2120E-11,2.0550E-11,1.4270E-11,8.0300E-12,5.1400E-12,2.2840E-12,1.2850E-12,5.7100E-13,3.2120E-13,2.0550E-13,1.4270E-13,8.0300E-14,5.1400E-14};
	final static double[] Incoh= {7.8120E-03,7.8610E-03,7.9100E-03,7.9100E-03,1.3900E-02,1.9600E-02,3.0030E-02,3.9840E-02,4.8950E-02,5.7270E-02,7.1720E-02,7.3860E-02,7.3860E-02,8.3590E-02,1.0410E-01,1.1650E-01,1.2990E-01,1.3560E-01,1.3770E-01,1.3780E-01,1.3580E-01,1.3230E-01,1.2260E-01,1.1390E-01,1.0020E-01,9.0200E-02,8.2590E-02,7.6540E-02,6.7350E-02,6.0610E-02,5.9960E-02,5.4230E-02,4.9300E-02,4.2090E-02,4.1570E-02,3.3120E-02,2.7630E-02,2.3870E-02,2.1100E-02,1.8960E-02,1.7260E-02,1.5860E-02,1.4690E-02,1.3710E-02,1.2860E-02,1.2110E-02,1.1460E-02,1.0880E-02,1.0360E-02,9.4680E-03,8.7310E-03,8.1090E-03,7.5780E-03,7.1160E-03,6.7130E-03,6.3570E-03,5.0500E-03,4.2160E-03,3.6320E-03,2.8650E-03,2.3770E-03,1.6930E-03,1.3280E-03,9.4100E-04,7.3700E-04,6.1010E-04,5.2240E-04,4.0800E-04,3.3560E-04,2.3440E-04,1.8140E-04,1.2610E-04,9.7370E-05,7.9600E-05,6.7510E-05,5.2010E-05,4.2470E-05,2.9350E-05,2.2560E-05,1.5560E-05,1.1940E-05,9.7270E-06,8.2230E-06,6.3050E-06,5.1290E-06};
	final static double[] PE= {9.8500E+03,9.7480E+03,9.6510E+03,1.0990E+04,4.2300E+03,2.0440E+03,7.0560E+02,3.2490E+02,1.7640E+02,1.0650E+02,4.7640E+01,4.2470E+01,3.2750E+02,2.0750E+02,6.9850E+01,3.1490E+01,9.8830E+00,4.2560E+00,2.1930E+00,1.2670E+00,5.3000E-01,2.6800E-01,7.7460E-02,3.2290E-02,9.7020E-03,4.2990E-03,2.3650E-03,1.4910E-03,7.6030E-04,4.7300E-04,4.4920E-04,3.0370E-04,2.1890E-04,1.3480E-04,1.3020E-04,7.3010E-05,4.9100E-05,3.6710E-05,2.9210E-05,2.4220E-05,2.0660E-05,1.8000E-05,1.5940E-05,1.4290E-05,1.2960E-05,1.1840E-05,1.0910E-05,1.0110E-05,9.4160E-06,8.2830E-06,7.3910E-06,6.6720E-06,6.0800E-06,5.5840E-06,5.1630E-06,4.8010E-06,3.5530E-06,2.8210E-06,2.3370E-06,1.7410E-06,1.3870E-06,9.2020E-07,6.8830E-07,4.5760E-07,3.4270E-07,2.7400E-07,2.2820E-07,1.7100E-07,1.3680E-07,9.1120E-08,6.8320E-08,4.5540E-08,3.4150E-08,2.7310E-08,2.2760E-08,1.7070E-08,1.3660E-08,9.1030E-09,6.8280E-09,4.5520E-09,3.4140E-09,2.7300E-09,2.2760E-09,1.7060E-09,1.3660E-09};
	final static double[] PrProdN= {0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,7.9800E-05,4.0230E-04,1.5180E-03,1.6310E-03,4.1890E-03,6.6750E-03,8.8670E-03,1.0820E-02,1.2550E-02,1.4110E-02,1.5520E-02,1.6800E-02,1.7970E-02,1.9020E-02,2.0010E-02,2.0920E-02,2.1780E-02,2.2580E-02,2.4050E-02,2.5350E-02,2.6550E-02,2.7620E-02,2.8610E-02,2.9510E-02,3.0340E-02,3.3750E-02,3.6290E-02,3.8290E-02,4.1260E-02,4.3380E-02,4.6780E-02,4.8810E-02,5.1190E-02,5.2560E-02,5.3460E-02,5.4110E-02,5.4960E-02,5.5520E-02,5.6320E-02,5.6760E-02,5.7240E-02,5.7490E-02,5.7660E-02,5.7770E-02,5.7910E-02,5.8010E-02,5.8130E-02,5.8200E-02,5.8270E-02,5.8310E-02,5.8330E-02,5.8340E-02,5.8370E-02,5.8380E-02};
	final static double[] PrProdE= {0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,1.1590E-05,4.7310E-05,9.4250E-05,1.4470E-04,1.9500E-04,2.4380E-04,2.9050E-04,3.3490E-04,3.7700E-04,4.1670E-04,4.5410E-04,4.9000E-04,5.2370E-04,5.5590E-04,6.1580E-04,6.7020E-04,7.2030E-04,7.6640E-04,8.0900E-04,8.4870E-04,8.8560E-04,1.0390E-03,1.1570E-03,1.2520E-03,1.3940E-03,1.4990E-03,1.6750E-03,1.7850E-03,1.9230E-03,2.0050E-03,2.0620E-03,2.1050E-03,2.1620E-03,2.2010E-03,2.2580E-03,2.2910E-03,2.3270E-03,2.3490E-03,2.3610E-03,2.3700E-03,2.3830E-03,2.3910E-03,2.4010E-03,2.4070E-03,2.4130E-03,2.4160E-03,2.4200E-03,2.4210E-03,2.4220E-03,2.4240E-03};
	final static double[] TotAttn= {9.8560E+03,9.7530E+03,9.6560E+03,1.0990E+04,4.2340E+03,2.0480E+03,7.0950E+02,3.2820E+02,1.7930E+02,1.0900E+02,4.9520E+01,4.4280E+01,3.2930E+02,2.0900E+02,7.0810E+01,3.2200E+01,1.0340E+01,4.6000E+00,2.4740E+00,1.5110E+00,7.3060E-01,4.4390E-01,2.2080E-01,1.5820E-01,1.1540E-01,9.7650E-02,8.6980E-02,7.9440E-02,6.8910E-02,6.1600E-02,6.0900E-02,5.4940E-02,5.0150E-02,4.3870E-02,4.3450E-02,3.7450E-02,3.4440E-02,3.2890E-02,3.2100E-02,3.1740E-02,3.1640E-02,3.1700E-02,3.1850E-02,3.2070E-02,3.2310E-02,3.2590E-02,3.2890E-02,3.3200E-02,3.3520E-02,3.4140E-02,3.4760E-02,3.5380E-02,3.5970E-02,3.6540E-02,3.7080E-02,3.7590E-02,3.9840E-02,4.1670E-02,4.3180E-02,4.5520E-02,4.7260E-02,5.0150E-02,5.1930E-02,5.4060E-02,5.5300E-02,5.6130E-02,5.6730E-02,5.7530E-02,5.8060E-02,5.8820E-02,5.9240E-02,5.9690E-02,5.9940E-02,6.0100E-02,6.0210E-02,6.0350E-02,6.0440E-02,6.0560E-02,6.0630E-02,6.0700E-02,6.0740E-02,6.0760E-02,6.0770E-02,6.0800E-02,6.0810E-02};

	//******************************************************************************

	/**
	 * @return The array of tabulated photon energies
	 */
	public double[] getMevArray()
	{
		return MeV;
	}

	//******************************************************************************

	public double getMuMass(double theMeV, String muMassType)
	{
		double[] muArr;
		double muMass;
		double muLo = 0;
		double muHi = 0;
		double mevLo = 0;
		double mevHi = 0;

		switch(muMassType)
		{
		case "TotAttn":
			muArr = TotAttn;
			break;
		case "Raleigh":
			muArr = Coh;
			break;
		case "Compton":
			muArr = Incoh;
			break;
		case "PhotoElectric":
			muArr = PE;
			break;
		case "PairProdN":
			muArr = PrProdN;
			break;
		case "PairProdE":
			muArr = PrProdE;
			break;
		default:
			muArr = TotAttn;
			break;
		}

		//Report the muMass at 100GeV for any energy at or above 100GeV
		if(theMeV >= 100000.0)
		{
			muMass = muArr[muArr.length - 1];
		}			
		else
		{
			//Look everywhere except the last point
			for(int i = 0; i< muArr.length - 1;i++)
			{
				if(MeV[i] <= theMeV && MeV[i + 1] > theMeV)
				{
					mevLo = MeV[i];
					mevHi = MeV[i+1];
					muLo = muArr[i];
					muHi = muArr[i + 1];
					break;
				}
			}
			if(muLo ==0) muMass = 0.0;
			else muMass = Interpolation.logTerp(mevLo, mevHi, theMeV, muLo, muHi);
		}
		return muMass;
	}		
}
