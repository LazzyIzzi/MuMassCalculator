package nist.MuMassData;
/**
 * @author John H Dunsmuir
 * @hidden
 */

import jhd.MathTools.Interpolation;


class MassAttenuationCD {

	final static double[] MeV= {1.00000E-03,1.50000E-03,2.00000E-03,3.00000E-03,3.53700E-03,3.53710E-03,3.63100E-03,3.72700E-03,3.72710E-03,
			4.00000E-03,4.01800E-03,4.01810E-03,5.00000E-03,6.00000E-03,8.00000E-03,1.00000E-02,1.50000E-02,2.00000E-02,2.67100E-02,
			2.67101E-02,3.00000E-02,4.00000E-02,5.00000E-02,6.00000E-02,8.00000E-02,1.00000E-01,1.50000E-01,2.00000E-01,3.00000E-01,
			4.00000E-01,5.00000E-01,6.00000E-01,8.00000E-01,1.00000E+00,1.02200E+00,1.25000E+00,1.50000E+00,2.00000E+00,2.04400E+00,
			3.00000E+00,4.00000E+00,5.00000E+00,6.00000E+00,7.00000E+00,8.00000E+00,9.00000E+00,1.00000E+01,1.10000E+01,1.20000E+01,
			1.30000E+01,1.40000E+01,1.50000E+01,1.60000E+01,1.80000E+01,2.00000E+01,2.20000E+01,2.40000E+01,2.60000E+01,2.80000E+01,
			3.00000E+01,4.00000E+01,5.00000E+01,6.00000E+01,8.00000E+01,1.00000E+02,1.50000E+02,2.00000E+02,3.00000E+02,4.00000E+02,
			5.00000E+02,6.00000E+02,8.00000E+02,1.00000E+03,1.50000E+03,2.00000E+03,3.00000E+03,4.00000E+03,5.00000E+03,6.00000E+03,
			8.00000E+03,1.00000E+04,1.50000E+04,2.00000E+04,3.00000E+04,4.00000E+04,5.00000E+04,6.00000E+04,8.00000E+04,1.00000E+05};
	final static double[] Coh= {7.8270E+00,7.4360E+00,6.9970E+00,6.1070E+00,5.6570E+00,5.6570E+00,5.5830E+00,5.5070E+00,5.5070E+00,5.2930E+00,5.2790E+00,5.2790E+00,4.5950E+00,4.0150E+00,3.1540E+00,2.5690E+00,1.6870E+00,1.1760E+00,7.8220E-01,7.8220E-01,6.6110E-01,4.3180E-01,3.0520E-01,2.2630E-01,1.3830E-01,9.3640E-02,4.5450E-02,2.6780E-02,1.2440E-02,7.1520E-03,4.6340E-03,3.2440E-03,1.8410E-03,1.1840E-03,1.1340E-03,7.6020E-04,5.2890E-04,2.9810E-04,2.8540E-04,1.3260E-04,7.4680E-05,4.7790E-05,3.3190E-05,2.4390E-05,1.8670E-05,1.4750E-05,1.1950E-05,9.8790E-06,8.2980E-06,7.0720E-06,6.0970E-06,5.3120E-06,4.6680E-06,3.6880E-06,2.9880E-06,2.4690E-06,2.0750E-06,1.7680E-06,1.5250E-06,1.3280E-06,7.4680E-07,4.7810E-07,3.3200E-07,1.8680E-07,1.1950E-07,5.3120E-08,2.9880E-08,1.3280E-08,7.4680E-09,4.7810E-09,3.3200E-09,1.8680E-09,1.1950E-09,5.3120E-10,2.9880E-10,1.3280E-10,7.4680E-11,4.7810E-11,3.3200E-11,1.8680E-11,1.1950E-11,5.3120E-12,2.9880E-12,1.3280E-12,7.4680E-13,4.7810E-13,3.3200E-13,1.8680E-13,1.1950E-13};
	final static double[] Incoh= {5.3790E-03,9.6860E-03,1.3850E-02,2.1660E-02,2.5630E-02,2.5630E-02,2.6300E-02,2.6980E-02,2.6980E-02,2.8900E-02,2.9030E-02,2.9030E-02,3.5550E-02,4.1700E-02,5.2760E-02,6.2140E-02,7.9020E-02,8.9950E-02,9.9700E-02,9.9700E-02,1.0310E-01,1.0990E-01,1.1350E-01,1.1520E-01,1.1530E-01,1.1350E-01,1.0660E-01,9.9750E-02,8.8500E-02,8.0040E-02,7.3450E-02,6.8200E-02,6.0110E-02,5.4110E-02,5.3560E-02,4.8460E-02,4.4070E-02,3.7640E-02,3.7180E-02,2.9630E-02,2.4720E-02,2.1350E-02,1.8870E-02,1.6970E-02,1.5440E-02,1.4200E-02,1.3150E-02,1.2270E-02,1.1510E-02,1.0840E-02,1.0250E-02,9.7340E-03,9.2730E-03,8.4750E-03,7.8160E-03,7.2590E-03,6.7820E-03,6.3700E-03,6.0050E-03,5.6890E-03,4.5200E-03,3.7740E-03,3.2510E-03,2.5640E-03,2.1280E-03,1.5160E-03,1.1880E-03,8.4220E-04,6.5950E-04,5.4590E-04,4.6750E-04,3.6520E-04,3.0040E-04,2.0980E-04,1.6240E-04,1.1290E-04,8.7160E-05,7.1250E-05,6.0430E-05,4.6550E-05,3.8010E-05,2.6270E-05,2.0190E-05,1.3930E-05,1.0690E-05,8.7060E-06,7.3610E-06,5.6410E-06,4.5910E-06};
	final static double[] PE= {7.3450E+03,2.9230E+03,1.4660E+03,5.3520E+02,3.5190E+02,1.1460E+03,1.0750E+03,1.0080E+03,1.3840E+03,1.1640E+03,1.1510E+03,1.3210E+03,7.6390E+02,4.7520E+02,2.2220E+02,1.2180E+02,4.0010E+01,1.7940E+01,7.9290E+00,4.9760E+01,3.6880E+01,1.7230E+01,9.3590E+00,5.6360E+00,2.4980E+00,1.3170E+00,4.0730E-01,1.7730E-01,5.6140E-02,2.5690E-02,1.4420E-02,9.2040E-03,4.7520E-03,2.9650E-03,2.8220E-03,1.9030E-03,1.3640E-03,8.3140E-04,8.0250E-04,4.4250E-04,2.9380E-04,2.1760E-04,1.7200E-04,1.4180E-04,1.2040E-04,1.0450E-04,9.2310E-05,8.2560E-05,7.4680E-05,6.8140E-05,6.2680E-05,5.7970E-05,5.3950E-05,4.7350E-05,4.2180E-05,3.8020E-05,3.4600E-05,3.1750E-05,2.9330E-05,2.7250E-05,2.0120E-05,1.5940E-05,1.3190E-05,9.8140E-06,7.8110E-06,5.1750E-06,3.8680E-06,2.5700E-06,1.9240E-06,1.5380E-06,1.2810E-06,9.5950E-07,7.6720E-07,5.1120E-07,3.8330E-07,2.5540E-07,1.9160E-07,1.5320E-07,1.2770E-07,9.5730E-08,7.6610E-08,5.1070E-08,3.8290E-08,2.5530E-08,1.9150E-08,1.5320E-08,1.2770E-08,9.5730E-09,7.6610E-09};
	final static double[] PrProdN= {0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,1.6280E-04,7.5970E-04,2.6220E-03,2.8050E-03,6.7660E-03,1.0460E-02,1.3660E-02,1.6430E-02,1.8890E-02,2.1110E-02,2.3130E-02,2.4980E-02,2.6670E-02,2.8240E-02,2.9700E-02,3.1030E-02,3.2270E-02,3.3420E-02,3.5530E-02,3.7420E-02,3.9130E-02,4.0690E-02,4.2110E-02,4.3410E-02,4.4610E-02,4.9480E-02,5.3080E-02,5.5880E-02,6.0050E-02,6.3000E-02,6.7660E-02,7.0500E-02,7.3720E-02,7.5590E-02,7.6820E-02,7.7730E-02,7.8910E-02,7.9660E-02,8.0730E-02,8.1380E-02,8.2020E-02,8.2340E-02,8.2560E-02,8.2720E-02,8.2930E-02,8.3040E-02,8.3200E-02,8.3310E-02,8.3410E-02,8.3470E-02,8.3470E-02,8.3520E-02,8.3520E-02,8.3570E-02};
	final static double[] PrProdE= {0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,1.0370E-05,4.2280E-05,8.4160E-05,1.2920E-04,1.7390E-04,2.1730E-04,2.5880E-04,2.9820E-04,3.3550E-04,3.7060E-04,4.0380E-04,4.3530E-04,4.6510E-04,4.9340E-04,5.4590E-04,5.9360E-04,6.3750E-04,6.7720E-04,7.1470E-04,7.4890E-04,7.8060E-04,9.1290E-04,1.0140E-03,1.0930E-03,1.2130E-03,1.3000E-03,1.4440E-03,1.5350E-03,1.6450E-03,1.7110E-03,1.7570E-03,1.7900E-03,1.8350E-03,1.8650E-03,1.9110E-03,1.9370E-03,1.9650E-03,1.9810E-03,1.9910E-03,1.9980E-03,2.0070E-03,2.0130E-03,2.0210E-03,2.0260E-03,2.0300E-03,2.0340E-03,2.0350E-03,2.0360E-03,2.0370E-03,2.0380E-03};
	final static double[] TotAttn= {7.3530E+03,2.9310E+03,1.4730E+03,5.4130E+02,3.5750E+02,1.1520E+03,1.0810E+03,1.0130E+03,1.3890E+03,1.1690E+03,1.1570E+03,1.3260E+03,7.6860E+02,4.7930E+02,2.2540E+02,1.2440E+02,4.1780E+01,1.9200E+01,8.8110E+00,5.0650E+01,3.7650E+01,1.7780E+01,9.7780E+00,5.9770E+00,2.7510E+00,1.5240E+00,5.5930E-01,3.0390E-01,1.5710E-01,1.1290E-01,9.2500E-02,8.0650E-02,6.6700E-02,5.8260E-02,5.7510E-02,5.1280E-02,4.6730E-02,4.1390E-02,4.1070E-02,3.6980E-02,3.5590E-02,3.5360E-02,3.5630E-02,3.6200E-02,3.6910E-02,3.7700E-02,3.8530E-02,3.9370E-02,4.0200E-02,4.1010E-02,4.1790E-02,4.2530E-02,4.3240E-02,4.4600E-02,4.5880E-02,4.7070E-02,4.8190E-02,4.9230E-02,5.0200E-02,5.1110E-02,5.4930E-02,5.7890E-02,6.0230E-02,6.3840E-02,6.6440E-02,7.0630E-02,7.3230E-02,7.6210E-02,7.7960E-02,7.9130E-02,7.9990E-02,8.1110E-02,8.1830E-02,8.2850E-02,8.3480E-02,8.4100E-02,8.4410E-02,8.4620E-02,8.4770E-02,8.4980E-02,8.5090E-02,8.5250E-02,8.5350E-02,8.5460E-02,8.5510E-02,8.5510E-02,8.5560E-02,8.5560E-02,8.5620E-02};

	//******************************************************************************

	/**
	 * @return The array of tabulated photon energies
	 */
	public double[] getMevArray()
	{
		return MeV;
	}

	//******************************************************************************

	public double getMuMass(double theMeV, String muMassType)
	{
		double[] muArr;
		double muMass;
		double muLo = 0;
		double muHi = 0;
		double mevLo = 0;
		double mevHi = 0;

		switch(muMassType)
		{
		case "TotAttn":
			muArr = TotAttn;
			break;
		case "Raleigh":
			muArr = Coh;
			break;
		case "Compton":
			muArr = Incoh;
			break;
		case "PhotoElectric":
			muArr = PE;
			break;
		case "PairProdN":
			muArr = PrProdN;
			break;
		case "PairProdE":
			muArr = PrProdE;
			break;
		default:
			muArr = TotAttn;
			break;
		}

		//Report the muMass at 100GeV for any energy at or above 100GeV
		if(theMeV >= 100000.0)
		{
			muMass = muArr[muArr.length - 1];
		}			
		else
		{
			//Look everywhere except the last point
			for(int i = 0; i< muArr.length - 1;i++)
			{
				if(MeV[i] <= theMeV && MeV[i + 1] > theMeV)
				{
					mevLo = MeV[i];
					mevHi = MeV[i+1];
					muLo = muArr[i];
					muHi = muArr[i + 1];
					break;
				}
			}
			if(muLo ==0) muMass = 0.0;
			else muMass = Interpolation.logTerp(mevLo, mevHi, theMeV, muLo, muHi);
		}
		return muMass;
	}		
}
