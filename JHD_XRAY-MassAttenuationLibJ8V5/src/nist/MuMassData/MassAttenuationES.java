package nist.MuMassData;
/**
 * @author John H Dunsmuir
 * @hidden
 */

import jhd.MathTools.Interpolation;


class MassAttenuationES {

	final static double[] MeV= {1.00000E-03,1.01600E-03,1.03200E-03,1.03201E-03,1.16800E-03,1.32100E-03,1.32101E-03,1.50000E-03,1.68000E-03,
			1.68001E-03,1.77200E-03,1.86800E-03,1.86801E-03,2.00000E-03,3.00000E-03,4.00000E-03,4.37400E-03,4.37410E-03,4.50000E-03,
			4.63000E-03,4.63010E-03,5.00000E-03,5.25200E-03,5.25210E-03,6.00000E-03,6.57400E-03,6.57410E-03,6.77300E-03,6.97700E-03,
			6.97710E-03,8.00000E-03,1.00000E-02,1.50000E-02,2.00000E-02,2.04100E-02,2.04101E-02,2.30400E-02,2.60200E-02,2.60201E-02,
			2.64600E-02,2.69000E-02,2.69001E-02,3.00000E-02,4.00000E-02,5.00000E-02,6.00000E-02,8.00000E-02,1.00000E-01,1.39500E-01,
			1.39501E-01,1.50000E-01,2.00000E-01,3.00000E-01,4.00000E-01,5.00000E-01,6.00000E-01,8.00000E-01,1.00000E+00,1.02200E+00,
			1.25000E+00,1.50000E+00,2.00000E+00,2.04400E+00,3.00000E+00,4.00000E+00,5.00000E+00,6.00000E+00,7.00000E+00,8.00000E+00,
			9.00000E+00,1.00000E+01,1.10000E+01,1.20000E+01,1.30000E+01,1.40000E+01,1.50000E+01,1.60000E+01,1.80000E+01,2.00000E+01,
			2.20000E+01,2.40000E+01,2.60000E+01,2.80000E+01,3.00000E+01,4.00000E+01,5.00000E+01,6.00000E+01,8.00000E+01,1.00000E+02,
			1.50000E+02,2.00000E+02,3.00000E+02,4.00000E+02,5.00000E+02,6.00000E+02,8.00000E+02,1.00000E+03,1.50000E+03,2.00000E+03,
			3.00000E+03,4.00000E+03,5.00000E+03,6.00000E+03,8.00000E+03,1.00000E+04,1.50000E+04,2.00000E+04,3.00000E+04,4.00000E+04,
			5.00000E+04,6.00000E+04,8.00000E+04,1.00000E+05};
	final static double[] Coh= {1.4950E+01,1.4930E+01,1.4910E+01,1.4910E+01,1.4760E+01,1.4580E+01,1.4580E+01,1.4350E+01,1.4110E+01,1.4110E+01,1.3990E+01,1.3870E+01,1.3870E+01,1.3690E+01,1.2340E+01,1.1060E+01,1.0610E+01,1.0610E+01,1.0460E+01,1.0310E+01,1.0310E+01,9.9020E+00,9.6350E+00,9.6350E+00,8.8990E+00,8.3900E+00,8.3900E+00,8.2230E+00,8.0560E+00,8.0560E+00,7.2980E+00,6.1040E+00,4.1730E+00,3.0360E+00,2.9650E+00,2.9650E+00,2.5480E+00,2.1740E+00,2.1740E+00,2.1270E+00,2.0810E+00,2.0810E+00,1.7990E+00,1.2050E+00,8.7600E-01,6.6270E-01,4.1690E-01,2.8930E-01,1.6550E-01,1.6550E-01,1.4600E-01,8.7700E-02,4.2210E-02,2.4960E-02,1.6490E-02,1.1690E-02,6.7610E-03,4.4000E-03,4.2190E-03,2.8550E-03,2.0000E-03,1.1370E-03,1.0890E-03,5.1030E-04,2.8810E-04,1.8480E-04,1.2850E-04,9.4460E-05,7.2340E-05,5.7190E-05,4.6320E-05,3.8290E-05,3.2180E-05,2.7430E-05,2.3650E-05,2.0600E-05,1.8110E-05,1.4310E-05,1.1590E-05,9.5800E-06,8.0510E-06,6.8610E-06,5.9150E-06,5.1530E-06,2.8980E-06,1.8550E-06,1.2880E-06,7.2480E-07,4.6390E-07,2.0610E-07,1.1600E-07,5.1530E-08,2.8980E-08,1.8550E-08,1.2880E-08,7.2480E-09,4.6370E-09,2.0610E-09,1.1600E-09,5.1530E-10,2.8980E-10,1.8550E-10,1.2880E-10,7.2480E-11,4.6370E-11,2.0610E-11,1.1600E-11,5.1530E-12,2.8980E-12,1.8550E-12,1.2880E-12,7.2480E-13,4.6370E-13};
	final static double[] Incoh= {4.0280E-03,4.1140E-03,4.2020E-03,4.2020E-03,4.9300E-03,5.7480E-03,5.7480E-03,6.7230E-03,7.7090E-03,7.7090E-03,8.2110E-03,8.7390E-03,8.7390E-03,9.4600E-03,1.4810E-02,1.9800E-02,2.1570E-02,2.1570E-02,2.2150E-02,2.2740E-02,2.2740E-02,2.4390E-02,2.5490E-02,2.5490E-02,2.8570E-02,3.0820E-02,3.0820E-02,3.1580E-02,3.2350E-02,3.2350E-02,3.6000E-02,4.2590E-02,5.6020E-02,6.5670E-02,6.6340E-02,6.6340E-02,7.0230E-02,7.3910E-02,7.3910E-02,7.4400E-02,7.4890E-02,7.4890E-02,7.8070E-02,8.5570E-02,9.0250E-02,9.3120E-02,9.5510E-02,9.5630E-02,9.3220E-02,9.3220E-02,9.2330E-02,8.7700E-02,7.9000E-02,7.2000E-02,6.6440E-02,6.1870E-02,5.4750E-02,4.9450E-02,4.8930E-02,4.4340E-02,4.0370E-02,3.4520E-02,3.4110E-02,2.7210E-02,2.2720E-02,1.9630E-02,1.7350E-02,1.5600E-02,1.4200E-02,1.3050E-02,1.2090E-02,1.1280E-02,1.0580E-02,9.9670E-03,9.4290E-03,8.9510E-03,8.5260E-03,7.7930E-03,7.1860E-03,6.6750E-03,6.2380E-03,5.8580E-03,5.5260E-03,5.2320E-03,4.1570E-03,3.4710E-03,2.9910E-03,2.3580E-03,1.9570E-03,1.3940E-03,1.0930E-03,7.7470E-04,6.0680E-04,5.0220E-04,4.3000E-04,3.3590E-04,2.7640E-04,1.9300E-04,1.4930E-04,1.0380E-04,8.0150E-05,6.5530E-05,5.5570E-05,4.2810E-05,3.4950E-05,2.4150E-05,1.8570E-05,1.2810E-05,9.8330E-06,8.0080E-06,6.7700E-06,5.1910E-06,4.2240E-06};
	final static double[] PE= {7.7710E+03,7.5810E+03,7.3960E+03,7.6210E+03,6.2140E+03,5.0670E+03,5.3920E+03,4.2090E+03,3.3450E+03,3.3830E+03,3.0290E+03,2.7110E+03,2.7590E+03,2.3880E+03,9.7970E+02,5.0570E+02,4.1020E+02,9.0540E+02,8.5850E+02,8.1390E+02,1.1260E+03,9.4910E+02,8.3970E+02,9.8020E+02,7.0210E+02,5.5420E+02,5.8770E+02,5.4550E+02,5.0650E+02,5.2750E+02,3.7600E+02,2.1560E+02,7.7400E+01,3.6980E+01,3.5090E+01,8.1580E+01,5.8810E+01,4.2380E+01,6.1060E+01,5.8470E+01,5.5970E+01,6.4500E+01,4.8950E+01,2.3610E+01,1.3240E+01,8.2160E+00,3.8440E+00,2.1240E+00,8.7600E-01,3.4210E+00,2.8790E+00,1.3940E+00,5.0930E-01,2.5540E-01,1.5260E-01,1.0170E-01,5.5140E-02,3.5050E-02,3.3590E-02,2.2730E-02,1.6160E-02,9.7520E-03,9.4010E-03,5.0690E-03,3.3020E-03,2.4100E-03,1.8820E-03,1.5380E-03,1.2960E-03,1.1180E-03,9.8190E-04,8.7460E-04,7.8810E-04,7.1670E-04,6.5700E-04,6.0630E-04,5.6280E-04,4.9210E-04,4.3690E-04,3.9270E-04,3.5670E-04,3.2660E-04,3.0120E-04,2.7950E-04,2.0510E-04,1.6200E-04,1.3380E-04,9.9240E-05,7.8860E-05,5.2100E-05,3.8890E-05,2.5820E-05,1.9320E-05,1.5440E-05,1.2850E-05,9.6270E-06,7.6950E-06,5.1270E-06,3.8410E-06,2.5610E-06,1.9200E-06,1.5360E-06,1.2800E-06,9.5960E-07,7.6760E-07,5.1170E-07,3.8370E-07,2.5590E-07,1.9190E-07,1.5350E-07,1.2790E-07,9.5940E-08,7.6760E-08};
	final static double[] PrProdN= {};
	final static double[] PrProdE= {};
	final static double[] TotAttn= {7.7860E+03,7.5960E+03,7.4110E+03,7.6360E+03,6.2290E+03,5.0820E+03,5.4060E+03,4.2240E+03,3.3590E+03,3.3970E+03,3.0430E+03,2.7250E+03,2.7730E+03,2.4020E+03,9.9210E+02,5.1680E+02,4.2080E+02,9.1600E+02,8.6900E+02,8.2420E+02,1.1360E+03,9.5910E+02,8.4940E+02,9.8980E+02,7.1100E+02,5.6270E+02,5.9610E+02,5.5370E+02,5.1450E+02,5.3560E+02,3.8340E+02,2.2180E+02,8.1630E+01,4.0080E+01,3.8120E+01,8.4610E+01,6.1430E+01,4.4630E+01,6.3310E+01,6.0670E+01,5.8130E+01,6.6660E+01,5.0830E+01,2.4900E+01,1.4210E+01,8.9710E+00,4.3560E+00,2.5090E+00,1.1350E+00,3.6800E+00,3.1170E+00,1.5700E+00,6.3050E-01,3.5230E-01,2.3560E-01,1.7530E-01,1.1670E-01,8.8900E-02,8.6730E-02,7.0430E-02,6.1080E-02,5.2760E-02,5.2350E-02,4.7620E-02,4.6750E-02,4.7360E-02,4.8410E-02,4.9880E-02,5.1480E-02,5.3140E-02,5.4820E-02,5.6450E-02,5.8080E-02,5.9640E-02,6.1150E-02,6.2600E-02,6.4000E-02,6.6560E-02,6.8890E-02,7.1100E-02,7.3140E-02,7.5030E-02,7.6780E-02,7.8410E-02,8.5180E-02,9.0360E-02,9.4440E-02,1.0050E-01,1.0480E-01,1.1170E-01,1.1580E-01,1.2070E-01,1.2350E-01,1.2530E-01,1.2660E-01,1.2830E-01,1.2950E-01,1.3110E-01,1.3200E-01,1.3290E-01,1.3350E-01,1.3390E-01,1.3410E-01,1.3440E-01,1.3460E-01,1.3480E-01,1.3500E-01,1.3510E-01,1.3520E-01,1.3530E-01,1.3530E-01,1.3540E-01,1.3540E-01};

	//******************************************************************************

	/**
	 * @return The array of tabulated photon energies
	 */
	public double[] getMevArray()
	{
		return MeV;
	}

	//******************************************************************************

	public double getMuMass(double theMeV, String muMassType)
	{
		double[] muArr;
		double muMass;
		double muLo = 0;
		double muHi = 0;
		double mevLo = 0;
		double mevHi = 0;

		switch(muMassType)
		{
		case "TotAttn":
			muArr = TotAttn;
			break;
		case "Raleigh":
			muArr = Coh;
			break;
		case "Compton":
			muArr = Incoh;
			break;
		case "PhotoElectric":
			muArr = PE;
			break;
		case "PairProdN":
			muArr = PrProdN;
			break;
		case "PairProdE":
			muArr = PrProdE;
			break;
		default:
			muArr = TotAttn;
			break;
		}

		//Report the muMass at 100GeV for any energy at or above 100GeV
		if(theMeV >= 100000.0)
		{
			muMass = muArr[muArr.length - 1];
		}			
		else
		{
			//Look everywhere except the last point
			for(int i = 0; i< muArr.length - 1;i++)
			{
				if(MeV[i] <= theMeV && MeV[i + 1] > theMeV)
				{
					mevLo = MeV[i];
					mevHi = MeV[i+1];
					muLo = muArr[i];
					muHi = muArr[i + 1];
					break;
				}
			}
			if(muLo ==0) muMass = 0.0;
			else muMass = Interpolation.logTerp(mevLo, mevHi, theMeV, muLo, muHi);
		}
		return muMass;
	}		
}
