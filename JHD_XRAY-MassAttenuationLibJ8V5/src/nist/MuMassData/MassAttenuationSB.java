package nist.MuMassData;
/**
 * @author John H Dunsmuir
 * @hidden
 */

import jhd.MathTools.Interpolation;


class MassAttenuationSB {

	final static double[] MeV= {1.00000E-03,1.50000E-03,2.00000E-03,3.00000E-03,4.00000E-03,4.13200E-03,4.13210E-03,4.25400E-03,4.38000E-03,
			4.38010E-03,4.53700E-03,4.69800E-03,4.69810E-03,5.00000E-03,6.00000E-03,8.00000E-03,1.00000E-02,1.50000E-02,2.00000E-02,
			3.00000E-02,3.04900E-02,3.04901E-02,4.00000E-02,5.00000E-02,6.00000E-02,8.00000E-02,1.00000E-01,1.50000E-01,2.00000E-01,
			3.00000E-01,4.00000E-01,5.00000E-01,6.00000E-01,8.00000E-01,1.00000E+00,1.02200E+00,1.25000E+00,1.50000E+00,2.00000E+00,
			2.04400E+00,3.00000E+00,4.00000E+00,5.00000E+00,6.00000E+00,7.00000E+00,8.00000E+00,9.00000E+00,1.00000E+01,1.10000E+01,
			1.20000E+01,1.30000E+01,1.40000E+01,1.50000E+01,1.60000E+01,1.80000E+01,2.00000E+01,2.20000E+01,2.40000E+01,2.60000E+01,
			2.80000E+01,3.00000E+01,4.00000E+01,5.00000E+01,6.00000E+01,8.00000E+01,1.00000E+02,1.50000E+02,2.00000E+02,3.00000E+02,
			4.00000E+02,5.00000E+02,6.00000E+02,8.00000E+02,1.00000E+03,1.50000E+03,2.00000E+03,3.00000E+03,4.00000E+03,5.00000E+03,
			6.00000E+03,8.00000E+03,1.00000E+04,1.50000E+04,2.00000E+04,3.00000E+04,4.00000E+04,5.00000E+04,6.00000E+04,8.00000E+04,
			1.00000E+05};
	final static double[] Coh= {8.1120E+00,7.6720E+00,7.1870E+00,6.2670E+00,5.4660E+00,5.3720E+00,5.3720E+00,5.2830E+00,5.1940E+00,5.1940E+00,5.0880E+00,4.9810E+00,4.9810E+00,4.7850E+00,4.2050E+00,3.3110E+00,2.6900E+00,1.7730E+00,1.2520E+00,7.0780E-01,6.9100E-01,6.9100E-01,4.6160E-01,3.2740E-01,2.4380E-01,1.4950E-01,1.0120E-01,4.9190E-02,2.9050E-02,1.3530E-02,7.7850E-03,5.0500E-03,3.5370E-03,2.0090E-03,1.2920E-03,1.2380E-03,8.3050E-04,5.7770E-04,3.2560E-04,3.1180E-04,1.4490E-04,8.1560E-05,5.2230E-05,3.6270E-05,2.6650E-05,2.0400E-05,1.6120E-05,1.3060E-05,1.0790E-05,9.0720E-06,7.7260E-06,6.6630E-06,5.8070E-06,5.1000E-06,4.0310E-06,3.2660E-06,2.6990E-06,2.2670E-06,1.9320E-06,1.6660E-06,1.4510E-06,8.1610E-07,5.2230E-07,3.6280E-07,2.0410E-07,1.3060E-07,5.8070E-08,3.2650E-08,1.4510E-08,8.1610E-09,5.2230E-09,3.6280E-09,2.0410E-09,1.3060E-09,5.8070E-10,3.2650E-10,1.4510E-10,8.1610E-11,5.2230E-11,3.6280E-11,2.0410E-11,1.3060E-11,5.8070E-12,3.2650E-12,1.4510E-12,8.1610E-13,5.2230E-13,3.6280E-13,2.0410E-13,1.3060E-13};
	final static double[] Incoh= {5.0250E-03,9.3240E-03,1.3670E-02,2.1820E-02,2.8990E-02,2.9870E-02,2.9870E-02,3.0670E-02,3.1470E-02,3.1470E-02,3.2460E-02,3.3480E-02,3.3480E-02,3.5320E-02,4.1040E-02,5.1190E-02,6.0050E-02,7.6570E-02,8.7250E-02,1.0000E-01,1.0050E-01,1.0050E-01,1.0670E-01,1.1030E-01,1.1200E-01,1.1240E-01,1.1070E-01,1.0420E-01,9.7590E-02,8.6660E-02,7.8400E-02,7.2020E-02,6.6820E-02,5.8910E-02,5.3070E-02,5.2530E-02,4.7520E-02,4.3230E-02,3.6920E-02,3.6460E-02,2.9060E-02,2.4250E-02,2.0950E-02,1.8520E-02,1.6640E-02,1.5150E-02,1.3920E-02,1.2900E-02,1.2030E-02,1.1290E-02,1.0630E-02,1.0060E-02,9.5510E-03,9.0960E-03,8.3150E-03,7.6670E-03,7.1180E-03,6.6530E-03,6.2470E-03,5.8960E-03,5.5790E-03,4.4350E-03,3.7020E-03,3.1890E-03,2.5160E-03,2.0880E-03,1.4870E-03,1.1660E-03,8.2600E-04,6.4700E-04,5.3570E-04,4.5860E-04,3.5820E-04,2.9470E-04,2.0580E-04,1.5930E-04,1.1070E-04,8.5470E-05,6.9890E-05,5.9260E-05,4.5670E-05,3.7290E-05,2.5770E-05,1.9810E-05,1.3660E-05,1.0490E-05,8.5420E-06,7.2220E-06,5.5350E-06,4.5040E-06};
	final static double[] PE= {8.5770E+03,3.4830E+03,1.7600E+03,6.4700E+02,3.1140E+02,2.8640E+02,8.6410E+02,8.1690E+02,7.7210E+02,1.0450E+03,9.6350E+02,8.8890E+02,1.0240E+03,8.7990E+02,5.5250E+02,2.5970E+02,1.4310E+02,4.7390E+01,2.1340E+01,6.8210E+00,6.5140E+00,3.9940E+01,1.9700E+01,1.0760E+01,6.5190E+00,2.9140E+00,1.5460E+00,4.8280E-01,2.1140E-01,6.7470E-02,3.1020E-02,1.7460E-02,1.1160E-02,5.7770E-03,3.6070E-03,3.4330E-03,2.3150E-03,1.6580E-03,1.0100E-03,9.7390E-04,5.3620E-04,3.5540E-04,2.6300E-04,2.0760E-04,1.7100E-04,1.4520E-04,1.2600E-04,1.1120E-04,9.9470E-05,8.9920E-05,8.2060E-05,7.5430E-05,6.9790E-05,6.4900E-05,5.6930E-05,5.0700E-05,4.5710E-05,4.1600E-05,3.8160E-05,3.5250E-05,3.2740E-05,2.4160E-05,1.9140E-05,1.5840E-05,1.1780E-05,9.3780E-06,6.2130E-06,4.6420E-06,3.0840E-06,2.3090E-06,1.8450E-06,1.5370E-06,1.1520E-06,9.2100E-07,6.1330E-07,4.5990E-07,3.0650E-07,2.2990E-07,1.8390E-07,1.5320E-07,1.1490E-07,9.1900E-08,6.1280E-08,4.5950E-08,3.0630E-08,2.2970E-08,1.8380E-08,1.5310E-08,1.1490E-08,9.1900E-09};
	final static double[] PrProdN= {0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,1.7700E-04,8.2110E-04,2.7940E-03,2.9860E-03,7.1080E-03,1.0940E-02,1.4240E-02,1.7090E-02,1.9630E-02,2.1920E-02,2.3990E-02,2.5890E-02,2.7640E-02,2.9260E-02,3.0770E-02,3.2150E-02,3.3430E-02,3.4620E-02,3.6800E-02,3.8740E-02,4.0510E-02,4.2110E-02,4.3570E-02,4.4910E-02,4.6150E-02,5.1140E-02,5.4900E-02,5.7770E-02,6.2080E-02,6.5090E-02,6.9940E-02,7.2810E-02,7.6170E-02,7.8100E-02,7.9390E-02,8.0280E-02,8.1520E-02,8.2310E-02,8.3440E-02,8.4040E-02,8.4730E-02,8.5080E-02,8.5320E-02,8.5470E-02,8.5670E-02,8.5820E-02,8.5970E-02,8.6070E-02,8.6160E-02,8.6210E-02,8.6260E-02,8.6310E-02,8.6310E-02,8.6360E-02};
	final static double[] PrProdE= {0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,1.0160E-05,4.1470E-05,8.2550E-05,1.2660E-04,1.7050E-04,2.1300E-04,2.5370E-04,2.9230E-04,3.2880E-04,3.6330E-04,3.9570E-04,4.2650E-04,4.5570E-04,4.8340E-04,5.3470E-04,5.8120E-04,6.2420E-04,6.6330E-04,6.9940E-04,7.3300E-04,7.6420E-04,8.9330E-04,9.9120E-04,1.0690E-03,1.1860E-03,1.2710E-03,1.4110E-03,1.4990E-03,1.6070E-03,1.6720E-03,1.7160E-03,1.7490E-03,1.7930E-03,1.8230E-03,1.8670E-03,1.8920E-03,1.9190E-03,1.9350E-03,1.9450E-03,1.9520E-03,1.9610E-03,1.9670E-03,1.9750E-03,1.9790E-03,1.9830E-03,1.9860E-03,1.9880E-03,1.9890E-03,1.9900E-03,1.9910E-03};
	final static double[] TotAttn= {8.5850E+03,3.4910E+03,1.7670E+03,6.5330E+02,3.1690E+02,2.9180E+02,8.6950E+02,8.2220E+02,7.7730E+02,1.0500E+03,9.6860E+02,8.9390E+02,1.0290E+03,8.8480E+02,5.5670E+02,2.6310E+02,1.4580E+02,4.9240E+01,2.2680E+01,7.6290E+00,7.3060E+00,4.0730E+01,2.0260E+01,1.1200E+01,6.8750E+00,3.1760E+00,1.7580E+00,6.3610E-01,3.3810E-01,1.6770E-01,1.1720E-01,9.4530E-02,8.1530E-02,6.6700E-02,5.7970E-02,5.7200E-02,5.0850E-02,4.6280E-02,4.1050E-02,4.0740E-02,3.6860E-02,3.5670E-02,3.5590E-02,3.5980E-02,3.6640E-02,3.7450E-02,3.8310E-02,3.9210E-02,4.0110E-02,4.1010E-02,4.1890E-02,4.2720E-02,4.3510E-02,4.4270E-02,4.5710E-02,4.7040E-02,4.8300E-02,4.9470E-02,5.0560E-02,5.1580E-02,5.2530E-02,5.6500E-02,5.9620E-02,6.2050E-02,6.5790E-02,6.8460E-02,7.2850E-02,7.5480E-02,7.8610E-02,8.0420E-02,8.1640E-02,8.2490E-02,8.3670E-02,8.4420E-02,8.5520E-02,8.6090E-02,8.6760E-02,8.7100E-02,8.7340E-02,8.7480E-02,8.7680E-02,8.7820E-02,8.7970E-02,8.8060E-02,8.8160E-02,8.8210E-02,8.8260E-02,8.8310E-02,8.8310E-02,8.8360E-02};

	//******************************************************************************

	/**
	 * @return The array of tabulated photon energies
	 */
	public double[] getMevArray()
	{
		return MeV;
	}

	//******************************************************************************

	public double getMuMass(double theMeV, String muMassType)
	{
		double[] muArr;
		double muMass;
		double muLo = 0;
		double muHi = 0;
		double mevLo = 0;
		double mevHi = 0;

		switch(muMassType)
		{
		case "TotAttn":
			muArr = TotAttn;
			break;
		case "Raleigh":
			muArr = Coh;
			break;
		case "Compton":
			muArr = Incoh;
			break;
		case "PhotoElectric":
			muArr = PE;
			break;
		case "PairProdN":
			muArr = PrProdN;
			break;
		case "PairProdE":
			muArr = PrProdE;
			break;
		default:
			muArr = TotAttn;
			break;
		}

		//Report the muMass at 100GeV for any energy at or above 100GeV
		if(theMeV >= 100000.0)
		{
			muMass = muArr[muArr.length - 1];
		}			
		else
		{
			//Look everywhere except the last point
			for(int i = 0; i< muArr.length - 1;i++)
			{
				if(MeV[i] <= theMeV && MeV[i + 1] > theMeV)
				{
					mevLo = MeV[i];
					mevHi = MeV[i+1];
					muLo = muArr[i];
					muHi = muArr[i + 1];
					break;
				}
			}
			if(muLo ==0) muMass = 0.0;
			else muMass = Interpolation.logTerp(mevLo, mevHi, theMeV, muLo, muHi);
		}
		return muMass;
	}		
}
