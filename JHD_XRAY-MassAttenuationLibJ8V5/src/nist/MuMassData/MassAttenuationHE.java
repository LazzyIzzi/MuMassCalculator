package nist.MuMassData;
/**
 * @author John H Dunsmuir
 * @hidden
 */

import jhd.MathTools.Interpolation;


class MassAttenuationHE {

	final static double[] MeV= {1.0000E-03,1.5000E-03,2.0000E-03,3.0000E-03,4.0000E-03,5.0000E-03,6.0000E-03,8.0000E-03,1.0000E-02,1.5000E-02,2.0000E-02,3.0000E-02,4.0000E-02,5.0000E-02,6.0000E-02,8.0000E-02,1.0000E-01,1.5000E-01,2.0000E-01,3.0000E-01,4.0000E-01,5.0000E-01,6.0000E-01,8.0000E-01,1.0000E+00,1.0220E+00,1.2500E+00,1.5000E+00,2.0000E+00,2.0440E+00,3.0000E+00,4.0000E+00,5.0000E+00,6.0000E+00,7.0000E+00,8.0000E+00,9.0000E+00,1.0000E+01,1.1000E+01,1.2000E+01,1.3000E+01,1.4000E+01,1.5000E+01,1.6000E+01,1.8000E+01,2.0000E+01,2.2000E+01,2.4000E+01,2.6000E+01,2.8000E+01,3.0000E+01,4.0000E+01,5.0000E+01,6.0000E+01,8.0000E+01,1.0000E+02,1.5000E+02,2.0000E+02,3.0000E+02,4.0000E+02,5.0000E+02,6.0000E+02,8.0000E+02,1.0000E+03,1.5000E+03,2.0000E+03,3.0000E+03,4.0000E+03,5.0000E+03,6.0000E+03,8.0000E+03,1.0000E+04,1.5000E+04,2.0000E+04,3.0000E+04,4.0000E+04,5.0000E+04,6.0000E+04,8.0000E+04,1.0000E+05};
	final static double[] Coh= {3.7870E-01,3.5460E-01,3.2540E-01,2.6270E-01,2.0640E-01,1.6160E-01,1.2800E-01,8.4260E-02,5.9050E-02,2.9550E-02,1.7560E-02,8.1770E-03,4.6850E-03,3.0260E-03,2.1110E-03,1.1940E-03,7.6580E-04,3.4120E-04,1.9210E-04,8.5430E-05,4.8060E-05,3.0770E-05,2.1360E-05,1.2020E-05,7.6910E-06,7.3630E-06,4.9230E-06,3.4180E-06,1.9230E-06,1.8420E-06,8.5460E-07,4.8070E-07,3.0770E-07,2.1360E-07,1.5690E-07,1.2020E-07,9.4970E-08,7.6910E-08,6.3570E-08,5.3410E-08,4.5510E-08,3.9240E-08,3.4180E-08,3.0050E-08,2.3740E-08,1.9230E-08,1.5890E-08,1.3350E-08,1.1380E-08,9.8110E-09,8.5460E-09,4.8070E-09,3.0770E-09,2.1360E-09,1.2020E-09,7.6880E-10,3.4170E-10,1.9230E-10,8.5430E-11,4.8060E-11,3.0750E-11,2.1360E-11,1.2010E-11,7.6880E-12,3.4170E-12,1.9230E-12,8.5430E-13,4.8060E-13,3.0750E-13,2.1360E-13,1.2010E-13,7.6880E-14,3.4170E-14,1.9230E-14,8.5430E-15,4.8060E-15,3.0750E-15,2.1360E-15,1.2010E-15,7.6880E-16};
	final static double[] Incoh= {1.0170E-02,2.1350E-02,3.4860E-02,6.3640E-02,8.9490E-02,1.1030E-01,1.2620E-01,1.4720E-01,1.5930E-01,1.7230E-01,1.7570E-01,1.7500E-01,1.7140E-01,1.6720E-01,1.6290E-01,1.5500E-01,1.4780E-01,1.3330E-01,1.2220E-01,1.0630E-01,9.5300E-02,8.7040E-02,8.0520E-02,7.0740E-02,6.3610E-02,6.2940E-02,5.6870E-02,5.1700E-02,4.4110E-02,4.3570E-02,3.4710E-02,2.8950E-02,2.5010E-02,2.2100E-02,1.9860E-02,1.8070E-02,1.6610E-02,1.5390E-02,1.4360E-02,1.3470E-02,1.2680E-02,1.2000E-02,1.1390E-02,1.0850E-02,9.9170E-03,9.1450E-03,8.4930E-03,7.9370E-03,7.4540E-03,7.0310E-03,6.6580E-03,5.2900E-03,4.4160E-03,3.8050E-03,3.0000E-03,2.4900E-03,1.7740E-03,1.3910E-03,9.8560E-04,7.7180E-04,6.3900E-04,5.4710E-04,4.2730E-04,3.5150E-04,2.4550E-04,1.9000E-04,1.3210E-04,1.0200E-04,8.3380E-05,7.0700E-05,5.4480E-05,4.4470E-05,3.0740E-05,2.3640E-05,1.6290E-05,1.2510E-05,1.0190E-05,8.6120E-06,6.6030E-06,5.3730E-06};
	final static double[] PE= {6.0440E+01,1.6380E+01,6.5040E+00,1.6810E+00,6.3700E-01,3.0480E-01,1.6540E-01,6.1840E-02,2.9200E-02,7.3350E-03,2.7520E-03,6.8730E-04,2.5650E-04,1.1950E-04,6.4080E-05,2.4010E-05,1.1260E-05,2.8830E-06,1.1180E-06,3.0830E-07,1.3030E-07,6.9740E-08,4.3270E-08,2.1800E-08,1.3580E-08,1.2480E-08,8.5190E-09,6.2290E-09,3.9600E-09,3.8350E-09,2.2450E-09,1.5540E-09,1.1850E-09,9.5700E-10,8.0190E-10,6.8980E-10,6.0510E-10,5.3880E-10,4.8570E-10,4.4190E-10,4.0550E-10,3.7450E-10,3.4790E-10,3.2480E-10,2.8680E-10,2.5680E-10,2.3250E-10,2.1230E-10,1.9530E-10,1.8080E-10,1.6840E-10,1.2530E-10,9.9740E-11,8.2840E-11,6.1880E-11,4.9380E-11,3.2810E-11,2.4570E-11,1.6350E-11,1.2250E-11,9.7980E-12,8.1620E-12,6.1190E-12,4.8940E-12,3.2620E-12,2.4460E-12,1.6290E-12,1.2230E-12,9.7800E-13,8.1500E-13,6.1120E-13,4.8900E-13,3.2590E-13,2.4450E-13,1.6290E-13,1.2220E-13,9.7780E-14,8.1490E-14,6.1120E-14,4.8880E-14};
	final static double[] PrProdN= {0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,4.7050E-06,2.6400E-05,1.0580E-04,1.1410E-04,3.0390E-04,4.9360E-04,6.6280E-04,8.1530E-04,9.5100E-04,1.0740E-03,1.1850E-03,1.2870E-03,1.3790E-03,1.4640E-03,1.5440E-03,1.6170E-03,1.6870E-03,1.7510E-03,1.8720E-03,1.9800E-03,2.0790E-03,2.1700E-03,2.2540E-03,2.3310E-03,2.4030E-03,2.7050E-03,2.9370E-03,3.1230E-03,3.4080E-03,3.6170E-03,3.9610E-03,4.1750E-03,4.4280E-03,4.5750E-03,4.6730E-03,4.7420E-03,4.8370E-03,4.8970E-03,4.9860E-03,5.0340E-03,5.0850E-03,5.1170E-03,5.1350E-03,5.1470E-03,5.1640E-03,5.1740E-03,5.1860E-03,5.1950E-03,5.2030E-03,5.2070E-03,5.2100E-03,5.2120E-03,5.2130E-03,5.2150E-03};
	final static double[] PrProdE= {0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,1.2140E-05,4.9580E-05,9.8770E-05,1.5170E-04,2.0460E-04,2.5590E-04,3.0510E-04,3.5190E-04,3.9650E-04,4.3860E-04,4.7840E-04,5.1640E-04,5.5250E-04,5.8690E-04,6.5120E-04,7.0980E-04,7.6420E-04,8.1440E-04,8.6110E-04,9.0470E-04,9.4560E-04,1.1190E-03,1.2550E-03,1.3670E-03,1.5420E-03,1.6780E-03,1.9120E-03,2.0690E-03,2.2700E-03,2.3950E-03,2.4830E-03,2.5470E-03,2.6370E-03,2.6980E-03,2.7890E-03,2.8410E-03,2.8980E-03,2.9310E-03,2.9500E-03,2.9650E-03,2.9850E-03,2.9970E-03,3.0140E-03,3.0230E-03,3.0320E-03,3.0380E-03,3.0420E-03,3.0440E-03,3.0470E-03,3.0480E-03};
	final static double[] TotAttn= {6.0830E+01,1.6760E+01,6.8640E+00,2.0070E+00,9.3290E-01,5.7670E-01,4.1950E-01,2.9330E-01,2.4760E-01,2.0920E-01,1.9600E-01,1.8380E-01,1.7630E-01,1.7030E-01,1.6510E-01,1.5620E-01,1.4860E-01,1.3360E-01,1.2240E-01,1.0640E-01,9.5350E-02,8.7070E-02,8.0550E-02,7.0760E-02,6.3620E-02,6.2940E-02,5.6880E-02,5.1730E-02,4.4220E-02,4.3690E-02,3.5030E-02,2.9490E-02,2.5770E-02,2.3070E-02,2.1020E-02,1.9400E-02,1.8100E-02,1.7030E-02,1.6130E-02,1.5370E-02,1.4710E-02,1.4130E-02,1.3630E-02,1.3190E-02,1.2440E-02,1.1830E-02,1.1340E-02,1.0920E-02,1.0570E-02,1.0270E-02,1.0010E-02,9.1140E-03,8.6080E-03,8.2960E-03,7.9500E-03,7.7850E-03,7.6480E-03,7.6340E-03,7.6840E-03,7.7420E-03,7.7950E-03,7.8370E-03,7.9020E-03,7.9460E-03,8.0210E-03,8.0650E-03,8.1150E-03,8.1500E-03,8.1690E-03,8.1830E-03,8.2030E-03,8.2160E-03,8.2310E-03,8.2420E-03,8.2510E-03,8.2570E-03,8.2630E-03,8.2640E-03,8.2670E-03,8.2680E-03};

	//******************************************************************************

	/**
	 * @return The array of tabulated photon energies
	 */
	public double[] getMevArray()
	{
		return MeV;
	}

	//******************************************************************************

	public double getMuMass(double theMeV, String muMassType)
	{
		double[] muArr;
		double muMass;
		double muLo = 0;
		double muHi = 0;
		double mevLo = 0;
		double mevHi = 0;

		switch(muMassType)
		{
		case "TotAttn":
			muArr = TotAttn;
			break;
		case "Raleigh":
			muArr = Coh;
			break;
		case "Compton":
			muArr = Incoh;
			break;
		case "PhotoElectric":
			muArr = PE;
			break;
		case "PairProdN":
			muArr = PrProdN;
			break;
		case "PairProdE":
			muArr = PrProdE;
			break;
		default:
			muArr = TotAttn;
			break;
		}

		//Report the muMass at 100GeV for any energy at or above 100GeV
		if(theMeV >= 100000.0)
		{
			muMass = muArr[muArr.length - 1];
		}			
		else
		{
			//Look everywhere except the last point
			for(int i = 0; i< muArr.length - 1;i++)
			{
				if(MeV[i] <= theMeV && MeV[i + 1] > theMeV)
				{
					mevLo = MeV[i];
					mevHi = MeV[i+1];
					muLo = muArr[i];
					muHi = muArr[i + 1];
					break;
				}
			}
			if(muLo ==0) muMass = 0.0;
			else muMass = Interpolation.logTerp(mevLo, mevHi, theMeV, muLo, muHi);
		}
		return muMass;
	}		
}
