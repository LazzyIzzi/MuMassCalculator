package nist.MuMassData;
/**
 * @author John H Dunsmuir
 * @hidden
 */

import jhd.MathTools.Interpolation;


class MassAttenuationSM {

	final static double[] MeV= {1.00000E-03,1.03900E-03,1.08000E-03,1.08001E-03,1.09300E-03,1.10600E-03,1.10601E-03,1.25300E-03,1.42000E-03,
			1.42001E-03,1.50000E-03,1.54100E-03,1.54101E-03,1.62900E-03,1.72300E-03,1.72301E-03,2.00000E-03,3.00000E-03,4.00000E-03,
			5.00000E-03,6.00000E-03,6.71600E-03,6.71610E-03,7.00800E-03,7.31200E-03,7.31210E-03,7.52100E-03,7.73700E-03,7.73710E-03,
			8.00000E-03,1.00000E-02,1.50000E-02,2.00000E-02,3.00000E-02,4.00000E-02,4.68300E-02,4.68310E-02,5.00000E-02,6.00000E-02,
			8.00000E-02,1.00000E-01,1.50000E-01,2.00000E-01,3.00000E-01,4.00000E-01,5.00000E-01,6.00000E-01,8.00000E-01,1.00000E+00,
			1.02200E+00,1.25000E+00,1.50000E+00,2.00000E+00,2.04400E+00,3.00000E+00,4.00000E+00,5.00000E+00,6.00000E+00,7.00000E+00,
			8.00000E+00,9.00000E+00,1.00000E+01,1.10000E+01,1.20000E+01,1.30000E+01,1.40000E+01,1.50000E+01,1.60000E+01,1.80000E+01,
			2.00000E+01,2.20000E+01,2.40000E+01,2.60000E+01,2.80000E+01,3.00000E+01,4.00000E+01,5.00000E+01,6.00000E+01,8.00000E+01,
			1.00000E+02,1.50000E+02,2.00000E+02,3.00000E+02,4.00000E+02,5.00000E+02,6.00000E+02,8.00000E+02,1.00000E+03,1.50000E+03,
			2.00000E+03,3.00000E+03,4.00000E+03,5.00000E+03,6.00000E+03,8.00000E+03,1.00000E+04,1.50000E+04,2.00000E+04,3.00000E+04,
			4.00000E+04,5.00000E+04,6.00000E+04,8.00000E+04,1.00000E+05};
	final static double[] Coh= {9.6680E+00,9.6280E+00,9.5880E+00,9.5880E+00,9.5760E+00,9.5640E+00,9.5640E+00,9.4250E+00,9.2560E+00,9.2560E+00,9.1720E+00,9.1320E+00,9.1320E+00,9.0410E+00,8.9430E+00,8.9430E+00,8.6630E+00,7.6620E+00,6.7370E+00,5.9320E+00,5.2510E+00,4.8300E+00,4.8300E+00,4.6740E+00,4.5180E+00,4.5180E+00,4.4130E+00,4.3100E+00,4.3100E+00,4.1890E+00,3.4100E+00,2.2160E+00,1.5880E+00,9.3040E-01,6.0520E-01,4.7540E-01,4.7540E-01,4.2940E-01,3.2270E-01,2.0110E-01,1.3680E-01,6.6650E-02,3.9610E-02,1.8640E-02,1.0770E-02,7.0050E-03,4.9180E-03,2.8020E-03,1.8060E-03,1.7300E-03,1.1620E-03,8.0900E-04,4.5660E-04,4.3700E-04,2.0330E-04,1.1450E-04,7.3290E-05,5.0910E-05,3.7410E-05,2.8640E-05,2.2630E-05,1.8340E-05,1.5150E-05,1.2730E-05,1.0850E-05,9.3560E-06,8.1500E-06,7.1610E-06,5.6590E-06,4.5860E-06,3.7890E-06,3.1840E-06,2.7130E-06,2.3390E-06,2.0370E-06,1.1460E-06,7.3330E-07,5.0950E-07,2.8650E-07,1.8340E-07,8.1500E-08,4.5860E-08,2.0370E-08,1.1460E-08,7.3330E-09,5.0950E-09,2.8650E-09,1.8340E-09,8.1500E-10,4.5860E-10,2.0370E-10,1.1460E-10,7.3330E-11,5.0950E-11,2.8650E-11,1.8340E-11,8.1500E-12,4.5860E-12,2.0370E-12,1.1460E-12,7.3330E-13,5.0950E-13,2.8650E-13,1.8340E-13};
	final static double[] Incoh= {5.9360E-03,6.2390E-03,6.5560E-03,6.5560E-03,6.6560E-03,6.7570E-03,6.7570E-03,7.8580E-03,9.0760E-03,9.0760E-03,9.6720E-03,9.9770E-03,9.9770E-03,1.0630E-02,1.1320E-02,1.1320E-02,1.3330E-02,2.0450E-02,2.7030E-02,3.3020E-02,3.8370E-02,4.1850E-02,4.1850E-02,4.3180E-02,4.4540E-02,4.4540E-02,4.5460E-02,4.6380E-02,4.6380E-02,4.7460E-02,5.5110E-02,7.0330E-02,8.1300E-02,9.4480E-02,1.0140E-01,1.0420E-01,1.0420E-01,1.0510E-01,1.0710E-01,1.0800E-01,1.0690E-01,1.0120E-01,9.5080E-02,8.4750E-02,7.6820E-02,7.0610E-02,6.5600E-02,5.7910E-02,5.2190E-02,5.1630E-02,4.6740E-02,4.2530E-02,3.6320E-02,3.5880E-02,2.8600E-02,2.3870E-02,2.0620E-02,1.8220E-02,1.6380E-02,1.4910E-02,1.3710E-02,1.2700E-02,1.1850E-02,1.1110E-02,1.0470E-02,9.9010E-03,9.4000E-03,8.9520E-03,8.1830E-03,7.5460E-03,7.0090E-03,6.5480E-03,6.1520E-03,5.8030E-03,5.4950E-03,4.3660E-03,3.6440E-03,3.1400E-03,2.4760E-03,2.0550E-03,1.4630E-03,1.1470E-03,8.1340E-04,6.3680E-04,5.2750E-04,4.5140E-04,3.5260E-04,2.9010E-04,2.0260E-04,1.5680E-04,1.0900E-04,8.4150E-05,6.8810E-05,5.8350E-05,4.4940E-05,3.6700E-05,2.5360E-05,1.9500E-05,1.3450E-05,1.0330E-05,8.4070E-06,7.1090E-06,5.4510E-06,4.4340E-06};
	final static double[] PE= {2.0970E+03,1.9520E+03,1.8180E+03,2.5140E+03,3.7430E+03,5.5510E+03,6.7850E+03,5.9700E+03,5.2550E+03,6.0640E+03,5.3470E+03,5.0380E+03,5.3470E+03,4.7270E+03,4.1810E+03,4.3700E+03,3.1120E+03,1.1860E+03,5.8030E+02,3.2970E+02,2.0620E+02,1.5390E+02,4.2860E+02,3.8450E+02,3.4500E+02,4.7100E+02,4.3940E+02,4.0970E+02,4.7340E+02,4.3580E+02,2.4650E+02,8.4030E+01,3.8580E+01,1.2630E+01,5.6550E+00,3.6290E+00,2.0420E+01,1.7210E+01,1.0640E+01,4.9020E+00,2.6580E+00,8.5910E-01,3.8450E-01,1.2620E-01,5.9040E-02,3.3600E-02,2.1660E-02,1.1290E-02,7.0690E-03,6.7650E-03,4.5620E-03,3.2590E-03,1.9780E-03,1.9080E-03,1.0430E-03,6.8850E-04,5.0750E-04,3.9940E-04,3.2830E-04,2.7810E-04,2.4090E-04,2.1240E-04,1.8970E-04,1.7140E-04,1.5620E-04,1.4350E-04,1.3270E-04,1.2340E-04,1.0810E-04,9.6240E-05,8.6670E-05,7.8820E-05,7.2290E-05,6.6730E-05,6.2000E-05,4.5660E-05,3.6150E-05,2.9910E-05,2.2230E-05,1.7690E-05,1.1700E-05,8.7470E-06,5.8070E-06,4.3500E-06,3.4750E-06,2.8940E-06,2.1680E-06,1.7330E-06,1.1550E-06,8.6590E-07,5.7710E-07,4.3260E-07,3.4610E-07,2.8840E-07,2.1630E-07,1.7300E-07,1.1530E-07,8.6510E-08,5.7670E-08,4.3260E-08,3.4600E-08,2.8830E-08,2.1620E-08,1.7300E-08};
	final static double[] PrProdN= {};
	final static double[] PrProdE= {};
	final static double[] TotAttn= {2.1070E+03,1.9620E+03,1.8280E+03,2.5240E+03,3.7530E+03,5.5610E+03,6.7940E+03,5.9800E+03,5.2640E+03,6.0730E+03,5.3560E+03,5.0480E+03,5.3560E+03,4.7360E+03,4.1900E+03,4.3790E+03,3.1200E+03,1.1940E+03,5.8710E+02,3.3560E+02,2.1150E+02,1.5870E+02,4.3340E+02,3.8920E+02,3.4960E+02,4.7560E+02,4.4380E+02,4.1410E+02,4.7780E+02,4.4000E+02,2.4990E+02,8.6310E+01,4.0250E+01,1.3650E+01,6.3620E+00,4.2090E+00,2.1000E+01,1.7740E+01,1.1070E+01,5.2110E+00,2.9020E+00,1.0270E+00,5.1920E-01,2.2960E-01,1.4660E-01,1.1120E-01,9.2180E-02,7.2010E-02,6.1060E-02,6.0120E-02,5.2710E-02,4.7730E-02,4.2400E-02,4.2110E-02,3.8680E-02,3.7970E-02,3.8330E-02,3.9120E-02,4.0130E-02,4.1240E-02,4.2390E-02,4.3550E-02,4.4700E-02,4.5830E-02,4.6930E-02,4.7990E-02,4.8990E-02,4.9930E-02,5.1720E-02,5.3350E-02,5.4850E-02,5.6260E-02,5.7580E-02,5.8820E-02,5.9940E-02,6.4720E-02,6.8370E-02,7.1260E-02,7.5620E-02,7.8810E-02,8.3870E-02,8.6960E-02,9.0570E-02,9.2650E-02,9.4070E-02,9.5060E-02,9.6370E-02,9.7250E-02,9.8490E-02,9.9190E-02,9.9930E-02,1.0030E-01,1.0060E-01,1.0080E-01,1.0100E-01,1.0110E-01,1.0130E-01,1.0150E-01,1.0160E-01,1.0160E-01,1.0170E-01,1.0170E-01,1.0170E-01,1.0170E-01};

	//******************************************************************************

	/**
	 * @return The array of tabulated photon energies
	 */
	public double[] getMevArray()
	{
		return MeV;
	}

	//******************************************************************************

	public double getMuMass(double theMeV, String muMassType)
	{
		double[] muArr;
		double muMass;
		double muLo = 0;
		double muHi = 0;
		double mevLo = 0;
		double mevHi = 0;

		switch(muMassType)
		{
		case "TotAttn":
			muArr = TotAttn;
			break;
		case "Raleigh":
			muArr = Coh;
			break;
		case "Compton":
			muArr = Incoh;
			break;
		case "PhotoElectric":
			muArr = PE;
			break;
		case "PairProdN":
			muArr = PrProdN;
			break;
		case "PairProdE":
			muArr = PrProdE;
			break;
		default:
			muArr = TotAttn;
			break;
		}

		//Report the muMass at 100GeV for any energy at or above 100GeV
		if(theMeV >= 100000.0)
		{
			muMass = muArr[muArr.length - 1];
		}			
		else
		{
			//Look everywhere except the last point
			for(int i = 0; i< muArr.length - 1;i++)
			{
				if(MeV[i] <= theMeV && MeV[i + 1] > theMeV)
				{
					mevLo = MeV[i];
					mevHi = MeV[i+1];
					muLo = muArr[i];
					muHi = muArr[i + 1];
					break;
				}
			}
			if(muLo ==0) muMass = 0.0;
			else muMass = Interpolation.logTerp(mevLo, mevHi, theMeV, muLo, muHi);
		}
		return muMass;
	}		
}
