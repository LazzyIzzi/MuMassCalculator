package nist.MuMassData;
/**
 * @author John H Dunsmuir
 * @hidden
 */

import jhd.MathTools.Interpolation;


class MassAttenuationBK {

	final static double[] MeV= {1.00000E-03,1.11100E-03,1.23500E-03,1.23501E-03,1.50000E-03,1.55400E-03,1.55401E-03,1.65100E-03,1.75500E-03,
			1.75501E-03,2.00000E-03,3.00000E-03,4.00000E-03,4.13200E-03,4.13210E-03,4.24700E-03,4.36600E-03,4.36610E-03,4.66100E-03,
			4.97700E-03,4.97710E-03,5.00000E-03,6.00000E-03,6.14700E-03,6.14710E-03,6.34800E-03,6.55600E-03,6.55610E-03,8.00000E-03,
			1.00000E-02,1.50000E-02,1.94500E-02,1.94501E-02,2.00000E-02,2.43900E-02,2.43901E-02,2.48300E-02,2.52700E-02,2.52701E-02,
			3.00000E-02,4.00000E-02,5.00000E-02,6.00000E-02,8.00000E-02,1.00000E-01,1.31600E-01,1.31601E-01,1.50000E-01,2.00000E-01,
			3.00000E-01,4.00000E-01,5.00000E-01,6.00000E-01,8.00000E-01,1.00000E+00,1.02200E+00,1.25000E+00,1.50000E+00,2.00000E+00,
			2.04400E+00,3.00000E+00,4.00000E+00,5.00000E+00,6.00000E+00,7.00000E+00,8.00000E+00,9.00000E+00,1.00000E+01,1.10000E+01,
			1.20000E+01,1.30000E+01,1.40000E+01,1.50000E+01,1.60000E+01,1.80000E+01,2.00000E+01,2.20000E+01,2.40000E+01,2.60000E+01,
			2.80000E+01,3.00000E+01,4.00000E+01,5.00000E+01,6.00000E+01,8.00000E+01,1.00000E+02,1.50000E+02,2.00000E+02,3.00000E+02,
			4.00000E+02,5.00000E+02,6.00000E+02,8.00000E+02,1.00000E+03,1.50000E+03,2.00000E+03,3.00000E+03,4.00000E+03,5.00000E+03,
			6.00000E+03,8.00000E+03,1.00000E+04,1.50000E+04,2.00000E+04,3.00000E+04,4.00000E+04,5.00000E+04,6.00000E+04,8.00000E+04,
			1.00000E+05};
	final static double[] Coh= {1.4610E+01,1.4480E+01,1.4330E+01,1.4330E+01,1.4010E+01,1.3930E+01,1.3930E+01,1.3810E+01,1.3680E+01,1.3680E+01,1.3340E+01,1.2000E+01,1.0740E+01,1.0580E+01,1.0580E+01,1.0450E+01,1.0310E+01,1.0310E+01,9.9830E+00,9.6420E+00,9.6420E+00,9.6180E+00,8.6500E+00,8.5190E+00,8.5190E+00,8.3450E+00,8.1730E+00,8.1730E+00,7.1050E+00,5.9470E+00,4.0610E+00,3.0470E+00,3.0470E+00,2.9470E+00,2.3050E+00,2.3050E+00,2.2460E+00,2.1880E+00,2.1880E+00,1.7430E+00,1.1690E+00,8.4820E-01,6.4080E-01,4.0290E-01,2.7960E-01,1.7640E-01,1.7640E-01,1.4080E-01,8.4480E-02,4.0630E-02,2.3990E-02,1.5830E-02,1.1220E-02,6.4790E-03,4.2140E-03,4.0390E-03,2.7320E-03,1.9130E-03,1.0870E-03,1.0410E-03,4.8720E-04,2.7490E-04,1.7640E-04,1.2260E-04,9.0140E-05,6.9050E-05,5.4570E-05,4.4210E-05,3.6540E-05,3.0710E-05,2.6180E-05,2.2570E-05,1.9660E-05,1.7280E-05,1.3650E-05,1.1060E-05,9.1430E-06,7.6830E-06,6.5470E-06,5.6450E-06,4.9160E-06,2.7660E-06,1.7700E-06,1.2290E-06,6.9150E-07,4.4260E-07,1.9670E-07,1.1060E-07,4.9160E-08,2.7660E-08,1.7700E-08,1.2290E-08,6.9150E-09,4.4260E-09,1.9670E-09,1.1060E-09,4.9160E-10,2.7660E-10,1.7700E-10,1.2290E-10,6.9150E-11,4.4260E-11,1.9670E-11,1.1060E-11,4.9160E-12,2.7660E-12,1.7700E-12,1.2290E-12,6.9150E-13,4.4260E-13};
	final static double[] Incoh= {4.2190E-03,4.8570E-03,5.5650E-03,5.5650E-03,7.0390E-03,7.3460E-03,7.3460E-03,7.8970E-03,8.4770E-03,8.4770E-03,9.8540E-03,1.5310E-02,2.0360E-02,2.1000E-02,2.1000E-02,2.1550E-02,2.2100E-02,2.2100E-02,2.3380E-02,2.4860E-02,2.4860E-02,2.4980E-02,2.9150E-02,2.9760E-02,2.9760E-02,3.0560E-02,3.1350E-02,3.1350E-02,3.6610E-02,4.3170E-02,5.6570E-02,6.5250E-02,6.5250E-02,6.6180E-02,7.2460E-02,7.2460E-02,7.2970E-02,7.3460E-02,7.3460E-02,7.8480E-02,8.5970E-02,9.0670E-02,9.3500E-02,9.5810E-02,9.5890E-02,9.4040E-02,9.4040E-02,9.2500E-02,8.7820E-02,7.9070E-02,7.2050E-02,6.6470E-02,6.1890E-02,5.4770E-02,4.9430E-02,4.8920E-02,4.4340E-02,4.0360E-02,3.4510E-02,3.4100E-02,2.7200E-02,2.2710E-02,1.9620E-02,1.7350E-02,1.5590E-02,1.4190E-02,1.3050E-02,1.2090E-02,1.1280E-02,1.0580E-02,9.9640E-03,9.4250E-03,8.9500E-03,8.5240E-03,7.7900E-03,7.1830E-03,6.6740E-03,6.2350E-03,5.8550E-03,5.5230E-03,5.2310E-03,4.1560E-03,3.4680E-03,2.9880E-03,2.3570E-03,1.9570E-03,1.3930E-03,1.0930E-03,7.7440E-04,6.0640E-04,5.0210E-04,4.3000E-04,3.3560E-04,2.7620E-04,1.9290E-04,1.4930E-04,1.0380E-04,8.0120E-05,6.5520E-05,5.5550E-05,4.2800E-05,3.4950E-05,2.4150E-05,1.8570E-05,1.2800E-05,9.8300E-06,8.0040E-06,6.7660E-06,5.1890E-06,4.2220E-06};
	final static double[] PE= {7.8270E+03,6.4970E+03,5.3940E+03,5.7380E+03,3.9390E+03,3.6660E+03,3.7120E+03,3.2760E+03,2.8910E+03,2.9440E+03,2.2360E+03,9.1700E+02,4.7360E+02,4.3900E+02,9.8230E+02,9.3310E+02,8.8650E+02,1.2330E+03,1.0570E+03,9.0600E+02,1.0620E+03,1.0460E+03,6.5980E+02,6.1910E+02,6.5660E+02,6.0600E+02,5.5940E+02,5.8300E+02,3.5710E+02,2.0440E+02,7.3000E+01,3.7390E+01,8.7750E+01,8.0900E+01,4.7580E+01,6.8320E+01,6.5130E+01,6.2080E+01,7.1560E+01,4.6430E+01,2.2220E+01,1.2430E+01,7.6900E+00,3.5830E+00,1.9740E+00,9.4740E-01,3.7880E+00,2.7370E+00,1.3230E+00,4.8020E-01,2.3960E-01,1.4270E-01,9.4890E-02,5.1280E-02,3.2560E-02,3.1200E-02,2.1110E-02,1.5000E-02,9.0570E-03,8.7310E-03,4.7120E-03,3.0710E-03,2.2420E-03,1.7520E-03,1.4310E-03,1.2070E-03,1.0410E-03,9.1450E-04,8.1480E-04,7.3420E-04,6.6790E-04,6.1230E-04,5.6520E-04,5.2480E-04,4.5870E-04,4.0730E-04,3.6630E-04,3.3250E-04,3.0470E-04,2.8080E-04,2.6060E-04,1.9130E-04,1.5110E-04,1.2480E-04,9.2600E-05,7.3590E-05,4.8630E-05,3.6290E-05,2.4090E-05,1.8030E-05,1.4410E-05,1.1990E-05,8.9840E-06,7.1830E-06,4.7850E-06,3.5850E-06,2.3900E-06,1.7920E-06,1.4330E-06,1.1940E-06,8.9580E-07,7.1660E-07,4.7770E-07,3.5830E-07,2.3880E-07,1.7910E-07,1.4330E-07,1.1940E-07,8.9550E-08,7.1640E-08};
	final static double[] PrProdN= {0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,4.8820E-04,2.4590E-03,7.1150E-03,7.5000E-03,1.4470E-02,2.0020E-02,2.4640E-02,2.8540E-02,3.2080E-02,3.5270E-02,3.8220E-02,4.0920E-02,4.3430E-02,4.5800E-02,4.7990E-02,5.0040E-02,5.1970E-02,5.3790E-02,5.7060E-02,5.9980E-02,6.2670E-02,6.5100E-02,6.7350E-02,6.9390E-02,7.1270E-02,7.8950E-02,8.4680E-02,8.9110E-02,9.5640E-02,1.0030E-01,1.0750E-01,1.1180E-01,1.1680E-01,1.1970E-01,1.2160E-01,1.2290E-01,1.2470E-01,1.2580E-01,1.2750E-01,1.2840E-01,1.2940E-01,1.3000E-01,1.3030E-01,1.3050E-01,1.3080E-01,1.3100E-01,1.3130E-01,1.3140E-01,1.3150E-01,1.3170E-01,1.3170E-01,1.3170E-01,1.3180E-01,1.3180E-01};
	final static double[] PrProdE= {};
	final static double[] TotAttn= {7.8410E+03,6.5120E+03,5.4080E+03,5.7520E+03,3.9530E+03,3.6800E+03,3.7260E+03,3.2900E+03,2.9040E+03,2.9580E+03,2.2490E+03,9.2900E+02,4.8440E+02,4.4960E+02,9.9290E+02,9.4360E+02,8.9680E+02,1.2430E+03,1.0670E+03,9.1570E+02,1.0720E+03,1.0560E+03,6.6850E+02,6.2770E+02,6.6520E+02,6.1440E+02,5.6760E+02,5.9120E+02,3.6420E+02,2.1030E+02,7.7120E+01,4.0500E+01,9.0860E+01,8.3910E+01,4.9960E+01,7.0700E+01,6.7450E+01,6.4340E+01,7.3820E+01,4.8250E+01,2.3480E+01,1.3360E+01,8.4240E+00,4.0820E+00,2.3500E+00,1.2180E+00,4.0580E+00,2.9700E+00,1.4960E+00,5.9990E-01,3.3570E-01,2.2500E-01,1.6800E-01,1.1250E-01,8.6210E-02,8.4160E-02,6.8670E-02,5.9740E-02,5.1770E-02,5.1370E-02,4.6880E-02,4.6120E-02,4.6760E-02,4.7880E-02,4.9350E-02,5.0940E-02,5.2600E-02,5.4240E-02,5.5870E-02,5.7480E-02,5.9020E-02,6.0490E-02,6.1920E-02,6.3300E-02,6.5810E-02,6.8120E-02,7.0290E-02,7.2290E-02,7.4150E-02,7.5870E-02,7.7460E-02,8.4110E-02,8.9190E-02,9.3190E-02,9.9160E-02,1.0340E-01,1.1020E-01,1.1420E-01,1.1900E-01,1.2170E-01,1.2360E-01,1.2490E-01,1.2660E-01,1.2770E-01,1.2930E-01,1.3020E-01,1.3110E-01,1.3170E-01,1.3200E-01,1.3230E-01,1.3260E-01,1.3280E-01,1.3300E-01,1.3320E-01,1.3330E-01,1.3340E-01,1.3340E-01,1.3350E-01,1.3350E-01,1.3350E-01};

	//******************************************************************************

	/**
	 * @return The array of tabulated photon energies
	 */
	public double[] getMevArray()
	{
		return MeV;
	}

	//******************************************************************************

	public double getMuMass(double theMeV, String muMassType)
	{
		double[] muArr;
		double muMass;
		double muLo = 0;
		double muHi = 0;
		double mevLo = 0;
		double mevHi = 0;

		switch(muMassType)
		{
		case "TotAttn":
			muArr = TotAttn;
			break;
		case "Raleigh":
			muArr = Coh;
			break;
		case "Compton":
			muArr = Incoh;
			break;
		case "PhotoElectric":
			muArr = PE;
			break;
		case "PairProdN":
			muArr = PrProdN;
			break;
		case "PairProdE":
			muArr = PrProdE;
			break;
		default:
			muArr = TotAttn;
			break;
		}

		//Report the muMass at 100GeV for any energy at or above 100GeV
		if(theMeV >= 100000.0)
		{
			muMass = muArr[muArr.length - 1];
		}			
		else
		{
			//Look everywhere except the last point
			for(int i = 0; i< muArr.length - 1;i++)
			{
				if(MeV[i] <= theMeV && MeV[i + 1] > theMeV)
				{
					mevLo = MeV[i];
					mevHi = MeV[i+1];
					muLo = muArr[i];
					muHi = muArr[i + 1];
					break;
				}
			}
			if(muLo ==0) muMass = 0.0;
			else muMass = Interpolation.logTerp(mevLo, mevHi, theMeV, muLo, muHi);
		}
		return muMass;
	}		
}
