package nist.MuMassData;
/**
 * @author John H Dunsmuir
 * @hidden
 */

import jhd.MathTools.Interpolation;


class MassAttenuationPD {

	final static double[] MeV= {1.00000E-03,1.50000E-03,2.00000E-03,3.00000E-03,3.17300E-03,3.17310E-03,3.25100E-03,3.33000E-03,3.33010E-03,
			3.46500E-03,3.60400E-03,3.60410E-03,4.00000E-03,5.00000E-03,6.00000E-03,8.00000E-03,1.00000E-02,1.50000E-02,2.00000E-02,
			2.43500E-02,2.43501E-02,3.00000E-02,4.00000E-02,5.00000E-02,6.00000E-02,8.00000E-02,1.00000E-01,1.50000E-01,2.00000E-01,
			3.00000E-01,4.00000E-01,5.00000E-01,6.00000E-01,8.00000E-01,1.00000E+00,1.02200E+00,1.25000E+00,1.50000E+00,2.00000E+00,
			2.04400E+00,3.00000E+00,4.00000E+00,5.00000E+00,6.00000E+00,7.00000E+00,8.00000E+00,9.00000E+00,1.00000E+01,1.10000E+01,
			1.20000E+01,1.30000E+01,1.40000E+01,1.50000E+01,1.60000E+01,1.80000E+01,2.00000E+01,2.20000E+01,2.40000E+01,2.60000E+01,
			2.80000E+01,3.00000E+01,4.00000E+01,5.00000E+01,6.00000E+01,8.00000E+01,1.00000E+02,1.50000E+02,2.00000E+02,3.00000E+02,
			4.00000E+02,5.00000E+02,6.00000E+02,8.00000E+02,1.00000E+03,1.50000E+03,2.00000E+03,3.00000E+03,4.00000E+03,5.00000E+03,
			6.00000E+03,8.00000E+03,1.00000E+04,1.50000E+04,2.00000E+04,3.00000E+04,4.00000E+04,5.00000E+04,6.00000E+04,8.00000E+04,
			1.00000E+05};
	final static double[] Coh= {7.6340E+00,7.2720E+00,6.8420E+00,5.9420E+00,5.7890E+00,5.7890E+00,5.7230E+00,5.6560E+00,5.6560E+00,5.5430E+00,5.4280E+00,5.4280E+00,5.1160E+00,4.4230E+00,3.8600E+00,3.0400E+00,2.4800E+00,1.6180E+00,1.1180E+00,8.5220E-01,8.5220E-01,6.2810E-01,4.1040E-01,2.8920E-01,2.1380E-01,1.3050E-01,8.8330E-02,4.2850E-02,2.5220E-02,1.1690E-02,6.7170E-03,4.3510E-03,3.0440E-03,1.7270E-03,1.1100E-03,1.0630E-03,7.1300E-04,4.9580E-04,2.7940E-04,2.6750E-04,1.2430E-04,6.9940E-05,4.4780E-05,3.1110E-05,2.2860E-05,1.7500E-05,1.3820E-05,1.1200E-05,9.2580E-06,7.7750E-06,6.6270E-06,5.7150E-06,4.9780E-06,4.3750E-06,3.4570E-06,2.8000E-06,2.3140E-06,1.9440E-06,1.6570E-06,1.4290E-06,1.2440E-06,7.0000E-07,4.4800E-07,3.1110E-07,1.7500E-07,1.1200E-07,4.9780E-08,2.8000E-08,1.2440E-08,7.0000E-09,4.4800E-09,3.1110E-09,1.7500E-09,1.1200E-09,4.9780E-10,2.8000E-10,1.2440E-10,7.0000E-11,4.4800E-11,3.1110E-11,1.7500E-11,1.1200E-11,4.9780E-12,2.8000E-12,1.2440E-12,7.0000E-13,4.4800E-13,3.1110E-13,1.7500E-13,1.1200E-13};
	final static double[] Incoh= {4.2700E-03,8.4660E-03,1.2980E-02,2.1550E-02,2.2910E-02,2.2910E-02,2.3520E-02,2.4130E-02,2.4130E-02,2.5170E-02,2.6230E-02,2.6230E-02,2.9180E-02,3.6190E-02,4.2740E-02,5.4390E-02,6.3940E-02,8.0810E-02,9.1900E-02,9.8800E-02,9.8800E-02,1.0530E-01,1.1220E-01,1.1570E-01,1.1730E-01,1.1730E-01,1.1530E-01,1.0820E-01,1.0120E-01,8.9690E-02,8.1090E-02,7.4410E-02,6.9040E-02,6.0830E-02,5.4810E-02,5.4230E-02,4.9060E-02,4.4620E-02,3.8110E-02,3.7640E-02,3.0000E-02,2.5030E-02,2.1620E-02,1.9110E-02,1.7170E-02,1.5630E-02,1.4370E-02,1.3320E-02,1.2420E-02,1.1650E-02,1.0970E-02,1.0380E-02,9.8580E-03,9.3820E-03,8.5790E-03,7.9110E-03,7.3450E-03,6.8640E-03,6.4450E-03,6.0830E-03,5.7610E-03,4.5760E-03,3.8200E-03,3.2910E-03,2.5960E-03,2.1540E-03,1.5340E-03,1.2030E-03,8.5280E-04,6.6770E-04,5.5280E-04,4.7320E-04,3.6960E-04,3.0410E-04,2.1240E-04,1.6440E-04,1.1430E-04,8.8220E-05,7.2150E-05,6.1170E-05,4.7120E-05,3.8470E-05,2.6590E-05,2.0440E-05,1.4100E-05,1.0830E-05,8.8160E-06,7.4530E-06,5.7150E-06,4.6480E-06};
	final static double[] PE= {6.5300E+03,2.5710E+03,1.2850E+03,4.6700E+02,4.0490E+02,1.3500E+03,1.2780E+03,1.2100E+03,1.6590E+03,1.5100E+03,1.3740E+03,1.5770E+03,1.2220E+03,6.8700E+02,4.2680E+02,1.9860E+02,1.0850E+02,3.5450E+01,1.5830E+01,9.0770E+00,5.8060E+01,3.3910E+01,1.5610E+01,8.4430E+00,5.0670E+00,2.2320E+00,1.1730E+00,3.6050E-01,1.5640E-01,4.9270E-02,2.2460E-02,1.2590E-02,8.0240E-03,4.1350E-03,2.5790E-03,2.4550E-03,1.6560E-03,1.1880E-03,7.2430E-04,6.9890E-04,3.8600E-04,2.5660E-04,1.9030E-04,1.5040E-04,1.2400E-04,1.0540E-04,9.1500E-05,8.0810E-05,7.2320E-05,6.5420E-05,5.9760E-05,5.4930E-05,5.0830E-05,4.7300E-05,4.1520E-05,3.6990E-05,3.3350E-05,3.0360E-05,2.7860E-05,2.5740E-05,2.3910E-05,1.7660E-05,1.3990E-05,1.1580E-05,8.6180E-06,6.8590E-06,4.5450E-06,3.3970E-06,2.2570E-06,1.6900E-06,1.3510E-06,1.1250E-06,8.4320E-07,6.7400E-07,4.4910E-07,3.3670E-07,2.2440E-07,1.6830E-07,1.3460E-07,1.1220E-07,8.4090E-08,6.7280E-08,4.4860E-08,3.3640E-08,2.2430E-08,1.6820E-08,1.3460E-08,1.1220E-08,8.4090E-09,6.7280E-09};
	final static double[] PrProdN= {0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,1.5350E-04,7.1980E-04,2.5090E-03,2.6850E-03,6.5250E-03,1.0120E-02,1.3250E-02,1.5950E-02,1.8360E-02,2.0540E-02,2.2510E-02,2.4310E-02,2.5970E-02,2.7500E-02,2.8920E-02,3.0220E-02,3.1430E-02,3.2560E-02,3.4620E-02,3.6460E-02,3.8130E-02,3.9660E-02,4.1040E-02,4.2310E-02,4.3480E-02,4.8240E-02,5.1770E-02,5.4520E-02,5.8570E-02,6.1450E-02,6.6040E-02,6.8750E-02,7.1980E-02,7.3790E-02,7.4980E-02,7.5890E-02,7.7020E-02,7.7750E-02,7.8830E-02,7.9450E-02,8.0070E-02,8.0410E-02,8.0640E-02,8.0750E-02,8.0980E-02,8.1090E-02,8.1260E-02,8.1320E-02,8.1430E-02,8.1490E-02,8.1540E-02,8.1540E-02,8.1540E-02,8.1600E-02};
	final static double[] PrProdE= {0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,1.0490E-05,4.2810E-05,8.5220E-05,1.3080E-04,1.7620E-04,2.2010E-04,2.6210E-04,3.0200E-04,3.3980E-04,3.7540E-04,4.0900E-04,4.4090E-04,4.7120E-04,4.9990E-04,5.5310E-04,6.0150E-04,6.4570E-04,6.8640E-04,7.2430E-04,7.5890E-04,7.9170E-04,9.2580E-04,1.0280E-03,1.1090E-03,1.2310E-03,1.3200E-03,1.4670E-03,1.5580E-03,1.6710E-03,1.7380E-03,1.7840E-03,1.8180E-03,1.8640E-03,1.8950E-03,1.9400E-03,1.9650E-03,1.9930E-03,2.0090E-03,2.0200E-03,2.0260E-03,2.0350E-03,2.0420E-03,2.0500E-03,2.0540E-03,2.0590E-03,2.0620E-03,2.0630E-03,2.0640E-03,2.0650E-03,2.0660E-03};
	final static double[] TotAttn= {6.5380E+03,2.5790E+03,1.2920E+03,4.7290E+02,4.1070E+02,1.3550E+03,1.2830E+03,1.2160E+03,1.6640E+03,1.5150E+03,1.3790E+03,1.5820E+03,1.2270E+03,6.9140E+02,4.3070E+02,2.0170E+02,1.1100E+02,3.7150E+01,1.7040E+01,1.0030E+01,5.9010E+01,3.4650E+01,1.6140E+01,8.8480E+00,5.3990E+00,2.4800E+00,1.3770E+00,5.1150E-01,2.8270E-01,1.5060E-01,1.1030E-01,9.1350E-02,8.0110E-02,6.6700E-02,5.8500E-02,5.7750E-02,5.1590E-02,4.7020E-02,4.1620E-02,4.1290E-02,3.7040E-02,3.5520E-02,3.5180E-02,3.5370E-02,3.5860E-02,3.6510E-02,3.7240E-02,3.8020E-02,3.8820E-02,3.9600E-02,4.0370E-02,4.1100E-02,4.1810E-02,4.2490E-02,4.3790E-02,4.5010E-02,4.6160E-02,4.7240E-02,4.8240E-02,4.9180E-02,5.0060E-02,5.3760E-02,5.6630E-02,5.8930E-02,6.2400E-02,6.4940E-02,6.9040E-02,7.1520E-02,7.4510E-02,7.6200E-02,7.7320E-02,7.8180E-02,7.9250E-02,7.9950E-02,8.0980E-02,8.1580E-02,8.2180E-02,8.2510E-02,8.2730E-02,8.2840E-02,8.3060E-02,8.3170E-02,8.3340E-02,8.3390E-02,8.3500E-02,8.3560E-02,8.3620E-02,8.3620E-02,8.3610E-02,8.3670E-02};

	//******************************************************************************

	/**
	 * @return The array of tabulated photon energies
	 */
	public double[] getMevArray()
	{
		return MeV;
	}

	//******************************************************************************

	public double getMuMass(double theMeV, String muMassType)
	{
		double[] muArr;
		double muMass;
		double muLo = 0;
		double muHi = 0;
		double mevLo = 0;
		double mevHi = 0;

		switch(muMassType)
		{
		case "TotAttn":
			muArr = TotAttn;
			break;
		case "Raleigh":
			muArr = Coh;
			break;
		case "Compton":
			muArr = Incoh;
			break;
		case "PhotoElectric":
			muArr = PE;
			break;
		case "PairProdN":
			muArr = PrProdN;
			break;
		case "PairProdE":
			muArr = PrProdE;
			break;
		default:
			muArr = TotAttn;
			break;
		}

		//Report the muMass at 100GeV for any energy at or above 100GeV
		if(theMeV >= 100000.0)
		{
			muMass = muArr[muArr.length - 1];
		}			
		else
		{
			//Look everywhere except the last point
			for(int i = 0; i< muArr.length - 1;i++)
			{
				if(MeV[i] <= theMeV && MeV[i + 1] > theMeV)
				{
					mevLo = MeV[i];
					mevHi = MeV[i+1];
					muLo = muArr[i];
					muHi = muArr[i + 1];
					break;
				}
			}
			if(muLo ==0) muMass = 0.0;
			else muMass = Interpolation.logTerp(mevLo, mevHi, theMeV, muLo, muHi);
		}
		return muMass;
	}		
}
