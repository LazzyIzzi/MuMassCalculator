package nist.MuMassData;
/**
 * @author John H Dunsmuir
 * @hidden
 */

import jhd.MathTools.Interpolation;


class MassAttenuationBA {

	final static double[] MeV= {1.00000E-03,1.03100E-03,1.06200E-03,1.06201E-03,1.09900E-03,1.13700E-03,1.13701E-03,1.21200E-03,1.29300E-03,
			1.29301E-03,1.50000E-03,2.00000E-03,3.00000E-03,4.00000E-03,5.00000E-03,5.24700E-03,5.24710E-03,5.43200E-03,5.62400E-03,
			5.62410E-03,5.80300E-03,5.98900E-03,5.98910E-03,6.00000E-03,8.00000E-03,1.00000E-02,1.50000E-02,2.00000E-02,3.00000E-02,
			3.74400E-02,3.74410E-02,4.00000E-02,5.00000E-02,6.00000E-02,8.00000E-02,1.00000E-01,1.50000E-01,2.00000E-01,3.00000E-01,
			4.00000E-01,5.00000E-01,6.00000E-01,8.00000E-01,1.00000E+00,1.02200E+00,1.25000E+00,1.50000E+00,2.00000E+00,2.04400E+00,
			3.00000E+00,4.00000E+00,5.00000E+00,6.00000E+00,7.00000E+00,8.00000E+00,9.00000E+00,1.00000E+01,1.10000E+01,1.20000E+01,
			1.30000E+01,1.40000E+01,1.50000E+01,1.60000E+01,1.80000E+01,2.00000E+01,2.20000E+01,2.40000E+01,2.60000E+01,2.80000E+01,
			3.00000E+01,4.00000E+01,5.00000E+01,6.00000E+01,8.00000E+01,1.00000E+02,1.50000E+02,2.00000E+02,3.00000E+02,4.00000E+02,
			5.00000E+02,6.00000E+02,8.00000E+02,1.00000E+03,1.50000E+03,2.00000E+03,3.00000E+03,4.00000E+03,5.00000E+03,6.00000E+03,
			8.00000E+03,1.00000E+04,1.50000E+04,2.00000E+04,3.00000E+04,4.00000E+04,5.00000E+04,6.00000E+04,8.00000E+04,1.00000E+05};
	final static double[] Coh= {8.5210E+00,8.4900E+00,8.4590E+00,8.4590E+00,8.4230E+00,8.3850E+00,8.3850E+00,8.3110E+00,8.2310E+00,8.2310E+00,8.0160E+00,7.5120E+00,6.5650E+00,5.7270E+00,5.0340E+00,4.8810E+00,4.8810E+00,4.7740E+00,4.6620E+00,4.6620E+00,4.5520E+00,4.4600E+00,4.4600E+00,4.4550E+00,3.5550E+00,2.8970E+00,1.9050E+00,1.3670E+00,7.8670E-01,5.6570E-01,5.6570E-01,5.1220E-01,3.6420E-01,2.7290E-01,1.6860E-01,1.1430E-01,5.5650E-02,3.2980E-02,1.5430E-02,8.8980E-03,5.7750E-03,4.0510E-03,2.3040E-03,1.4840E-03,1.4210E-03,9.5380E-04,6.6390E-04,3.7430E-04,3.5840E-04,1.6670E-04,9.3800E-05,6.0080E-05,4.1720E-05,3.0650E-05,2.3470E-05,1.8550E-05,1.5020E-05,1.2410E-05,1.0430E-05,8.8890E-06,7.6650E-06,6.6790E-06,5.8670E-06,4.6350E-06,3.7560E-06,3.1040E-06,2.6080E-06,2.2220E-06,1.9160E-06,1.6690E-06,9.3890E-07,6.0080E-07,4.1730E-07,2.3470E-07,1.5020E-07,6.6790E-08,3.7560E-08,1.6690E-08,9.3890E-09,6.0080E-09,4.1730E-09,2.3470E-09,1.5020E-09,6.6790E-10,3.7560E-10,1.6690E-10,9.3890E-11,6.0080E-11,4.1730E-11,2.3470E-11,1.5020E-11,6.6790E-12,3.7560E-12,1.6690E-12,9.3890E-13,6.0080E-13,4.1730E-13,2.3470E-13,1.5020E-13};
	final static double[] Incoh= {6.8630E-03,7.1240E-03,7.3940E-03,7.3940E-03,7.7050E-03,8.0210E-03,8.0210E-03,8.6250E-03,9.2570E-03,9.2570E-03,1.0940E-02,1.4900E-02,2.2510E-02,2.9550E-02,3.5800E-02,3.7210E-02,3.7210E-02,3.8240E-02,3.9270E-02,3.9270E-02,4.0210E-02,4.1160E-02,4.1160E-02,4.1220E-02,5.0340E-02,5.8150E-02,7.3410E-02,8.3760E-02,9.5950E-02,1.0110E-01,1.0110E-01,1.0240E-01,1.0590E-01,1.0760E-01,1.0820E-01,1.0680E-01,1.0080E-01,9.4550E-02,8.4110E-02,7.6170E-02,6.9990E-02,6.4990E-02,5.7320E-02,5.1660E-02,5.1090E-02,4.6260E-02,4.2070E-02,3.5930E-02,3.5490E-02,2.8290E-02,2.3610E-02,2.0390E-02,1.8020E-02,1.6200E-02,1.4750E-02,1.3550E-02,1.2560E-02,1.1720E-02,1.0990E-02,1.0350E-02,9.7920E-03,9.2970E-03,8.8540E-03,8.0910E-03,7.4640E-03,6.9330E-03,6.4770E-03,6.0820E-03,5.7360E-03,5.4330E-03,4.3170E-03,3.6040E-03,3.1050E-03,2.4490E-03,2.0330E-03,1.4480E-03,1.1350E-03,8.0430E-04,6.3020E-04,5.2140E-04,4.4640E-04,3.4870E-04,2.8690E-04,2.0040E-04,1.5510E-04,1.0780E-04,8.3230E-05,6.8060E-05,5.7710E-05,4.4470E-05,3.6300E-05,2.5080E-05,1.9290E-05,1.3300E-05,1.0210E-05,8.3140E-06,7.0300E-06,5.3890E-06,4.3850E-06};
	final static double[] PE= {8.5340E+03,7.9760E+03,7.4590E+03,8.5380E+03,7.9460E+03,7.3980E+03,7.8280E+03,6.8410E+03,5.9810E+03,6.2490E+03,4.4900E+03,2.3110E+03,8.6300E+02,4.1880E+02,2.3630E+02,2.0860E+02,6.0470E+02,5.5660E+02,5.1220E+02,6.9680E+02,6.4490E+02,5.9680E+02,6.8890E+02,6.8540E+02,3.2990E+02,1.8300E+02,6.1480E+01,2.7930E+01,9.0200E+00,4.8330E+00,2.8520E+01,2.3960E+01,1.3320E+01,8.1300E+00,3.6860E+00,1.9740E+00,6.2620E-01,2.7700E-01,8.9550E-02,4.1480E-02,2.3470E-02,1.5060E-02,7.8190E-03,4.8850E-03,4.6750E-03,3.1530E-03,2.2560E-03,1.3710E-03,1.3230E-03,7.2620E-04,4.8020E-04,3.5460E-04,2.7960E-04,2.3010E-04,1.9510E-04,1.6920E-04,1.4920E-04,1.3340E-04,1.2060E-04,1.1000E-04,1.0100E-04,9.3450E-05,8.6920E-05,7.6220E-05,6.7880E-05,6.1130E-05,5.5650E-05,5.1000E-05,4.7100E-05,4.3760E-05,3.2270E-05,2.5550E-05,2.1150E-05,1.5720E-05,1.2510E-05,8.2840E-06,6.1920E-06,4.1120E-06,3.0790E-06,2.4600E-06,2.0490E-06,1.5350E-06,1.2270E-06,8.1780E-07,6.1310E-07,4.0860E-07,3.0640E-07,2.4510E-07,2.0420E-07,1.5310E-07,1.2250E-07,8.1650E-08,6.1260E-08,4.0830E-08,3.0620E-08,2.4500E-08,2.0420E-08,1.5310E-08,1.2250E-08};
	final static double[] PrProdN= {};
	final static double[] PrProdE= {};
	final static double[] TotAttn= {8.5420E+03,7.9850E+03,7.4680E+03,8.5470E+03,7.9550E+03,7.4060E+03,7.8360E+03,6.8490E+03,5.9900E+03,6.2570E+03,4.4990E+03,2.3190E+03,8.6960E+02,4.2450E+02,2.4140E+02,2.1350E+02,6.0960E+02,5.6140E+02,5.1690E+02,7.0150E+02,6.4950E+02,6.0130E+02,6.9340E+02,6.8990E+02,3.3350E+02,1.8600E+02,6.3460E+01,2.9380E+01,9.9030E+00,5.4990E+00,2.9190E+01,2.4570E+01,1.3790E+01,8.5110E+00,3.9630E+00,2.1950E+00,7.8270E-01,4.0450E-01,1.8910E-01,1.2650E-01,9.9230E-02,8.4100E-02,6.7440E-02,5.8030E-02,5.7180E-02,5.0570E-02,4.5920E-02,4.0780E-02,4.0480E-02,3.6920E-02,3.5980E-02,3.6120E-02,3.6690E-02,3.7510E-02,3.8440E-02,3.9420E-02,4.0420E-02,4.1430E-02,4.2420E-02,4.3390E-02,4.4310E-02,4.5180E-02,4.6020E-02,4.7570E-02,4.9020E-02,5.0380E-02,5.1650E-02,5.2820E-02,5.3900E-02,5.4900E-02,5.9200E-02,6.2480E-02,6.5070E-02,6.9000E-02,7.1860E-02,7.6490E-02,7.9290E-02,8.2610E-02,8.4520E-02,8.5810E-02,8.6730E-02,8.7950E-02,8.8750E-02,8.9890E-02,9.0530E-02,9.1210E-02,9.1600E-02,9.1810E-02,9.1990E-02,9.2200E-02,9.2330E-02,9.2550E-02,9.2630E-02,9.2720E-02,9.2810E-02,9.2850E-02,9.2850E-02,9.2890E-02,9.2890E-02};

	//******************************************************************************

	/**
	 * @return The array of tabulated photon energies
	 */
	public double[] getMevArray()
	{
		return MeV;
	}

	//******************************************************************************

	public double getMuMass(double theMeV, String muMassType)
	{
		double[] muArr;
		double muMass;
		double muLo = 0;
		double muHi = 0;
		double mevLo = 0;
		double mevHi = 0;

		switch(muMassType)
		{
		case "TotAttn":
			muArr = TotAttn;
			break;
		case "Raleigh":
			muArr = Coh;
			break;
		case "Compton":
			muArr = Incoh;
			break;
		case "PhotoElectric":
			muArr = PE;
			break;
		case "PairProdN":
			muArr = PrProdN;
			break;
		case "PairProdE":
			muArr = PrProdE;
			break;
		default:
			muArr = TotAttn;
			break;
		}

		//Report the muMass at 100GeV for any energy at or above 100GeV
		if(theMeV >= 100000.0)
		{
			muMass = muArr[muArr.length - 1];
		}			
		else
		{
			//Look everywhere except the last point
			for(int i = 0; i< muArr.length - 1;i++)
			{
				if(MeV[i] <= theMeV && MeV[i + 1] > theMeV)
				{
					mevLo = MeV[i];
					mevHi = MeV[i+1];
					muLo = muArr[i];
					muHi = muArr[i + 1];
					break;
				}
			}
			if(muLo ==0) muMass = 0.0;
			else muMass = Interpolation.logTerp(mevLo, mevHi, theMeV, muLo, muHi);
		}
		return muMass;
	}		
}
