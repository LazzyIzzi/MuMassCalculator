package nist.MuMassData;
/**
 * @author John H Dunsmuir
 * @hidden
 */

import jhd.MathTools.Interpolation;


class MassAttenuationRN {

	final static double[] MeV= {1.00000E-03,1.04700E-03,1.09700E-03,1.09701E-03,1.50000E-03,2.00000E-03,2.89200E-03,2.89201E-03,3.00000E-03,
			3.02100E-03,3.02101E-03,3.27000E-03,3.53800E-03,3.53810E-03,4.00000E-03,4.15900E-03,4.15910E-03,4.31700E-03,4.48200E-03,
			4.48210E-03,5.00000E-03,6.00000E-03,8.00000E-03,1.00000E-02,1.46200E-02,1.46201E-02,1.50000E-02,1.73400E-02,1.73401E-02,
			1.76900E-02,1.80500E-02,1.80501E-02,2.00000E-02,3.00000E-02,4.00000E-02,5.00000E-02,6.00000E-02,8.00000E-02,9.84000E-02,
			9.84010E-02,1.00000E-01,1.50000E-01,2.00000E-01,3.00000E-01,4.00000E-01,5.00000E-01,6.00000E-01,8.00000E-01,1.00000E+00,
			1.02200E+00,1.25000E+00,1.50000E+00,2.00000E+00,2.04400E+00,3.00000E+00,4.00000E+00,5.00000E+00,6.00000E+00,7.00000E+00,
			8.00000E+00,9.00000E+00,1.00000E+01,1.10000E+01,1.20000E+01,1.30000E+01,1.40000E+01,1.50000E+01,1.60000E+01,1.80000E+01,
			2.00000E+01,2.20000E+01,2.40000E+01,2.60000E+01,2.80000E+01,3.00000E+01,4.00000E+01,5.00000E+01,6.00000E+01,8.00000E+01,
			1.00000E+02,1.50000E+02,2.00000E+02,3.00000E+02,4.00000E+02,5.00000E+02,6.00000E+02,8.00000E+02,1.00000E+03,1.50000E+03,
			2.00000E+03,3.00000E+03,4.00000E+03,5.00000E+03,6.00000E+03,8.00000E+03,1.00000E+04,1.50000E+04,2.00000E+04,3.00000E+04,
			4.00000E+04,5.00000E+04,6.00000E+04,8.00000E+04,1.00000E+05};
	final static double[] Coh= {1.2820E+01,1.2780E+01,1.2720E+01,1.2720E+01,1.2280E+01,1.1660E+01,1.0550E+01,1.0550E+01,1.0420E+01,1.0390E+01,1.0390E+01,1.0110E+01,9.8030E+00,9.8030E+00,9.3090E+00,9.1460E+00,9.1460E+00,8.9900E+00,8.8320E+00,8.8320E+00,8.3520E+00,7.5220E+00,6.1650E+00,5.1350E+00,3.5420E+00,3.5420E+00,3.4450E+00,2.9130E+00,2.9130E+00,2.8450E+00,2.7780E+00,2.7780E+00,2.4520E+00,1.4420E+00,9.6750E-01,6.9190E-01,5.1860E-01,3.2580E-01,2.3180E-01,2.3180E-01,2.2560E-01,1.1180E-01,6.6810E-02,3.1950E-02,1.8730E-02,1.2290E-02,8.6740E-03,4.9800E-03,3.2280E-03,3.0920E-03,2.0850E-03,1.4570E-03,8.2490E-04,7.9010E-04,3.6860E-04,2.0790E-04,1.3320E-04,9.2520E-05,6.8000E-05,5.2080E-05,4.1150E-05,3.3340E-05,2.7560E-05,2.3160E-05,1.9730E-05,1.7020E-05,1.4820E-05,1.3030E-05,1.0290E-05,8.3380E-06,6.8920E-06,5.7910E-06,4.9340E-06,4.2560E-06,3.7080E-06,2.0850E-06,1.3340E-06,9.2660E-07,5.2130E-07,3.3360E-07,1.4830E-07,8.3410E-08,3.7080E-08,2.0850E-08,1.3350E-08,9.2660E-09,5.2130E-09,3.3360E-09,1.4830E-09,8.3410E-10,3.7080E-10,2.0850E-10,1.3350E-10,9.2660E-11,5.2130E-11,3.3360E-11,1.4830E-11,8.3410E-12,3.7080E-12,2.0850E-12,1.3350E-12,9.2660E-13,5.2130E-13,3.3360E-13};
	final static double[] Incoh= {3.1900E-03,3.4490E-03,3.7270E-03,3.7270E-03,6.1140E-03,9.1930E-03,1.4600E-02,1.4600E-02,1.5230E-02,1.5350E-02,1.5350E-02,1.6760E-02,1.8240E-02,1.8240E-02,2.0660E-02,2.1460E-02,2.1460E-02,2.2230E-02,2.3010E-02,2.3010E-02,2.5410E-02,2.9700E-02,3.7490E-02,4.4380E-02,5.6880E-02,5.6880E-02,5.7720E-02,6.2410E-02,6.2410E-02,6.3060E-02,6.3720E-02,6.3720E-02,6.7020E-02,7.9610E-02,8.7290E-02,9.1840E-02,9.4420E-02,9.6400E-02,9.6270E-02,9.6270E-02,9.6210E-02,9.2390E-02,8.7450E-02,7.8470E-02,7.1420E-02,6.5800E-02,6.1250E-02,5.4140E-02,4.8850E-02,4.8360E-02,4.3810E-02,3.9870E-02,3.4070E-02,3.3660E-02,2.6850E-02,2.2410E-02,1.9360E-02,1.7120E-02,1.5390E-02,1.4000E-02,1.2870E-02,1.1930E-02,1.1130E-02,1.0430E-02,9.8300E-03,9.3010E-03,8.8290E-03,8.4090E-03,7.6870E-03,7.0880E-03,6.5830E-03,6.1520E-03,5.7780E-03,5.4490E-03,5.1590E-03,4.1010E-03,3.4230E-03,2.9480E-03,2.3260E-03,1.9310E-03,1.3750E-03,1.0780E-03,7.6410E-04,5.9840E-04,4.9530E-04,4.2420E-04,3.3120E-04,2.7260E-04,1.9030E-04,1.4730E-04,1.0240E-04,7.9070E-05,6.4640E-05,5.4820E-05,4.2230E-05,3.4480E-05,2.3830E-05,1.8320E-05,1.2630E-05,9.7000E-06,7.8990E-06,6.6750E-06,5.1180E-06,4.1660E-06};
	final static double[] PE= {5.8130E+03,5.3370E+03,4.9010E+03,5.0040E+03,2.7060E+03,1.4780E+03,6.5290E+02,2.3090E+03,1.5430E+03,1.5140E+03,2.4590E+03,1.9010E+03,1.4690E+03,1.7000E+03,1.2570E+03,1.1390E+03,1.2080E+03,1.1040E+03,1.0080E+03,1.0520E+03,8.0800E+02,5.1650E+02,2.5140E+02,1.4250E+02,5.3380E+01,1.3080E+02,1.2240E+02,8.2590E+01,1.1550E+02,1.1000E+02,1.0480E+02,1.2120E+02,9.3120E+01,3.2550E+01,1.5180E+01,8.3410E+00,5.0940E+00,2.3260E+00,1.3210E+00,5.9350E+00,5.7640E+00,2.0100E+00,9.4690E-01,3.3150E-01,1.6160E-01,9.4690E-02,6.2220E-02,3.3170E-02,2.0950E-02,2.0060E-02,1.3540E-02,9.6370E-03,5.8260E-03,5.6150E-03,3.0410E-03,1.9880E-03,1.4560E-03,1.1400E-03,9.3280E-04,7.8740E-04,6.8030E-04,5.9810E-04,5.3330E-04,4.8090E-04,4.3780E-04,4.0170E-04,3.7080E-04,3.4450E-04,3.0140E-04,2.6780E-04,2.4090E-04,2.1880E-04,2.0050E-04,1.8500E-04,1.7160E-04,1.2620E-04,9.9710E-05,8.2400E-05,6.1170E-05,4.8610E-05,3.2140E-05,2.4000E-05,1.5930E-05,1.1920E-05,9.5260E-06,7.9340E-06,5.9430E-06,4.7520E-06,3.1650E-06,2.3730E-06,1.5810E-06,1.1860E-06,9.4830E-07,7.9010E-07,5.9270E-07,4.7410E-07,3.1600E-07,2.3700E-07,1.5800E-07,1.1850E-07,9.4800E-08,7.8990E-08,5.9240E-08,4.7390E-08};
	final static double[] PrProdN= {};
	final static double[] PrProdE= {};
	final static double[] TotAttn= {5.8260E+03,5.3500E+03,4.9140E+03,5.0170E+03,2.7190E+03,1.4900E+03,6.6340E+02,2.3200E+03,1.5540E+03,1.5240E+03,2.4700E+03,1.9110E+03,1.4790E+03,1.7100E+03,1.2660E+03,1.1480E+03,1.2170E+03,1.1130E+03,1.0170E+03,1.0610E+03,8.1640E+02,5.2400E+02,2.5760E+02,1.4770E+02,5.6980E+01,1.3440E+02,1.2590E+02,8.5570E+01,1.1850E+02,1.1290E+02,1.0770E+02,1.2410E+02,9.5640E+01,3.4070E+01,1.6240E+01,9.1250E+00,5.7070E+00,2.7490E+00,1.6490E+00,6.2630E+00,6.0860E+00,2.2150E+00,1.1010E+00,4.4190E-01,2.5180E-01,1.7280E-01,1.3210E-01,9.2290E-02,7.3030E-02,7.1510E-02,5.9830E-02,5.2900E-02,4.6490E-02,4.6170E-02,4.2640E-02,4.2240E-02,4.2980E-02,4.4180E-02,4.5570E-02,4.7050E-02,4.8550E-02,5.0070E-02,5.1560E-02,5.2990E-02,5.4400E-02,5.5760E-02,5.7040E-02,5.8280E-02,6.0540E-02,6.2600E-02,6.4520E-02,6.6330E-02,6.7970E-02,6.9500E-02,7.0940E-02,7.6890E-02,8.1450E-02,8.5010E-02,9.0350E-02,9.4170E-02,1.0020E-01,1.0390E-01,1.0820E-01,1.1060E-01,1.1230E-01,1.1350E-01,1.1500E-01,1.1600E-01,1.1750E-01,1.1830E-01,1.1910E-01,1.1960E-01,1.1990E-01,1.2010E-01,1.2040E-01,1.2050E-01,1.2080E-01,1.2090E-01,1.2100E-01,1.2110E-01,1.2110E-01,1.2120E-01,1.2120E-01,1.2130E-01};

	//******************************************************************************

	/**
	 * @return The array of tabulated photon energies
	 */
	public double[] getMevArray()
	{
		return MeV;
	}

	//******************************************************************************

	public double getMuMass(double theMeV, String muMassType)
	{
		double[] muArr;
		double muMass;
		double muLo = 0;
		double muHi = 0;
		double mevLo = 0;
		double mevHi = 0;

		switch(muMassType)
		{
		case "TotAttn":
			muArr = TotAttn;
			break;
		case "Raleigh":
			muArr = Coh;
			break;
		case "Compton":
			muArr = Incoh;
			break;
		case "PhotoElectric":
			muArr = PE;
			break;
		case "PairProdN":
			muArr = PrProdN;
			break;
		case "PairProdE":
			muArr = PrProdE;
			break;
		default:
			muArr = TotAttn;
			break;
		}

		//Report the muMass at 100GeV for any energy at or above 100GeV
		if(theMeV >= 100000.0)
		{
			muMass = muArr[muArr.length - 1];
		}			
		else
		{
			//Look everywhere except the last point
			for(int i = 0; i< muArr.length - 1;i++)
			{
				if(MeV[i] <= theMeV && MeV[i + 1] > theMeV)
				{
					mevLo = MeV[i];
					mevHi = MeV[i+1];
					muLo = muArr[i];
					muHi = muArr[i + 1];
					break;
				}
			}
			if(muLo ==0) muMass = 0.0;
			else muMass = Interpolation.logTerp(mevLo, mevHi, theMeV, muLo, muHi);
		}
		return muMass;
	}		
}
