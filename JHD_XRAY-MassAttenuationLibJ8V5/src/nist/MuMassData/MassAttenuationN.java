package nist.MuMassData;
/**
 * @author John H Dunsmuir
 * @hidden
 */

import jhd.MathTools.Interpolation;


class MassAttenuationN {

	final static double[] MeV= {1.0000E-03,1.5000E-03,2.0000E-03,3.0000E-03,4.0000E-03,5.0000E-03,6.0000E-03,8.0000E-03,1.0000E-02,1.5000E-02,2.0000E-02,3.0000E-02,4.0000E-02,5.0000E-02,6.0000E-02,8.0000E-02,1.0000E-01,1.5000E-01,2.0000E-01,3.0000E-01,4.0000E-01,5.0000E-01,6.0000E-01,8.0000E-01,1.0000E+00,1.0220E+00,1.2500E+00,1.5000E+00,2.0000E+00,2.0440E+00,3.0000E+00,4.0000E+00,5.0000E+00,6.0000E+00,7.0000E+00,8.0000E+00,9.0000E+00,1.0000E+01,1.1000E+01,1.2000E+01,1.3000E+01,1.4000E+01,1.5000E+01,1.6000E+01,1.8000E+01,2.0000E+01,2.2000E+01,2.4000E+01,2.6000E+01,2.8000E+01,3.0000E+01,4.0000E+01,5.0000E+01,6.0000E+01,8.0000E+01,1.0000E+02,1.5000E+02,2.0000E+02,3.0000E+02,4.0000E+02,5.0000E+02,6.0000E+02,8.0000E+02,1.0000E+03,1.5000E+03,2.0000E+03,3.0000E+03,4.0000E+03,5.0000E+03,6.0000E+03,8.0000E+03,1.0000E+04,1.5000E+04,2.0000E+04,3.0000E+04,4.0000E+04,5.0000E+04,6.0000E+04,8.0000E+04,1.0000E+05};
	final static double[] Coh= {1.2910E+00,1.1750E+00,1.0460E+00,8.0010E-01,6.1100E-01,4.7720E-01,3.8380E-01,2.6850E-01,2.0300E-01,1.2060E-01,8.0400E-02,4.2300E-02,2.5840E-02,1.7380E-02,1.2470E-02,7.2960E-03,4.7680E-03,2.1700E-03,1.2310E-03,5.5080E-04,3.1050E-04,1.9890E-04,1.3820E-04,7.7780E-05,4.9790E-05,4.7680E-05,3.1880E-05,2.2140E-05,1.2460E-05,1.1920E-05,5.5330E-06,3.1140E-06,1.9930E-06,1.3840E-06,1.0170E-06,7.7860E-07,6.1530E-07,4.9830E-07,4.1180E-07,3.4600E-07,2.9480E-07,2.5420E-07,2.2140E-07,1.9460E-07,1.5380E-07,1.2460E-07,1.0290E-07,8.6510E-08,7.3690E-08,6.3550E-08,5.5380E-08,3.1140E-08,1.9930E-08,1.3840E-08,7.7820E-09,4.9830E-09,2.2140E-09,1.2450E-09,5.5330E-10,3.1130E-10,1.9920E-10,1.3840E-10,7.7820E-11,4.9830E-11,2.2140E-11,1.2450E-11,5.5330E-12,3.1130E-12,1.9920E-12,1.3840E-12,7.7820E-13,4.9830E-13,2.2140E-13,1.2450E-13,5.5330E-14,3.1130E-14,1.9920E-14,1.3840E-14,7.7820E-15,4.9830E-15};
	final static double[] Incoh= {1.1010E-02,2.2350E-02,3.5110E-02,5.9850E-02,8.0230E-02,9.5660E-02,1.0720E-01,1.2290E-01,1.3300E-01,1.4830E-01,1.5670E-01,1.6340E-01,1.6390E-01,1.6190E-01,1.5910E-01,1.5270E-01,1.4630E-01,1.3260E-01,1.2180E-01,1.0620E-01,9.5230E-02,8.6980E-02,8.0490E-02,7.0730E-02,6.3590E-02,6.2940E-02,5.6880E-02,5.1680E-02,4.4110E-02,4.3550E-02,3.4710E-02,2.8950E-02,2.5000E-02,2.2100E-02,1.9860E-02,1.8080E-02,1.6620E-02,1.5400E-02,1.4360E-02,1.3470E-02,1.2690E-02,1.2000E-02,1.1390E-02,1.0850E-02,9.9190E-03,9.1450E-03,8.4960E-03,7.9370E-03,7.4550E-03,7.0340E-03,6.6600E-03,5.2930E-03,4.4160E-03,3.8050E-03,3.0010E-03,2.4910E-03,1.7740E-03,1.3910E-03,9.8590E-04,7.7220E-04,6.3890E-04,5.4730E-04,4.2740E-04,3.5160E-04,2.4550E-04,1.9000E-04,1.3210E-04,1.0200E-04,8.3410E-05,7.0730E-05,5.4470E-05,4.4500E-05,3.0740E-05,2.3630E-05,1.6300E-05,1.2520E-05,1.0190E-05,8.6120E-06,6.6040E-06,5.3740E-06};
	final static double[] PE= {3.3100E+03,1.0810E+03,4.7590E+02,1.4480E+02,6.0970E+01,3.0870E+01,1.7590E+01,7.1670E+00,3.5430E+00,9.6740E-01,3.8080E-01,1.0100E-01,3.9070E-02,1.8660E-02,1.0190E-02,3.9190E-03,1.8690E-03,4.9190E-04,1.9420E-04,5.4600E-05,2.3340E-05,1.2560E-05,7.8210E-06,3.9460E-06,2.4520E-06,2.2760E-06,1.5450E-06,1.1220E-06,7.0640E-07,6.8360E-07,3.9550E-07,2.7190E-07,2.0630E-07,1.6600E-07,1.3870E-07,1.1910E-07,1.0430E-07,9.2740E-08,8.3500E-08,7.5930E-08,6.9610E-08,6.4230E-08,5.9630E-08,5.5680E-08,4.9100E-08,4.3940E-08,3.9730E-08,3.6270E-08,3.3360E-08,3.0880E-08,2.8750E-08,2.1360E-08,1.6990E-08,1.4110E-08,1.0530E-08,8.4010E-09,5.5810E-09,4.1770E-09,2.7800E-09,2.0830E-09,1.6650E-09,1.3870E-09,1.0400E-09,8.3150E-10,5.5420E-10,4.1560E-10,2.7700E-10,2.0770E-10,1.6620E-10,1.3850E-10,1.0380E-10,8.3070E-11,5.5380E-11,4.1540E-11,2.7690E-11,2.0770E-11,1.6610E-11,1.3840E-11,1.0380E-11,8.3070E-12};
	final static double[] PrProdN= {0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,1.6900E-05,9.3600E-05,3.7260E-04,4.0170E-04,1.0660E-03,1.7300E-03,2.3210E-03,2.8530E-03,3.3260E-03,3.7540E-03,4.1420E-03,4.4930E-03,4.8150E-03,5.1080E-03,5.3830E-03,5.6370E-03,5.8770E-03,6.1010E-03,6.5090E-03,6.8750E-03,7.2100E-03,7.5110E-03,7.7910E-03,8.0440E-03,8.2810E-03,9.2570E-03,9.9960E-03,1.0590E-02,1.1470E-02,1.2120E-02,1.3200E-02,1.3880E-02,1.4700E-02,1.5180E-02,1.5500E-02,1.5730E-02,1.6040E-02,1.6250E-02,1.6540E-02,1.6710E-02,1.6890E-02,1.6990E-02,1.7050E-02,1.7090E-02,1.7150E-02,1.7180E-02,1.7230E-02,1.7260E-02,1.7280E-02,1.7300E-02,1.7310E-02,1.7310E-02,1.7320E-02,1.7330E-02};
	final static double[] PrProdE= {0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,1.2140E-05,4.9570E-05,9.8800E-05,1.5170E-04,2.0460E-04,2.5590E-04,3.0510E-04,3.5200E-04,3.9650E-04,4.3850E-04,4.7850E-04,5.1640E-04,5.5250E-04,5.8690E-04,6.5090E-04,7.0940E-04,7.6360E-04,8.1350E-04,8.5990E-04,9.0330E-04,9.4370E-04,1.1140E-03,1.2470E-03,1.3540E-03,1.5220E-03,1.6480E-03,1.8660E-03,2.0100E-03,2.1940E-03,2.3080E-03,2.3880E-03,2.4470E-03,2.5300E-03,2.5860E-03,2.6700E-03,2.7170E-03,2.7700E-03,2.8010E-03,2.8200E-03,2.8330E-03,2.8510E-03,2.8630E-03,2.8780E-03,2.8870E-03,2.8960E-03,2.9010E-03,2.9040E-03,2.9060E-03,2.9090E-03,2.9110E-03};
	final static double[] TotAttn= {3.3110E+03,1.0830E+03,4.7700E+02,1.4560E+02,6.1660E+01,3.1440E+01,1.8080E+01,7.5590E+00,3.8790E+00,1.2360E+00,6.1790E-01,3.0660E-01,2.2880E-01,1.9800E-01,1.8170E-01,1.6390E-01,1.5290E-01,1.3530E-01,1.2330E-01,1.0680E-01,9.5570E-02,8.7190E-02,8.0630E-02,7.0810E-02,6.3640E-02,6.2990E-02,5.6930E-02,5.1800E-02,4.4500E-02,4.3970E-02,3.5790E-02,3.0740E-02,2.7420E-02,2.5110E-02,2.3400E-02,2.2090E-02,2.1060E-02,2.0240E-02,1.9570E-02,1.9010E-02,1.8550E-02,1.8160E-02,1.7820E-02,1.7540E-02,1.7080E-02,1.6730E-02,1.6470E-02,1.6260E-02,1.6110E-02,1.5980E-02,1.5880E-02,1.5660E-02,1.5660E-02,1.5750E-02,1.5990E-02,1.6260E-02,1.6840E-02,1.7280E-02,1.7870E-02,1.8260E-02,1.8530E-02,1.8730E-02,1.9000E-02,1.9180E-02,1.9460E-02,1.9620E-02,1.9790E-02,1.9890E-02,1.9950E-02,1.9990E-02,2.0050E-02,2.0090E-02,2.0140E-02,2.0170E-02,2.0200E-02,2.0210E-02,2.0220E-02,2.0230E-02,2.0240E-02,2.0240E-02};

	//******************************************************************************

	/**
	 * @return The array of tabulated photon energies
	 */
	public double[] getMevArray()
	{
		return MeV;
	}

	//******************************************************************************

	public double getMuMass(double theMeV, String muMassType)
	{
		double[] muArr;
		double muMass;
		double muLo = 0;
		double muHi = 0;
		double mevLo = 0;
		double mevHi = 0;

		switch(muMassType)
		{
		case "TotAttn":
			muArr = TotAttn;
			break;
		case "Raleigh":
			muArr = Coh;
			break;
		case "Compton":
			muArr = Incoh;
			break;
		case "PhotoElectric":
			muArr = PE;
			break;
		case "PairProdN":
			muArr = PrProdN;
			break;
		case "PairProdE":
			muArr = PrProdE;
			break;
		default:
			muArr = TotAttn;
			break;
		}

		//Report the muMass at 100GeV for any energy at or above 100GeV
		if(theMeV >= 100000.0)
		{
			muMass = muArr[muArr.length - 1];
		}			
		else
		{
			//Look everywhere except the last point
			for(int i = 0; i< muArr.length - 1;i++)
			{
				if(MeV[i] <= theMeV && MeV[i + 1] > theMeV)
				{
					mevLo = MeV[i];
					mevHi = MeV[i+1];
					muLo = muArr[i];
					muHi = muArr[i + 1];
					break;
				}
			}
			if(muLo ==0) muMass = 0.0;
			else muMass = Interpolation.logTerp(mevLo, mevHi, theMeV, muLo, muHi);
		}
		return muMass;
	}		
}
