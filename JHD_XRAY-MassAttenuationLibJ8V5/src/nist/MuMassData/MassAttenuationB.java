package nist.MuMassData;
/**
 * @author John H Dunsmuir
 * @hidden
 */

import jhd.MathTools.Interpolation;


class MassAttenuationB {

	final static double[] MeV= {1.0000E-03,1.5000E-03,2.0000E-03,3.0000E-03,4.0000E-03,5.0000E-03,6.0000E-03,8.0000E-03,1.0000E-02,1.5000E-02,2.0000E-02,3.0000E-02,4.0000E-02,5.0000E-02,6.0000E-02,8.0000E-02,1.0000E-01,1.5000E-01,2.0000E-01,3.0000E-01,4.0000E-01,5.0000E-01,6.0000E-01,8.0000E-01,1.0000E+00,1.0220E+00,1.2500E+00,1.5000E+00,2.0000E+00,2.0440E+00,3.0000E+00,4.0000E+00,5.0000E+00,6.0000E+00,7.0000E+00,8.0000E+00,9.0000E+00,1.0000E+01,1.1000E+01,1.2000E+01,1.3000E+01,1.4000E+01,1.5000E+01,1.6000E+01,1.8000E+01,2.0000E+01,2.2000E+01,2.4000E+01,2.6000E+01,2.8000E+01,3.0000E+01,4.0000E+01,5.0000E+01,6.0000E+01,8.0000E+01,1.0000E+02,1.5000E+02,2.0000E+02,3.0000E+02,4.0000E+02,5.0000E+02,6.0000E+02,8.0000E+02,1.0000E+03,1.5000E+03,2.0000E+03,3.0000E+03,4.0000E+03,5.0000E+03,6.0000E+03,8.0000E+03,1.0000E+04,1.5000E+04,2.0000E+04,3.0000E+04,4.0000E+04,5.0000E+04,6.0000E+04,8.0000E+04,1.0000E+05};
	final static double[] Coh= {8.0550E-01,6.9520E-01,5.8710E-01,4.2050E-01,3.1660E-01,2.5200E-01,2.0940E-01,1.5620E-01,1.2280E-01,7.3420E-02,4.7700E-02,2.4380E-02,1.4700E-02,9.7930E-03,6.9740E-03,4.0310E-03,2.6160E-03,1.1800E-03,6.6680E-04,2.9760E-04,1.6760E-04,1.0730E-04,7.4590E-05,4.1960E-05,2.6850E-05,2.5710E-05,1.7190E-05,1.1940E-05,6.7180E-06,6.4280E-06,2.9850E-06,1.6790E-06,1.0750E-06,7.4640E-07,5.4820E-07,4.1970E-07,3.3170E-07,2.6870E-07,2.2200E-07,1.8660E-07,1.5900E-07,1.3710E-07,1.1940E-07,1.0490E-07,8.2890E-08,6.7180E-08,5.5500E-08,4.6640E-08,3.9740E-08,3.4260E-08,2.9850E-08,1.6790E-08,1.0750E-08,7.4640E-09,4.1970E-09,2.6850E-09,1.1940E-09,6.7120E-10,2.9840E-10,1.6780E-10,1.0750E-10,7.4590E-11,4.1960E-11,2.6850E-11,1.1940E-11,6.7120E-12,2.9840E-12,1.6780E-12,1.0750E-12,7.4590E-13,4.1960E-13,2.6850E-13,1.1940E-13,6.7120E-14,2.9840E-14,1.6780E-14,1.0750E-14,7.4590E-15,4.1960E-15,2.6850E-15};
	final static double[] Incoh= {1.6120E-02,3.0840E-02,4.5680E-02,7.0410E-02,8.7340E-02,9.8760E-02,1.0720E-01,1.1950E-01,1.2880E-01,1.4380E-01,1.5120E-01,1.5540E-01,1.5450E-01,1.5190E-01,1.4880E-01,1.4220E-01,1.3600E-01,1.2300E-01,1.1290E-01,9.8320E-02,8.8180E-02,8.0550E-02,7.4530E-02,6.5450E-02,5.8880E-02,5.8270E-02,5.2640E-02,4.7840E-02,4.0830E-02,4.0320E-02,3.2120E-02,2.6790E-02,2.3140E-02,2.0450E-02,1.8380E-02,1.6730E-02,1.5380E-02,1.4250E-02,1.3290E-02,1.2460E-02,1.1740E-02,1.1110E-02,1.0540E-02,1.0040E-02,9.1800E-03,8.4610E-03,7.8600E-03,7.3470E-03,6.8960E-03,6.5060E-03,6.1610E-03,4.8960E-03,4.0870E-03,3.5220E-03,2.7770E-03,2.3050E-03,1.6420E-03,1.2870E-03,9.1240E-04,7.1470E-04,5.9160E-04,5.0640E-04,3.9550E-04,3.2540E-04,2.2720E-04,1.7590E-04,1.2230E-04,9.4420E-05,7.7150E-05,6.5450E-05,5.0420E-05,4.1170E-05,2.8450E-05,2.1870E-05,1.5080E-05,1.1580E-05,9.4310E-06,7.9710E-06,6.1110E-06,4.9730E-06};
	final static double[] PE= {1.2280E+03,3.7590E+02,1.5910E+02,4.6180E+01,1.8860E+01,9.3300E+00,5.2220E+00,2.0710E+00,1.0030E+00,2.6550E-01,1.0250E-01,2.6560E-02,1.0140E-02,4.7940E-03,2.5990E-03,9.8870E-04,4.6970E-04,1.2240E-04,4.7940E-05,1.3390E-05,5.6980E-06,3.0620E-06,1.9030E-06,9.5920E-07,5.9660E-07,5.4550E-07,3.7060E-07,2.6930E-07,1.7020E-07,1.6470E-07,9.5750E-08,6.5950E-08,5.0170E-08,4.0420E-08,3.3810E-08,2.9050E-08,2.5460E-08,2.2650E-08,2.0400E-08,1.8550E-08,1.7010E-08,1.5710E-08,1.4590E-08,1.3620E-08,1.2020E-08,1.0750E-08,9.7260E-09,8.8850E-09,8.1720E-09,7.5650E-09,7.0410E-09,5.2360E-09,4.1670E-09,3.4600E-09,2.5840E-09,2.0610E-09,1.3690E-09,1.0250E-09,6.8180E-10,5.1110E-10,4.0860E-10,3.4040E-10,2.5520E-10,2.0410E-10,1.3600E-10,1.0200E-10,6.8010E-11,5.0990E-11,4.0790E-11,3.3990E-11,2.5490E-11,2.0390E-11,1.3590E-11,1.0190E-11,6.7960E-12,5.0970E-12,4.0780E-12,3.3980E-12,2.5480E-12,2.0390E-12};
	final static double[] PrProdN= {0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,1.1030E-05,6.1500E-05,2.4550E-04,2.6470E-04,7.0350E-04,1.1430E-03,1.5340E-03,1.8870E-03,2.2000E-03,2.4840E-03,2.7410E-03,2.9750E-03,3.1880E-03,3.3830E-03,3.5660E-03,3.7350E-03,3.8940E-03,4.0440E-03,4.3180E-03,4.5640E-03,4.7870E-03,4.9910E-03,5.1780E-03,5.3500E-03,5.5100E-03,6.1660E-03,6.6620E-03,7.0580E-03,7.6480E-03,8.0830E-03,8.8120E-03,9.2750E-03,9.8370E-03,1.0180E-02,1.0410E-02,1.0570E-02,1.0800E-02,1.0950E-02,1.1170E-02,1.1290E-02,1.1420E-02,1.1490E-02,1.1540E-02,1.1570E-02,1.1610E-02,1.1640E-02,1.1680E-02,1.1700E-02,1.1720E-02,1.1730E-02,1.1740E-02,1.1740E-02,1.1750E-02,1.1750E-02};
	final static double[] PrProdE= {0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,1.1240E-05,4.5880E-05,9.1410E-05,1.4040E-04,1.8930E-04,2.3690E-04,2.8240E-04,3.2580E-04,3.6700E-04,4.0600E-04,4.4280E-04,4.7800E-04,5.1140E-04,5.4320E-04,6.0270E-04,6.5670E-04,7.0690E-04,7.5370E-04,7.9660E-04,8.3670E-04,8.7450E-04,1.0330E-03,1.1580E-03,1.2580E-03,1.4150E-03,1.5340E-03,1.7400E-03,1.8780E-03,2.0550E-03,2.1690E-03,2.2480E-03,2.3070E-03,2.3920E-03,2.4490E-03,2.5360E-03,2.5870E-03,2.6430E-03,2.6750E-03,2.6960E-03,2.7100E-03,2.7290E-03,2.7420E-03,2.7580E-03,2.7680E-03,2.7780E-03,2.7840E-03,2.7870E-03,2.7900E-03,2.7920E-03,2.7940E-03};
	final static double[] TotAttn= {1.2290E+03,3.7670E+02,1.5970E+02,4.6670E+01,1.9270E+01,9.6810E+00,5.5390E+00,2.3460E+00,1.2550E+00,4.8270E-01,3.0140E-01,2.0640E-01,1.7940E-01,1.6650E-01,1.5840E-01,1.4720E-01,1.3910E-01,1.2440E-01,1.1360E-01,9.8630E-02,8.8350E-02,8.0660E-02,7.4610E-02,6.5490E-02,5.8910E-02,5.8290E-02,5.2670E-02,4.7920E-02,4.1080E-02,4.0600E-02,3.2840E-02,2.7980E-02,2.4770E-02,2.2480E-02,2.0770E-02,1.9450E-02,1.8400E-02,1.7550E-02,1.6850E-02,1.6250E-02,1.5750E-02,1.5320E-02,1.4950E-02,1.4630E-02,1.4100E-02,1.3680E-02,1.3350E-02,1.3090E-02,1.2870E-02,1.2690E-02,1.2550E-02,1.2100E-02,1.1910E-02,1.1840E-02,1.1840E-02,1.1920E-02,1.2190E-02,1.2440E-02,1.2810E-02,1.3060E-02,1.3240E-02,1.3390E-02,1.3590E-02,1.3720E-02,1.3930E-02,1.4050E-02,1.4180E-02,1.4260E-02,1.4310E-02,1.4350E-02,1.4390E-02,1.4420E-02,1.4460E-02,1.4490E-02,1.4510E-02,1.4530E-02,1.4530E-02,1.4540E-02,1.4550E-02,1.4550E-02};

	//******************************************************************************

	/**
	 * @return The array of tabulated photon energies
	 */
	public double[] getMevArray()
	{
		return MeV;
	}

	//******************************************************************************

	public double getMuMass(double theMeV, String muMassType)
	{
		double[] muArr;
		double muMass;
		double muLo = 0;
		double muHi = 0;
		double mevLo = 0;
		double mevHi = 0;

		switch(muMassType)
		{
		case "TotAttn":
			muArr = TotAttn;
			break;
		case "Raleigh":
			muArr = Coh;
			break;
		case "Compton":
			muArr = Incoh;
			break;
		case "PhotoElectric":
			muArr = PE;
			break;
		case "PairProdN":
			muArr = PrProdN;
			break;
		case "PairProdE":
			muArr = PrProdE;
			break;
		default:
			muArr = TotAttn;
			break;
		}

		//Report the muMass at 100GeV for any energy at or above 100GeV
		if(theMeV >= 100000.0)
		{
			muMass = muArr[muArr.length - 1];
		}			
		else
		{
			//Look everywhere except the last point
			for(int i = 0; i< muArr.length - 1;i++)
			{
				if(MeV[i] <= theMeV && MeV[i + 1] > theMeV)
				{
					mevLo = MeV[i];
					mevHi = MeV[i+1];
					muLo = muArr[i];
					muHi = muArr[i + 1];
					break;
				}
			}
			if(muLo ==0) muMass = 0.0;
			else muMass = Interpolation.logTerp(mevLo, mevHi, theMeV, muLo, muHi);
		}
		return muMass;
	}		
}
