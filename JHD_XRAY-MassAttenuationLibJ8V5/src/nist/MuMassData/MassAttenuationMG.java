package nist.MuMassData;
/**
 * @author John H Dunsmuir
 * @hidden
 */

import jhd.MathTools.Interpolation;


class MassAttenuationMG {

	final static double[] MeV= {1.00000E-03,1.14200E-03,1.30500E-03,1.30501E-03,1.50000E-03,2.00000E-03,3.00000E-03,4.00000E-03,5.00000E-03,
			6.00000E-03,8.00000E-03,1.00000E-02,1.50000E-02,2.00000E-02,3.00000E-02,4.00000E-02,5.00000E-02,6.00000E-02,8.00000E-02,
			1.00000E-01,1.50000E-01,2.00000E-01,3.00000E-01,4.00000E-01,5.00000E-01,6.00000E-01,8.00000E-01,1.00000E+00,1.02200E+00,
			1.25000E+00,1.50000E+00,2.00000E+00,2.04400E+00,3.00000E+00,4.00000E+00,5.00000E+00,6.00000E+00,7.00000E+00,8.00000E+00,
			9.00000E+00,1.00000E+01,1.10000E+01,1.20000E+01,1.30000E+01,1.40000E+01,1.50000E+01,1.60000E+01,1.80000E+01,2.00000E+01,
			2.20000E+01,2.40000E+01,2.60000E+01,2.80000E+01,3.00000E+01,4.00000E+01,5.00000E+01,6.00000E+01,8.00000E+01,1.00000E+02,
			1.50000E+02,2.00000E+02,3.00000E+02,4.00000E+02,5.00000E+02,6.00000E+02,8.00000E+02,1.00000E+03,1.50000E+03,2.00000E+03,
			3.00000E+03,4.00000E+03,5.00000E+03,6.00000E+03,8.00000E+03,1.00000E+04,1.50000E+04,2.00000E+04,3.00000E+04,4.00000E+04,
			5.00000E+04,6.00000E+04,8.00000E+04,1.00000E+05,2.00000E+04,3.00000E+04,4.00000E+04,5.00000E+04,6.00000E+04,8.00000E+04,
			1.00000E+05};
	final static double[] Coh= {2.1460E+00,2.0910E+00,2.0300E+00,2.0300E+00,1.9560E+00,1.7810E+00,1.4990E+00,1.2790E+00,1.0910E+00,9.2960E-01,6.8040E-01,5.1170E-01,2.8840E-01,1.8800E-01,1.0050E-01,6.2610E-02,4.2540E-02,3.0720E-02,1.8150E-02,1.1970E-02,5.5230E-03,3.1570E-03,1.4210E-03,8.0300E-04,5.1510E-04,3.5800E-04,2.0170E-04,1.2910E-04,1.2370E-04,8.2680E-05,5.7430E-05,3.2310E-05,3.0950E-05,1.4360E-05,8.0800E-06,5.1710E-06,3.5900E-06,2.6390E-06,2.0200E-06,1.5960E-06,1.2930E-06,1.0680E-06,8.9770E-07,7.6490E-07,6.5960E-07,5.7460E-07,5.0500E-07,3.9890E-07,3.2330E-07,2.6710E-07,2.2450E-07,1.9130E-07,1.6490E-07,1.4360E-07,8.0800E-08,5.1710E-08,3.5900E-08,2.0200E-08,1.2930E-08,5.7460E-09,3.2310E-09,1.4360E-09,8.0800E-10,5.1710E-10,3.5900E-10,2.0200E-10,1.2930E-10,5.7460E-11,3.2310E-11,1.4360E-11,8.0800E-12,5.1710E-12,3.5900E-12,2.0200E-12,1.2930E-12,5.7460E-13,3.2310E-13,1.4360E-13,8.0800E-14,5.1710E-14,3.5900E-14,2.0200E-14,1.2930E-14};
	final static double[] Incoh= {1.5430E-02,1.8400E-02,2.1720E-02,2.1720E-02,2.5350E-02,3.3100E-02,4.5620E-02,5.7260E-02,6.8440E-02,7.8870E-02,9.6810E-02,1.1070E-01,1.3180E-01,1.4220E-01,1.5150E-01,1.5440E-01,1.5430E-01,1.5280E-01,1.4800E-01,1.4260E-01,1.3010E-01,1.1980E-01,1.0460E-01,9.3930E-02,8.5850E-02,7.9460E-02,6.9850E-02,6.2810E-02,6.2140E-02,5.6170E-02,5.1070E-02,4.3580E-02,4.3040E-02,3.4290E-02,2.8590E-02,2.4700E-02,2.1830E-02,1.9620E-02,1.7860E-02,1.6420E-02,1.5210E-02,1.4190E-02,1.3310E-02,1.2530E-02,1.1860E-02,1.1260E-02,1.0720E-02,9.7990E-03,9.0360E-03,8.3920E-03,7.8420E-03,7.3640E-03,6.9480E-03,6.5780E-03,5.2280E-03,4.3630E-03,3.7590E-03,2.9660E-03,2.4610E-03,1.7530E-03,1.3740E-03,9.7400E-04,7.6260E-04,6.3130E-04,5.4060E-04,4.2220E-04,3.4740E-04,2.4260E-04,1.8770E-04,1.3060E-04,1.0080E-04,8.2380E-05,6.9870E-05,5.3820E-05,4.3960E-05,3.0380E-05,2.3350E-05,1.6100E-05,1.2360E-05,1.0070E-05,8.5110E-06,6.5260E-06,5.3100E-06};
	final static double[] PE= {9.2020E+02,6.4420E+02,4.5090E+02,5.4410E+03,4.0020E+03,1.9300E+03,6.5680E+02,2.9610E+02,1.5710E+02,9.2790E+01,3.9820E+01,2.0430E+01,5.9370E+00,2.4330E+00,6.7840E-01,2.7110E-01,1.3240E-01,7.3460E-02,2.8940E-02,1.4030E-02,3.7860E-03,1.5140E-03,4.3290E-04,1.8670E-04,1.0110E-04,6.3160E-05,3.1910E-05,1.9850E-05,1.8680E-05,1.2660E-05,9.1780E-06,5.7380E-06,5.5480E-06,3.1810E-06,2.1720E-06,1.6410E-06,1.3160E-06,1.0980E-06,9.4050E-07,8.2260E-07,7.3070E-07,6.5710E-07,5.9690E-07,5.4680E-07,5.0450E-07,4.6800E-07,4.3660E-07,3.8480E-07,3.4420E-07,3.1100E-07,2.8370E-07,2.6090E-07,2.4150E-07,2.2470E-07,1.6680E-07,1.3260E-07,1.1010E-07,8.2110E-08,6.5490E-08,4.3480E-08,3.2530E-08,2.1650E-08,1.6220E-08,1.2970E-08,1.0800E-08,8.0950E-09,6.4740E-09,4.3140E-09,3.2360E-09,2.1560E-09,1.6170E-09,1.2940E-09,1.0780E-09,8.0850E-10,6.4670E-10,4.3110E-10,3.2330E-10,2.1550E-10,1.6160E-10,1.2930E-10,1.0780E-10,8.0820E-11,6.4670E-11};
	final static double[] PrProdN= {0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,2.9360E-05,1.6070E-04,6.3650E-04,6.8610E-04,1.8120E-03,2.9340E-03,3.9300E-03,4.8240E-03,5.6200E-03,6.3360E-03,6.9850E-03,7.5740E-03,8.1100E-03,8.6000E-03,9.0560E-03,9.4800E-03,9.8760E-03,1.0250E-02,1.0930E-02,1.1540E-02,1.2090E-02,1.2590E-02,1.3050E-02,1.3480E-02,1.3870E-02,1.5490E-02,1.6700E-02,1.7660E-02,1.9110E-02,2.0140E-02,2.1810E-02,2.2820E-02,2.4020E-02,2.4720E-02,2.5170E-02,2.5520E-02,2.5970E-02,2.6240E-02,2.6690E-02,2.6910E-02,2.7160E-02,2.7300E-02,2.7380E-02,2.7430E-02,2.7530E-02,2.7580E-02,2.7630E-02,2.7680E-02,2.7700E-02,2.7730E-02,2.7750E-02,2.7750E-02,2.7750E-02,2.7780E-02};
	final static double[] PrProdE= {0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,1.2000E-05,4.8980E-05,9.7600E-05,1.4990E-04,2.0210E-04,2.5270E-04,3.0130E-04,3.4760E-04,3.9150E-04,4.3310E-04,4.7230E-04,5.0970E-04,5.4510E-04,5.7900E-04,6.4200E-04,6.9950E-04,7.5250E-04,8.0130E-04,8.4660E-04,8.8900E-04,9.2840E-04,1.0940E-03,1.2230E-03,1.3260E-03,1.4850E-03,1.6040E-03,1.8050E-03,1.9340E-03,2.0960E-03,2.1970E-03,2.2670E-03,2.3180E-03,2.3920E-03,2.4410E-03,2.5150E-03,2.5600E-03,2.6070E-03,2.6360E-03,2.6540E-03,2.6660E-03,2.6830E-03,2.6930E-03,2.7080E-03,2.7160E-03,2.7230E-03,2.7300E-03,2.7330E-03,2.7350E-03,2.7380E-03,2.7380E-03};
	final static double[] TotAttn= {9.2240E+02,6.4630E+02,4.5300E+02,5.4430E+03,4.0040E+03,1.9320E+03,6.5840E+02,2.9740E+02,1.5830E+02,9.3800E+01,4.0590E+01,2.1060E+01,6.3570E+00,2.7630E+00,9.3040E-01,4.8800E-01,3.2920E-01,2.5700E-01,1.9510E-01,1.6860E-01,1.3940E-01,1.2450E-01,1.0650E-01,9.4920E-02,8.6470E-02,7.9880E-02,7.0080E-02,6.2960E-02,6.2280E-02,5.6290E-02,5.1290E-02,4.4260E-02,4.3760E-02,3.6130E-02,3.1590E-02,2.8730E-02,2.6810E-02,2.5450E-02,2.4450E-02,2.3710E-02,2.3130E-02,2.2690E-02,2.2340E-02,2.2060E-02,2.1850E-02,2.1680E-02,2.1550E-02,2.1370E-02,2.1280E-02,2.1240E-02,2.1240E-02,2.1260E-02,2.1320E-02,2.1380E-02,2.1810E-02,2.2290E-02,2.2750E-02,2.3560E-02,2.4210E-02,2.5370E-02,2.6130E-02,2.7090E-02,2.7670E-02,2.8070E-02,2.8380E-02,2.8780E-02,2.9030E-02,2.9440E-02,2.9660E-02,2.9890E-02,3.0040E-02,3.0120E-02,3.0160E-02,3.0260E-02,3.0310E-02,3.0370E-02,3.0420E-02,3.0440E-02,3.0470E-02,3.0490E-02,3.0490E-02,3.0500E-02,3.0520E-02};

	//******************************************************************************

	/**
	 * @return The array of tabulated photon energies
	 */
	public double[] getMevArray()
	{
		return MeV;
	}

	//******************************************************************************

	public double getMuMass(double theMeV, String muMassType)
	{
		double[] muArr;
		double muMass;
		double muLo = 0;
		double muHi = 0;
		double mevLo = 0;
		double mevHi = 0;

		switch(muMassType)
		{
		case "TotAttn":
			muArr = TotAttn;
			break;
		case "Raleigh":
			muArr = Coh;
			break;
		case "Compton":
			muArr = Incoh;
			break;
		case "PhotoElectric":
			muArr = PE;
			break;
		case "PairProdN":
			muArr = PrProdN;
			break;
		case "PairProdE":
			muArr = PrProdE;
			break;
		default:
			muArr = TotAttn;
			break;
		}

		//Report the muMass at 100GeV for any energy at or above 100GeV
		if(theMeV >= 100000.0)
		{
			muMass = muArr[muArr.length - 1];
		}			
		else
		{
			//Look everywhere except the last point
			for(int i = 0; i< muArr.length - 1;i++)
			{
				if(MeV[i] <= theMeV && MeV[i + 1] > theMeV)
				{
					mevLo = MeV[i];
					mevHi = MeV[i+1];
					muLo = muArr[i];
					muHi = muArr[i + 1];
					break;
				}
			}
			if(muLo ==0) muMass = 0.0;
			else muMass = Interpolation.logTerp(mevLo, mevHi, theMeV, muLo, muHi);
		}
		return muMass;
	}		
}
