package nist.MuMassData;
/**
 * @author John H Dunsmuir
 * @hidden
 */

import jhd.MathTools.Interpolation;


class MassAttenuationCU {

	final static double[] MeV= {1.00000E-03,1.04700E-03,1.09600E-03,1.09601E-03,1.50000E-03,2.00000E-03,3.00000E-03,4.00000E-03,5.00000E-03,
			6.00000E-03,8.00000E-03,8.97900E-03,8.97910E-03,1.00000E-02,1.50000E-02,2.00000E-02,3.00000E-02,4.00000E-02,5.00000E-02,
			6.00000E-02,8.00000E-02,1.00000E-01,1.50000E-01,2.00000E-01,3.00000E-01,4.00000E-01,5.00000E-01,6.00000E-01,8.00000E-01,
			1.00000E+00,1.02200E+00,1.25000E+00,1.50000E+00,2.00000E+00,2.04400E+00,3.00000E+00,4.00000E+00,5.00000E+00,6.00000E+00,
			7.00000E+00,8.00000E+00,9.00000E+00,1.00000E+01,1.10000E+01,1.20000E+01,1.30000E+01,1.40000E+01,1.50000E+01,1.60000E+01,
			1.80000E+01,2.00000E+01,2.20000E+01,2.40000E+01,2.60000E+01,2.80000E+01,3.00000E+01,4.00000E+01,5.00000E+01,6.00000E+01,
			8.00000E+01,1.00000E+02,1.50000E+02,2.00000E+02,3.00000E+02,4.00000E+02,5.00000E+02,6.00000E+02,8.00000E+02,1.00000E+03,
			1.50000E+03,2.00000E+03,3.00000E+03,4.00000E+03,5.00000E+03,6.00000E+03,8.00000E+03,1.00000E+04,1.50000E+04,2.00000E+04,
			3.00000E+04,4.00000E+04,5.00000E+04,6.00000E+04,8.00000E+04,1.00000E+05};
	final static double[] Coh= {5.0540E+00,5.0320E+00,5.0080E+00,5.0080E+00,4.8060E+00,4.5250E+00,3.9460E+00,3.3990E+00,2.9140E+00,2.5000E+00,1.8720E+00,1.6460E+00,1.6460E+00,1.4500E+00,8.7970E-01,6.0590E-01,3.3690E-01,2.1240E-01,1.4670E-01,1.0790E-01,6.5950E-02,4.4460E-02,2.1110E-02,1.2260E-02,5.6210E-03,3.2070E-03,2.0680E-03,1.4420E-03,8.1520E-04,5.2280E-04,5.0070E-04,3.3510E-04,2.3290E-04,1.3120E-04,1.2560E-04,5.8300E-05,3.2800E-05,2.1000E-05,1.4580E-05,1.0710E-05,8.2020E-06,6.4810E-06,5.2490E-06,4.3380E-06,3.6460E-06,3.1060E-06,2.6780E-06,2.3330E-06,2.0510E-06,1.6210E-06,1.3130E-06,1.0850E-06,9.1140E-07,7.7660E-07,6.6960E-07,5.8330E-07,3.2810E-07,2.1000E-07,1.4580E-07,8.2020E-08,5.2490E-08,2.3330E-08,1.3130E-08,5.8330E-09,3.2810E-09,2.1000E-09,1.4580E-09,8.2020E-10,5.2490E-10,2.3330E-10,1.3130E-10,5.8330E-11,3.2810E-11,2.1000E-11,1.4580E-11,8.2020E-12,5.2490E-12,2.3330E-12,1.3130E-12,5.8330E-13,3.2810E-13,2.1000E-13,1.4580E-13,8.2020E-14,5.2490E-14};
	final static double[] Incoh= {5.9140E-03,6.3620E-03,6.8380E-03,6.8380E-03,1.0860E-02,1.5910E-02,2.5870E-02,3.5270E-02,4.3910E-02,5.1810E-02,6.5690E-02,7.1620E-02,7.1620E-02,7.7250E-02,9.7610E-02,1.0980E-01,1.2310E-01,1.2890E-01,1.3110E-01,1.3130E-01,1.2950E-01,1.2620E-01,1.1710E-01,1.0880E-01,9.5810E-02,8.6260E-02,7.8990E-02,7.3190E-02,6.4410E-02,5.7970E-02,5.7350E-02,5.1870E-02,4.7160E-02,4.0260E-02,3.9760E-02,3.1680E-02,2.6430E-02,2.2830E-02,2.0180E-02,1.8140E-02,1.6510E-02,1.5170E-02,1.4050E-02,1.3120E-02,1.2300E-02,1.1580E-02,1.0960E-02,1.0410E-02,9.9130E-03,9.0570E-03,8.3520E-03,7.7570E-03,7.2490E-03,6.8070E-03,6.4210E-03,6.0800E-03,4.8310E-03,4.0330E-03,3.4750E-03,2.7410E-03,2.2740E-03,1.6200E-03,1.2700E-03,9.0020E-04,7.0500E-04,5.8360E-04,4.9970E-04,3.9030E-04,3.2110E-04,2.2420E-04,1.7350E-04,1.2060E-04,9.3140E-05,7.6160E-05,6.4580E-05,4.9750E-05,4.0620E-05,2.8070E-05,2.1580E-05,1.4890E-05,1.1430E-05,9.3050E-06,7.8660E-06,6.0310E-06,4.9070E-06};
	final static double[] PE= {1.0570E+04,9.3280E+03,8.2400E+03,9.3400E+03,4.4130E+03,2.1490E+03,7.4490E+02,3.4390E+02,1.8700E+02,1.1310E+02,5.0620E+01,3.6570E+01,2.7660E+02,2.1450E+02,7.3080E+01,3.3080E+01,1.0450E+01,4.5200E+00,2.3350E+00,1.3530E+00,5.6760E-01,2.8780E-01,8.3450E-02,3.4870E-02,1.0510E-02,4.6640E-03,2.5680E-03,1.6210E-03,8.2650E-04,5.1430E-04,4.8850E-04,3.3030E-04,2.3800E-04,1.4640E-04,1.4140E-04,7.9220E-05,5.3240E-05,3.9780E-05,3.1650E-05,2.6220E-05,2.2370E-05,1.9470E-05,1.7250E-05,1.5470E-05,1.4020E-05,1.2810E-05,1.1800E-05,1.0940E-05,1.0190E-05,8.9570E-06,7.9920E-06,7.2140E-06,6.5730E-06,6.0380E-06,5.5820E-06,5.1900E-06,3.8410E-06,3.0480E-06,2.5270E-06,1.8820E-06,1.4990E-06,9.9410E-07,7.4360E-07,4.9440E-07,3.7030E-07,2.9600E-07,2.4650E-07,1.8480E-07,1.4770E-07,9.8460E-08,7.3810E-08,4.9190E-08,3.6890E-08,2.9510E-08,2.4590E-08,1.8440E-08,1.4760E-08,9.8370E-09,7.3760E-09,4.9170E-09,3.6870E-09,2.9500E-09,2.4580E-09,1.8440E-09,1.4750E-09};
	final static double[] PrProdN= {0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,8.0200E-05,4.0240E-04,1.5110E-03,1.6230E-03,4.1580E-03,6.6180E-03,8.7870E-03,1.0720E-02,1.2430E-02,1.3970E-02,1.5360E-02,1.6630E-02,1.7770E-02,1.8820E-02,1.9800E-02,2.0710E-02,2.1550E-02,2.2340E-02,2.3790E-02,2.5080E-02,2.6250E-02,2.7310E-02,2.8290E-02,2.9180E-02,3.0000E-02,3.3370E-02,3.5890E-02,3.7860E-02,4.0790E-02,4.2880E-02,4.6210E-02,4.8210E-02,5.0530E-02,5.1870E-02,5.2750E-02,5.3370E-02,5.4210E-02,5.4760E-02,5.5530E-02,5.5960E-02,5.6420E-02,5.6670E-02,5.6820E-02,5.6940E-02,5.7080E-02,5.7160E-02,5.7290E-02,5.7350E-02,5.7430E-02,5.7470E-02,5.7490E-02,5.7500E-02,5.7520E-02,5.7530E-02};
	final static double[] PrProdE= {0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,1.1090E-05,4.5260E-05,9.0140E-05,1.3840E-04,1.8650E-04,2.3310E-04,2.7780E-04,3.2020E-04,3.6050E-04,3.9850E-04,4.3430E-04,4.6840E-04,5.0080E-04,5.3160E-04,5.8870E-04,6.4080E-04,6.8860E-04,7.3270E-04,7.7340E-04,8.1120E-04,8.4650E-04,9.9320E-04,1.1060E-03,1.1950E-03,1.3310E-03,1.4310E-03,1.5970E-03,1.7020E-03,1.8310E-03,1.9080E-03,1.9610E-03,2.0000E-03,2.0530E-03,2.0890E-03,2.1410E-03,2.1710E-03,2.2030E-03,2.2230E-03,2.2350E-03,2.2430E-03,2.2540E-03,2.2610E-03,2.2710E-03,2.2750E-03,2.2810E-03,2.2840E-03,2.2870E-03,2.2880E-03,2.2890E-03,2.2910E-03};
	final static double[] TotAttn= {1.0570E+04,9.3330E+03,8.2450E+03,9.3450E+03,4.4180E+03,2.1540E+03,7.4880E+02,3.4730E+02,1.8990E+02,1.1560E+02,5.2550E+01,3.8290E+01,2.7830E+02,2.1600E+02,7.4050E+01,3.3800E+01,1.0910E+01,4.8620E+00,2.6130E+00,1.5930E+00,7.6300E-01,4.5850E-01,2.2170E-01,1.5590E-01,1.1190E-01,9.4130E-02,8.3630E-02,7.6250E-02,6.6060E-02,5.9010E-02,5.8340E-02,5.2610E-02,4.8030E-02,4.2050E-02,4.1660E-02,3.5990E-02,3.3180E-02,3.1770E-02,3.1080E-02,3.0800E-02,3.0740E-02,3.0840E-02,3.1030E-02,3.1270E-02,3.1540E-02,3.1830E-02,3.2150E-02,3.2470E-02,3.2790E-02,3.3440E-02,3.4080E-02,3.4700E-02,3.5300E-02,3.5880E-02,3.6420E-02,3.6940E-02,3.9200E-02,4.1030E-02,4.2530E-02,4.4860E-02,4.6590E-02,4.9430E-02,5.1180E-02,5.3260E-02,5.4480E-02,5.5290E-02,5.5870E-02,5.6650E-02,5.7170E-02,5.7900E-02,5.8310E-02,5.8750E-02,5.8990E-02,5.9130E-02,5.9240E-02,5.9380E-02,5.9470E-02,5.9590E-02,5.9650E-02,5.9730E-02,5.9760E-02,5.9780E-02,5.9790E-02,5.9820E-02,5.9830E-02};

	//******************************************************************************

	/**
	 * @return The array of tabulated photon energies
	 */
	public double[] getMevArray()
	{
		return MeV;
	}

	//******************************************************************************

	public double getMuMass(double theMeV, String muMassType)
	{
		double[] muArr;
		double muMass;
		double muLo = 0;
		double muHi = 0;
		double mevLo = 0;
		double mevHi = 0;

		switch(muMassType)
		{
		case "TotAttn":
			muArr = TotAttn;
			break;
		case "Raleigh":
			muArr = Coh;
			break;
		case "Compton":
			muArr = Incoh;
			break;
		case "PhotoElectric":
			muArr = PE;
			break;
		case "PairProdN":
			muArr = PrProdN;
			break;
		case "PairProdE":
			muArr = PrProdE;
			break;
		default:
			muArr = TotAttn;
			break;
		}

		//Report the muMass at 100GeV for any energy at or above 100GeV
		if(theMeV >= 100000.0)
		{
			muMass = muArr[muArr.length - 1];
		}			
		else
		{
			//Look everywhere except the last point
			for(int i = 0; i< muArr.length - 1;i++)
			{
				if(MeV[i] <= theMeV && MeV[i + 1] > theMeV)
				{
					mevLo = MeV[i];
					mevHi = MeV[i+1];
					muLo = muArr[i];
					muHi = muArr[i + 1];
					break;
				}
			}
			if(muLo ==0) muMass = 0.0;
			else muMass = Interpolation.logTerp(mevLo, mevHi, theMeV, muLo, muHi);
		}
		return muMass;
	}		
}
