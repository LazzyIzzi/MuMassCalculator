package nist.MuMassData;
/**
 * @author John H Dunsmuir
 * @hidden
 */

import jhd.MathTools.Interpolation;


class MassAttenuationNE {

	final static double[] MeV= {1.0000E-03,1.5000E-03,2.0000E-03,3.0000E-03,4.0000E-03,5.0000E-03,6.0000E-03,8.0000E-03,1.0000E-02,1.5000E-02,2.0000E-02,3.0000E-02,4.0000E-02,5.0000E-02,6.0000E-02,8.0000E-02,1.0000E-01,1.5000E-01,2.0000E-01,3.0000E-01,4.0000E-01,5.0000E-01,6.0000E-01,8.0000E-01,1.0000E+00,1.0220E+00,1.2500E+00,1.5000E+00,2.0000E+00,2.0440E+00,3.0000E+00,4.0000E+00,5.0000E+00,6.0000E+00,7.0000E+00,8.0000E+00,9.0000E+00,1.0000E+01,1.1000E+01,1.2000E+01,1.3000E+01,1.4000E+01,1.5000E+01,1.6000E+01,1.8000E+01,2.0000E+01,2.2000E+01,2.4000E+01,2.6000E+01,2.8000E+01,3.0000E+01,4.0000E+01,5.0000E+01,6.0000E+01,8.0000E+01,1.0000E+02,1.5000E+02,2.0000E+02,3.0000E+02,4.0000E+02,5.0000E+02,6.0000E+02,8.0000E+02,1.0000E+03,1.5000E+03,2.0000E+03,3.0000E+03,4.0000E+03,5.0000E+03,6.0000E+03,8.0000E+03,1.0000E+04,1.5000E+04,2.0000E+04,3.0000E+04,4.0000E+04,5.0000E+04,6.0000E+04,8.0000E+04,1.0000E+05};
	final static double[] Coh= {1.9000E+00,1.8030E+00,1.6830E+00,1.4150E+00,1.1600E+00,9.4450E-01,7.7410E-01,5.4040E-01,3.9840E-01,2.2260E-01,1.4550E-01,7.7290E-02,4.7630E-02,3.2170E-02,2.3140E-02,1.3620E-02,8.9470E-03,4.1060E-03,2.3400E-03,1.0500E-03,5.9300E-04,3.8020E-04,2.6420E-04,1.4880E-04,9.5230E-05,9.1200E-05,6.0970E-05,4.2350E-05,2.3820E-05,2.2810E-05,1.0590E-05,5.9570E-06,3.8140E-06,2.6480E-06,1.9450E-06,1.4890E-06,1.1770E-06,9.5320E-07,7.8780E-07,6.6190E-07,5.6400E-07,4.8640E-07,4.2350E-07,3.7240E-07,2.9420E-07,2.3830E-07,1.9690E-07,1.6550E-07,1.4100E-07,1.2160E-07,1.0590E-07,5.9570E-08,3.8140E-08,2.6480E-08,1.4890E-08,9.5320E-09,4.2350E-09,2.3830E-09,1.0590E-09,5.9570E-10,3.8110E-10,2.6470E-10,1.4890E-10,9.5290E-11,4.2350E-11,2.3830E-11,1.0590E-11,5.9570E-12,3.8110E-12,2.6470E-12,1.4890E-12,9.5290E-13,4.2350E-13,2.3830E-13,1.0590E-13,5.9570E-14,3.8110E-14,2.6470E-14,1.4890E-14,9.5290E-15};
	final static double[] Incoh= {5.4790E-03,1.1640E-02,1.9250E-02,3.6440E-02,5.3600E-02,6.9230E-02,8.2780E-02,1.0360E-01,1.1780E-01,1.3740E-01,1.4700E-01,1.5560E-01,1.5780E-01,1.5710E-01,1.5510E-01,1.4970E-01,1.4390E-01,1.3090E-01,1.2050E-01,1.0510E-01,9.4330E-02,8.6220E-02,7.9770E-02,7.0130E-02,6.3060E-02,6.2400E-02,5.6370E-02,5.1270E-02,4.3750E-02,4.3210E-02,3.4410E-02,2.8710E-02,2.4790E-02,2.1910E-02,1.9700E-02,1.7920E-02,1.6480E-02,1.5270E-02,1.4240E-02,1.3350E-02,1.2580E-02,1.1900E-02,1.1300E-02,1.0760E-02,9.8330E-03,9.0690E-03,8.4250E-03,7.8720E-03,7.3920E-03,6.9710E-03,6.6010E-03,5.2460E-03,4.3780E-03,3.7720E-03,2.9760E-03,2.4700E-03,1.7590E-03,1.3790E-03,9.7730E-04,7.6550E-04,6.3360E-04,5.4250E-04,4.2380E-04,3.4860E-04,2.4350E-04,1.8840E-04,1.3100E-04,1.0110E-04,8.2690E-05,7.0130E-05,5.4020E-05,4.4110E-05,3.0470E-05,2.3440E-05,1.6160E-05,1.2410E-05,1.0100E-05,8.5410E-06,6.5500E-06,5.3270E-06};
	final static double[] PE= {7.4070E+03,2.6640E+03,1.2410E+03,4.0380E+02,1.7720E+02,9.2360E+01,5.3840E+01,2.2640E+01,1.1450E+01,3.2530E+00,1.3130E+00,3.5930E-01,1.4180E-01,6.8670E-02,3.7870E-02,1.4780E-02,7.1200E-03,1.9030E-03,7.5680E-04,2.1490E-04,9.2480E-05,4.9960E-05,3.1130E-05,1.5730E-05,9.7790E-06,9.1740E-06,6.2250E-06,4.5120E-06,2.8290E-06,2.7360E-06,1.5740E-06,1.0780E-06,8.1560E-07,6.5500E-07,5.4670E-07,4.6880E-07,4.1000E-07,3.6440E-07,3.2800E-07,2.9800E-07,2.7300E-07,2.5190E-07,2.3380E-07,2.1820E-07,1.9240E-07,1.7200E-07,1.5550E-07,1.4190E-07,1.3050E-07,1.2080E-07,1.1240E-07,8.3500E-08,6.6400E-08,5.5120E-08,4.1120E-08,3.2800E-08,2.1780E-08,1.6300E-08,1.0840E-08,8.1260E-09,6.4970E-09,5.4100E-09,4.0560E-09,3.2440E-09,2.1620E-09,1.6210E-09,1.0810E-09,8.1020E-10,6.4820E-10,5.4020E-10,4.0530E-10,3.2410E-10,2.1610E-10,1.6200E-10,1.0800E-10,8.1020E-11,6.4820E-11,5.4020E-11,4.0500E-11,3.2410E-11};
	final static double[] PrProdN= {0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,2.4140E-05,1.3320E-04,5.2970E-04,5.7090E-04,1.5120E-03,2.4510E-03,3.2890E-03,4.0380E-03,4.7030E-03,5.3060E-03,5.8520E-03,6.3480E-03,6.7950E-03,7.2100E-03,7.5920E-03,7.9500E-03,8.2810E-03,8.5950E-03,9.1710E-03,9.6840E-03,1.0150E-02,1.0570E-02,1.0960E-02,1.1320E-02,1.1650E-02,1.3010E-02,1.4040E-02,1.4850E-02,1.6090E-02,1.6980E-02,1.8430E-02,1.9320E-02,2.0350E-02,2.0950E-02,2.1350E-02,2.1630E-02,2.2010E-02,2.2260E-02,2.2610E-02,2.2810E-02,2.3020E-02,2.3130E-02,2.3210E-02,2.3260E-02,2.3320E-02,2.3360E-02,2.3420E-02,2.3450E-02,2.3480E-02,2.3500E-02,2.3510E-02,2.3520E-02,2.3520E-02,2.3530E-02};
	final static double[] PrProdE= {0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,1.2040E-05,4.9150E-05,9.7970E-05,1.5050E-04,2.0290E-04,2.5380E-04,3.0260E-04,3.4920E-04,3.9300E-04,4.3480E-04,4.7420E-04,5.1180E-04,5.4760E-04,5.8160E-04,6.4490E-04,7.0280E-04,7.5590E-04,8.0520E-04,8.5110E-04,8.9350E-04,9.3350E-04,1.1010E-03,1.2310E-03,1.3360E-03,1.4980E-03,1.6200E-03,1.8270E-03,1.9600E-03,2.1260E-03,2.2260E-03,2.2950E-03,2.3460E-03,2.4150E-03,2.4620E-03,2.5310E-03,2.5690E-03,2.6120E-03,2.6360E-03,2.6510E-03,2.6620E-03,2.6760E-03,2.6850E-03,2.6970E-03,2.7040E-03,2.7100E-03,2.7150E-03,2.7170E-03,2.7190E-03,2.7210E-03,2.7220E-03};
	final static double[] TotAttn= {7.4090E+03,2.6660E+03,1.2430E+03,4.0520E+02,1.7840E+02,9.3380E+01,5.4690E+01,2.3280E+01,1.1970E+01,3.6130E+00,1.6060E+00,5.9220E-01,3.4720E-01,2.5790E-01,2.1610E-01,1.7810E-01,1.6000E-01,1.3700E-01,1.2360E-01,1.0640E-01,9.5020E-02,8.6650E-02,8.0060E-02,7.0290E-02,6.3160E-02,6.2500E-02,5.6460E-02,5.1450E-02,4.4310E-02,4.3810E-02,3.5950E-02,3.1220E-02,2.8180E-02,2.6100E-02,2.4600E-02,2.3490E-02,2.2630E-02,2.1970E-02,2.1430E-02,2.1000E-02,2.0650E-02,2.0360E-02,2.0130E-02,1.9940E-02,1.9650E-02,1.9460E-02,1.9330E-02,1.9250E-02,1.9200E-02,1.9180E-02,1.9190E-02,1.9360E-02,1.9650E-02,1.9960E-02,2.0560E-02,2.1070E-02,2.2020E-02,2.2660E-02,2.3460E-02,2.3940E-02,2.4280E-02,2.4520E-02,2.4850E-02,2.5070E-02,2.5390E-02,2.5570E-02,2.5760E-02,2.5870E-02,2.5940E-02,2.5990E-02,2.6050E-02,2.6090E-02,2.6140E-02,2.6170E-02,2.6210E-02,2.6230E-02,2.6230E-02,2.6240E-02,2.6250E-02,2.6260E-02};

	//******************************************************************************

	/**
	 * @return The array of tabulated photon energies
	 */
	public double[] getMevArray()
	{
		return MeV;
	}

	//******************************************************************************

	public double getMuMass(double theMeV, String muMassType)
	{
		double[] muArr;
		double muMass;
		double muLo = 0;
		double muHi = 0;
		double mevLo = 0;
		double mevHi = 0;

		switch(muMassType)
		{
		case "TotAttn":
			muArr = TotAttn;
			break;
		case "Raleigh":
			muArr = Coh;
			break;
		case "Compton":
			muArr = Incoh;
			break;
		case "PhotoElectric":
			muArr = PE;
			break;
		case "PairProdN":
			muArr = PrProdN;
			break;
		case "PairProdE":
			muArr = PrProdE;
			break;
		default:
			muArr = TotAttn;
			break;
		}

		//Report the muMass at 100GeV for any energy at or above 100GeV
		if(theMeV >= 100000.0)
		{
			muMass = muArr[muArr.length - 1];
		}			
		else
		{
			//Look everywhere except the last point
			for(int i = 0; i< muArr.length - 1;i++)
			{
				if(MeV[i] <= theMeV && MeV[i + 1] > theMeV)
				{
					mevLo = MeV[i];
					mevHi = MeV[i+1];
					muLo = muArr[i];
					muHi = muArr[i + 1];
					break;
				}
			}
			if(muLo ==0) muMass = 0.0;
			else muMass = Interpolation.logTerp(mevLo, mevHi, theMeV, muLo, muHi);
		}
		return muMass;
	}		
}
