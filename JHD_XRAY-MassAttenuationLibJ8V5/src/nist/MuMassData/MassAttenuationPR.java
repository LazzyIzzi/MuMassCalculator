package nist.MuMassData;
/**
 * @author John H Dunsmuir
 * @hidden
 */

import jhd.MathTools.Interpolation;


class MassAttenuationPR {

	final static double[] MeV= {1.00000E-03,1.11500E-03,1.24200E-03,1.24201E-03,1.28900E-03,1.33700E-03,1.33701E-03,1.50000E-03,1.51100E-03,
			1.51101E-03,2.00000E-03,3.00000E-03,4.00000E-03,5.00000E-03,5.96400E-03,5.96410E-03,6.00000E-03,6.44000E-03,6.44010E-03,
			6.63500E-03,6.83500E-03,6.83510E-03,8.00000E-03,1.00000E-02,1.50000E-02,2.00000E-02,3.00000E-02,4.00000E-02,4.19900E-02,
			4.19910E-02,5.00000E-02,6.00000E-02,8.00000E-02,1.00000E-01,1.50000E-01,2.00000E-01,3.00000E-01,4.00000E-01,5.00000E-01,
			6.00000E-01,8.00000E-01,1.00000E+00,1.02200E+00,1.25000E+00,1.50000E+00,2.00000E+00,2.04400E+00,3.00000E+00,4.00000E+00,
			5.00000E+00,6.00000E+00,7.00000E+00,8.00000E+00,9.00000E+00,1.00000E+01,1.10000E+01,1.20000E+01,1.30000E+01,1.40000E+01,
			1.50000E+01,1.60000E+01,1.80000E+01,2.00000E+01,2.20000E+01,2.40000E+01,2.60000E+01,2.80000E+01,3.00000E+01,4.00000E+01,
			5.00000E+01,6.00000E+01,8.00000E+01,1.00000E+02,1.50000E+02,2.00000E+02,3.00000E+02,4.00000E+02,5.00000E+02,6.00000E+02,
			8.00000E+02,1.00000E+03,1.50000E+03,2.00000E+03,3.00000E+03,4.00000E+03,5.00000E+03,6.00000E+03,8.00000E+03,1.00000E+04,
			1.50000E+04,2.00000E+04,3.00000E+04,4.00000E+04,5.00000E+04,6.00000E+04,8.00000E+04,1.00000E+05};
	final static double[] Coh= {9.2830E+00,9.1590E+00,9.0350E+00,9.0350E+00,8.9910E+00,8.9450E+00,8.9450E+00,8.7700E+00,8.7570E+00,8.7570E+00,8.2480E+00,7.2440E+00,6.3380E+00,5.5690E+00,4.9490E+00,4.9490E+00,4.9280E+00,4.6800E+00,4.6800E+00,4.5750E+00,4.4700E+00,4.4700E+00,3.9310E+00,3.2020E+00,2.0940E+00,1.5040E+00,8.7400E-01,5.6880E-01,5.2820E-01,5.2820E-01,4.0410E-01,3.0340E-01,1.8830E-01,1.2790E-01,6.2270E-02,3.6960E-02,1.7340E-02,1.0010E-02,6.5050E-03,4.5640E-03,2.5980E-03,1.6740E-03,1.6040E-03,1.0770E-03,7.4920E-04,4.2270E-04,4.0480E-04,1.8830E-04,1.0600E-04,6.7870E-05,4.7140E-05,3.4630E-05,2.6510E-05,2.0950E-05,1.6970E-05,1.4030E-05,1.1790E-05,1.0040E-05,8.6590E-06,7.5430E-06,6.6290E-06,5.2400E-06,4.2430E-06,3.5070E-06,2.9470E-06,2.5110E-06,2.1650E-06,1.8860E-06,1.0610E-06,6.7870E-07,4.7140E-07,2.6520E-07,1.6970E-07,7.5430E-08,4.2430E-08,1.8860E-08,1.0610E-08,6.7910E-09,4.7140E-09,2.6520E-09,1.6970E-09,7.5430E-10,4.2430E-10,1.8860E-10,1.0610E-10,6.7910E-11,4.7140E-11,2.6520E-11,1.6970E-11,7.5430E-12,4.2430E-12,1.8860E-12,1.0610E-12,6.7910E-13,4.7140E-13,2.6520E-13,1.6970E-13};
	final static double[] Incoh= {6.5350E-03,7.5020E-03,8.5310E-03,8.5310E-03,8.8820E-03,9.2490E-03,9.2490E-03,1.0550E-02,1.0640E-02,1.0640E-02,1.4470E-02,2.2030E-02,2.9000E-02,3.5290E-02,4.0640E-02,4.0640E-02,4.0830E-02,4.3080E-02,4.3080E-02,4.4040E-02,4.5000E-02,4.5000E-02,5.0170E-02,5.8040E-02,7.3600E-02,8.4490E-02,9.7360E-02,1.0410E-01,1.0500E-01,1.0500E-01,1.0770E-01,1.0960E-01,1.1040E-01,1.0910E-01,1.0310E-01,9.6800E-02,8.6200E-02,7.8130E-02,7.1800E-02,6.6670E-02,5.8810E-02,5.3000E-02,5.2440E-02,4.7480E-02,4.3210E-02,3.6890E-02,3.6440E-02,2.9050E-02,2.4240E-02,2.0940E-02,1.8510E-02,1.6630E-02,1.5140E-02,1.3920E-02,1.2900E-02,1.2030E-02,1.1280E-02,1.0630E-02,1.0060E-02,9.5480E-03,9.0900E-03,8.3080E-03,7.6630E-03,7.1160E-03,6.6500E-03,6.2440E-03,5.8890E-03,5.5770E-03,4.4320E-03,3.7000E-03,3.1880E-03,2.5140E-03,2.0870E-03,1.4860E-03,1.1650E-03,8.2570E-04,6.4660E-04,5.3550E-04,4.5860E-04,3.5810E-04,2.9460E-04,2.0570E-04,1.5920E-04,1.1070E-04,8.5480E-05,6.9880E-05,5.9240E-05,4.5640E-05,3.7270E-05,2.5760E-05,1.9800E-05,1.3650E-05,1.0480E-05,8.5390E-06,7.2180E-06,5.5350E-06,4.5000E-06};
	final static double[] PE= {1.0570E+04,8.1410E+03,6.2700E+03,7.2140E+03,6.6520E+03,6.1330E+03,6.5050E+03,5.0820E+03,5.0000E+03,5.2270E+03,2.7600E+03,1.0390E+03,5.0690E+02,2.8690E+02,1.8180E+02,5.1200E+02,5.0940E+02,4.2630E+02,5.8080E+02,5.3980E+02,5.0130E+02,5.7910E+02,3.9100E+02,2.1760E+02,7.3810E+01,3.3670E+01,1.0950E+01,4.8850E+00,4.2580E+00,2.4540E+01,1.5480E+01,9.5650E+00,4.3640E+00,2.3510E+00,7.5260E-01,3.3490E-01,1.0910E-01,5.0770E-02,2.8810E-02,1.8530E-02,9.6420E-03,6.0300E-03,5.7700E-03,3.8900E-03,2.7810E-03,1.6900E-03,1.6300E-03,8.9280E-04,5.8980E-04,4.3510E-04,3.4280E-04,2.8190E-04,2.3890E-04,2.0710E-04,1.8260E-04,1.6320E-04,1.4740E-04,1.3450E-04,1.2350E-04,1.1420E-04,1.0620E-04,9.3130E-05,8.2910E-05,7.4660E-05,6.7910E-05,6.2310E-05,5.7530E-05,5.3420E-05,3.9380E-05,3.1170E-05,2.5800E-05,1.9180E-05,1.5260E-05,1.0100E-05,7.5480E-06,5.0130E-06,3.7530E-06,2.9990E-06,2.4980E-06,1.8720E-06,1.4960E-06,9.9670E-07,7.4750E-07,4.9790E-07,3.7340E-07,2.9870E-07,2.4890E-07,1.8670E-07,1.4930E-07,9.9540E-08,7.4660E-08,4.9790E-08,3.7330E-08,2.9860E-08,2.4880E-08,1.8660E-08,1.4930E-08};
	final static double[] PrProdN= {0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,2.2670E-04,1.0480E-03,3.4390E-03,3.6670E-03,8.4370E-03,1.2770E-02,1.6480E-02,1.9680E-02,2.2510E-02,2.5050E-02,2.7370E-02,2.9490E-02,3.1450E-02,3.3260E-02,3.4950E-02,3.6520E-02,3.7970E-02,3.9310E-02,4.1760E-02,4.3930E-02,4.5940E-02,4.7740E-02,4.9360E-02,5.0860E-02,5.2270E-02,5.7910E-02,6.2100E-02,6.5350E-02,7.0180E-02,7.3550E-02,7.8980E-02,8.2230E-02,8.6030E-02,8.8210E-02,8.9620E-02,9.0650E-02,9.2020E-02,9.2910E-02,9.4190E-02,9.4880E-02,9.5650E-02,9.6080E-02,9.6330E-02,9.6500E-02,9.6720E-02,9.6890E-02,9.7060E-02,9.7190E-02,9.7310E-02,9.7360E-02,9.7400E-02,9.7440E-02,9.7440E-02,9.7490E-02};
	final static double[] PrProdE= {};
	final static double[] TotAttn= {1.0580E+04,8.1510E+03,6.2790E+03,7.2230E+03,6.6610E+03,6.1420E+03,6.5140E+03,5.0900E+03,5.0090E+03,5.2360E+03,2.7680E+03,1.0470E+03,5.1320E+02,2.9250E+02,1.8680E+02,5.1700E+02,5.1440E+02,4.3100E+02,5.8550E+02,5.4450E+02,5.0580E+02,5.8360E+02,3.9500E+02,2.2090E+02,7.5980E+01,3.5260E+01,1.1920E+01,5.5580E+00,4.8920E+00,2.5180E+01,1.5990E+01,9.9780E+00,4.6620E+00,2.5880E+00,9.1800E-01,4.6870E-01,2.1270E-01,1.3890E-01,1.0710E-01,8.9770E-02,7.1050E-02,6.0700E-02,5.9810E-02,5.2680E-02,4.7790E-02,4.2440E-02,4.2140E-02,3.8580E-02,3.7740E-02,3.8000E-02,3.8700E-02,3.9630E-02,4.0670E-02,4.1770E-02,4.2880E-02,4.3980E-02,4.5060E-02,4.6120E-02,4.7130E-02,4.8090E-02,4.9000E-02,5.0690E-02,5.2260E-02,5.3760E-02,5.5120E-02,5.6370E-02,5.7540E-02,5.8660E-02,6.3270E-02,6.6810E-02,6.9620E-02,7.3890E-02,7.6910E-02,8.1870E-02,8.4880E-02,8.8450E-02,9.0520E-02,9.1860E-02,9.2840E-02,9.4150E-02,9.5010E-02,9.6250E-02,9.6910E-02,9.7660E-02,9.8080E-02,9.8330E-02,9.8500E-02,9.8700E-02,9.8870E-02,9.9040E-02,9.9170E-02,9.9290E-02,9.9340E-02,9.9380E-02,9.9420E-02,9.9420E-02,9.9460E-02};

	//******************************************************************************

	/**
	 * @return The array of tabulated photon energies
	 */
	public double[] getMevArray()
	{
		return MeV;
	}

	//******************************************************************************

	public double getMuMass(double theMeV, String muMassType)
	{
		double[] muArr;
		double muMass;
		double muLo = 0;
		double muHi = 0;
		double mevLo = 0;
		double mevHi = 0;

		switch(muMassType)
		{
		case "TotAttn":
			muArr = TotAttn;
			break;
		case "Raleigh":
			muArr = Coh;
			break;
		case "Compton":
			muArr = Incoh;
			break;
		case "PhotoElectric":
			muArr = PE;
			break;
		case "PairProdN":
			muArr = PrProdN;
			break;
		case "PairProdE":
			muArr = PrProdE;
			break;
		default:
			muArr = TotAttn;
			break;
		}

		//Report the muMass at 100GeV for any energy at or above 100GeV
		if(theMeV >= 100000.0)
		{
			muMass = muArr[muArr.length - 1];
		}			
		else
		{
			//Look everywhere except the last point
			for(int i = 0; i< muArr.length - 1;i++)
			{
				if(MeV[i] <= theMeV && MeV[i + 1] > theMeV)
				{
					mevLo = MeV[i];
					mevHi = MeV[i+1];
					muLo = muArr[i];
					muHi = muArr[i + 1];
					break;
				}
			}
			if(muLo ==0) muMass = 0.0;
			else muMass = Interpolation.logTerp(mevLo, mevHi, theMeV, muLo, muHi);
		}
		return muMass;
	}		
}
