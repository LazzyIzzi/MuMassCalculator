package nist.MuMassData;
/**
 * @author John H Dunsmuir
 * @hidden
 */

import jhd.MathTools.Interpolation;


class MassAttenuationBE {

	final static double[] MeV= {1.0000E-03,1.5000E-03,2.0000E-03,3.0000E-03,4.0000E-03,5.0000E-03,6.0000E-03,8.0000E-03,1.0000E-02,1.5000E-02,2.0000E-02,3.0000E-02,4.0000E-02,5.0000E-02,6.0000E-02,8.0000E-02,1.0000E-01,1.5000E-01,2.0000E-01,3.0000E-01,4.0000E-01,5.0000E-01,6.0000E-01,8.0000E-01,1.0000E+00,1.0220E+00,1.2500E+00,1.5000E+00,2.0000E+00,2.0440E+00,3.0000E+00,4.0000E+00,5.0000E+00,6.0000E+00,7.0000E+00,8.0000E+00,9.0000E+00,1.0000E+01,1.1000E+01,1.2000E+01,1.3000E+01,1.4000E+01,1.5000E+01,1.6000E+01,1.8000E+01,2.0000E+01,2.2000E+01,2.4000E+01,2.6000E+01,2.8000E+01,3.0000E+01,4.0000E+01,5.0000E+01,6.0000E+01,8.0000E+01,1.0000E+02,1.5000E+02,2.0000E+02,3.0000E+02,4.0000E+02,5.0000E+02,6.0000E+02,8.0000E+02,1.0000E+03,1.5000E+03,2.0000E+03,3.0000E+03,4.0000E+03,5.0000E+03,6.0000E+03,8.0000E+03,1.0000E+04,1.5000E+04,2.0000E+04,3.0000E+04,4.0000E+04,5.0000E+04,6.0000E+04,8.0000E+04,1.0000E+05};
	final static double[] Coh= {5.9180E-01,4.9480E-01,4.1030E-01,2.9620E-01,2.3210E-01,1.9260E-01,1.6490E-01,1.2540E-01,9.7490E-02,5.5800E-02,3.5380E-02,1.7700E-02,1.0540E-02,6.9560E-03,4.9200E-03,2.8230E-03,1.8240E-03,8.1860E-04,4.6210E-04,2.0590E-04,1.1590E-04,7.4240E-05,5.1550E-05,2.9010E-05,1.8560E-05,1.7770E-05,1.1880E-05,8.2530E-06,4.6420E-06,4.4440E-06,2.0630E-06,1.1610E-06,7.4310E-07,5.1580E-07,3.7890E-07,2.9010E-07,2.2930E-07,1.8570E-07,1.5340E-07,1.2900E-07,1.0990E-07,9.4750E-08,8.2530E-08,7.2500E-08,5.7310E-08,4.6420E-08,3.8360E-08,3.2240E-08,2.7460E-08,2.3680E-08,2.0630E-08,1.1610E-08,7.4240E-09,5.1570E-09,2.9010E-09,1.8560E-09,8.2530E-10,4.6410E-10,2.0630E-10,1.1600E-10,7.4240E-11,5.1570E-11,2.9010E-11,1.8560E-11,8.2530E-12,4.6410E-12,2.0630E-12,1.1600E-12,7.4240E-13,5.1570E-13,2.9010E-13,1.8560E-13,8.2530E-14,4.6410E-14,2.0630E-14,1.1600E-14,7.4240E-15,5.1570E-15,2.9010E-15,1.8560E-15};
	final static double[] Incoh= {2.0910E-02,3.7920E-02,5.2840E-02,7.3500E-02,8.6270E-02,9.5620E-02,1.0340E-01,1.1630E-01,1.2620E-01,1.4110E-01,1.4770E-01,1.5080E-01,1.4930E-01,1.4650E-01,1.4330E-01,1.3690E-01,1.3080E-01,1.1810E-01,1.0850E-01,9.4420E-02,8.4600E-02,7.7310E-02,7.1500E-02,6.2830E-02,5.6500E-02,5.5900E-02,5.0520E-02,4.5920E-02,3.9180E-02,3.8700E-02,3.0830E-02,2.5710E-02,2.2210E-02,1.9630E-02,1.7640E-02,1.6060E-02,1.4760E-02,1.3670E-02,1.2760E-02,1.1960E-02,1.1270E-02,1.0660E-02,1.0120E-02,9.6360E-03,8.8070E-03,8.1260E-03,7.5440E-03,7.0500E-03,6.6200E-03,6.2450E-03,5.9130E-03,4.6990E-03,3.9220E-03,3.3800E-03,2.6660E-03,2.2120E-03,1.5760E-03,1.2350E-03,8.7540E-04,6.8560E-04,5.6760E-04,4.8600E-04,3.7950E-04,3.1230E-04,2.1800E-04,1.6880E-04,1.1730E-04,9.0610E-05,7.4040E-05,6.2810E-05,4.8390E-05,3.9510E-05,2.7300E-05,2.0990E-05,1.4470E-05,1.1110E-05,9.0480E-06,7.6510E-06,5.8660E-06,4.7720E-06};
	final static double[] PE= {6.0350E+02,1.7920E+02,7.4240E+01,2.0900E+01,8.3660E+00,4.0810E+00,2.2590E+00,8.8210E-01,4.2290E-01,1.1010E-01,4.2070E-02,1.0770E-02,4.0800E-03,1.9190E-03,1.0390E-03,3.9360E-04,1.8590E-04,4.8180E-05,1.8810E-05,5.2340E-06,2.2240E-06,1.1930E-06,7.4110E-07,3.7360E-07,2.3230E-07,2.1010E-07,1.4280E-07,1.0390E-07,6.5780E-08,6.3670E-08,3.7090E-08,2.5600E-08,1.9490E-08,1.5710E-08,1.3150E-08,1.1300E-08,9.9030E-09,8.8140E-09,7.9450E-09,7.2230E-09,6.6260E-09,6.1180E-09,5.6830E-09,5.3050E-09,4.6820E-09,4.1900E-09,3.7910E-09,3.4620E-09,3.1850E-09,2.9500E-09,2.7460E-09,2.0420E-09,1.6250E-09,1.3500E-09,1.0080E-09,8.0390E-10,5.3420E-10,3.9990E-10,2.6620E-10,1.9950E-10,1.5940E-10,1.3280E-10,9.9570E-11,7.9650E-11,5.3080E-11,3.9810E-11,2.6530E-11,1.9900E-11,1.5920E-11,1.3260E-11,9.9500E-12,7.9590E-12,5.3050E-12,3.9790E-12,2.6520E-12,1.9890E-12,1.5910E-12,1.3260E-12,9.9430E-13,7.9590E-13};
	final static double[] PrProdN= {0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,8.4200E-06,4.7060E-05,1.8830E-04,2.0300E-04,5.4010E-04,8.7740E-04,1.1780E-03,1.4480E-03,1.6890E-03,1.9070E-03,2.1050E-03,2.2850E-03,2.4490E-03,2.5990E-03,2.7400E-03,2.8710E-03,2.9930E-03,3.1080E-03,3.3200E-03,3.5100E-03,3.6830E-03,3.8410E-03,3.9860E-03,4.1200E-03,4.2450E-03,4.7590E-03,5.1450E-03,5.4510E-03,5.9150E-03,6.2510E-03,6.8090E-03,7.1630E-03,7.6040E-03,7.8650E-03,8.0390E-03,8.1720E-03,8.3460E-03,8.4660E-03,8.6400E-03,8.7340E-03,8.8410E-03,8.8940E-03,8.9340E-03,8.9610E-03,8.9940E-03,9.0140E-03,9.0410E-03,9.0610E-03,9.0740E-03,9.0880E-03,9.0880E-03,9.0940E-03,9.1010E-03,9.1010E-03};
	final static double[] PrProdE= {0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,1.0790E-05,4.4040E-05,8.7740E-05,1.3480E-04,1.8170E-04,2.2730E-04,2.7100E-04,3.1270E-04,3.5220E-04,3.8960E-04,4.2490E-04,4.5870E-04,4.9070E-04,5.2130E-04,5.7830E-04,6.3050E-04,6.7890E-04,7.2300E-04,7.6440E-04,8.0320E-04,8.3930E-04,9.9230E-04,1.1130E-03,1.2090E-03,1.3610E-03,1.4760E-03,1.6750E-03,1.8080E-03,1.9810E-03,2.0920E-03,2.1700E-03,2.2300E-03,2.3140E-03,2.3720E-03,2.4610E-03,2.5130E-03,2.5710E-03,2.6050E-03,2.6260E-03,2.6410E-03,2.6620E-03,2.6750E-03,2.6930E-03,2.7030E-03,2.7130E-03,2.7200E-03,2.7230E-03,2.7260E-03,2.7280E-03,2.7300E-03};
	final static double[] TotAttn= {6.0420E+02,1.7970E+02,7.4700E+01,2.1270E+01,8.6850E+00,4.3690E+00,2.5280E+00,1.1240E+00,6.4660E-01,3.0700E-01,2.2510E-01,1.7920E-01,1.6400E-01,1.5540E-01,1.4930E-01,1.4010E-01,1.3280E-01,1.1900E-01,1.0890E-01,9.4630E-02,8.4720E-02,7.7390E-02,7.1550E-02,6.2860E-02,5.6520E-02,5.5910E-02,5.0540E-02,4.5980E-02,3.9380E-02,3.8910E-02,3.1380E-02,2.6640E-02,2.3470E-02,2.1210E-02,1.9510E-02,1.8190E-02,1.7140E-02,1.6270E-02,1.5560E-02,1.4950E-02,1.4430E-02,1.3990E-02,1.3610E-02,1.3270E-02,1.2710E-02,1.2270E-02,1.1910E-02,1.1610E-02,1.1370E-02,1.1170E-02,1.1000E-02,1.0450E-02,1.0180E-02,1.0040E-02,9.9420E-03,9.9400E-03,1.0060E-02,1.0210E-02,1.0460E-02,1.0640E-02,1.0780E-02,1.0890E-02,1.1040E-02,1.1150E-02,1.1320E-02,1.1420E-02,1.1530E-02,1.1590E-02,1.1630E-02,1.1670E-02,1.1700E-02,1.1730E-02,1.1760E-02,1.1790E-02,1.1800E-02,1.1820E-02,1.1820E-02,1.1830E-02,1.1840E-02,1.1840E-02};

	//******************************************************************************

	/**
	 * @return The array of tabulated photon energies
	 */
	public double[] getMevArray()
	{
		return MeV;
	}

	//******************************************************************************

	public double getMuMass(double theMeV, String muMassType)
	{
		double[] muArr;
		double muMass;
		double muLo = 0;
		double muHi = 0;
		double mevLo = 0;
		double mevHi = 0;

		switch(muMassType)
		{
		case "TotAttn":
			muArr = TotAttn;
			break;
		case "Raleigh":
			muArr = Coh;
			break;
		case "Compton":
			muArr = Incoh;
			break;
		case "PhotoElectric":
			muArr = PE;
			break;
		case "PairProdN":
			muArr = PrProdN;
			break;
		case "PairProdE":
			muArr = PrProdE;
			break;
		default:
			muArr = TotAttn;
			break;
		}

		//Report the muMass at 100GeV for any energy at or above 100GeV
		if(theMeV >= 100000.0)
		{
			muMass = muArr[muArr.length - 1];
		}			
		else
		{
			//Look everywhere except the last point
			for(int i = 0; i< muArr.length - 1;i++)
			{
				if(MeV[i] <= theMeV && MeV[i + 1] > theMeV)
				{
					mevLo = MeV[i];
					mevHi = MeV[i+1];
					muLo = muArr[i];
					muHi = muArr[i + 1];
					break;
				}
			}
			if(muLo ==0) muMass = 0.0;
			else muMass = Interpolation.logTerp(mevLo, mevHi, theMeV, muLo, muHi);
		}
		return muMass;
	}		
}
