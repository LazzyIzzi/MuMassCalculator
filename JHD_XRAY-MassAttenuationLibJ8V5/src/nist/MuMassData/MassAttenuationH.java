package nist.MuMassData;
/**
 * @author John H Dunsmuir
 * @hidden
 */

import jhd.MathTools.Interpolation;


class MassAttenuationH {

	final static double[] MeV= {1.0000E-03,1.5000E-03,2.0000E-03,3.0000E-03,4.0000E-03,5.0000E-03,6.0000E-03,8.0000E-03,1.0000E-02,1.5000E-02,2.0000E-02,3.0000E-02,4.0000E-02,5.0000E-02,6.0000E-02,8.0000E-02,1.0000E-01,1.5000E-01,2.0000E-01,3.0000E-01,4.0000E-01,5.0000E-01,6.0000E-01,8.0000E-01,1.0000E+00,1.0220E+00,1.2500E+00,1.5000E+00,2.0000E+00,2.0440E+00,3.0000E+00,4.0000E+00,5.0000E+00,6.0000E+00,7.0000E+00,8.0000E+00,9.0000E+00,1.0000E+01,1.1000E+01,1.2000E+01,1.3000E+01,1.4000E+01,1.5000E+01,1.6000E+01,1.8000E+01,2.0000E+01,2.2000E+01,2.4000E+01,2.6000E+01,2.8000E+01,3.0000E+01,4.0000E+01,5.0000E+01,6.0000E+01,8.0000E+01,1.0000E+02,1.5000E+02,2.0000E+02,3.0000E+02,4.0000E+02,5.0000E+02,6.0000E+02,8.0000E+02,1.0000E+03,1.5000E+03,2.0000E+03,3.0000E+03,4.0000E+03,5.0000E+03,6.0000E+03,8.0000E+03,1.0000E+04,1.5000E+04,2.0000E+04,3.0000E+04,4.0000E+04,5.0000E+04,6.0000E+04,8.0000E+04,1.0000E+05};
	final static double[] Coh= {3.4680E-01,2.9780E-01,2.4740E-01,1.6510E-01,1.1240E-01,8.0120E-02,5.9680E-02,3.6600E-02,2.4620E-02,1.1610E-02,6.6860E-03,3.0240E-03,1.7120E-03,1.0990E-03,7.6480E-04,4.3080E-04,2.7600E-04,1.2280E-04,6.9070E-05,3.0700E-05,1.7270E-05,1.1050E-05,7.6770E-06,4.3180E-06,2.7630E-06,2.6460E-06,1.7690E-06,1.2280E-06,6.9070E-07,6.6140E-07,3.0700E-07,1.7270E-07,1.1050E-07,7.6770E-08,5.6400E-08,4.3180E-08,3.4120E-08,2.7630E-08,2.2840E-08,1.9190E-08,1.6350E-08,1.4100E-08,1.2280E-08,1.0800E-08,8.5320E-09,6.9070E-09,5.7090E-09,4.7980E-09,4.0880E-09,3.5240E-09,3.0700E-09,1.7270E-09,1.1050E-09,7.6720E-10,4.3150E-10,2.7600E-10,1.2270E-10,6.9010E-11,3.0670E-11,1.7250E-11,1.1040E-11,7.6660E-12,4.3130E-12,2.7600E-12,1.2270E-12,6.9010E-13,3.0670E-13,1.7250E-13,1.1040E-13,7.6660E-14,4.3130E-14,2.7600E-14,1.2270E-14,6.9010E-15,3.0670E-15,1.7250E-15,1.1040E-15,7.6660E-16,4.3130E-16,2.7600E-16};
	final static double[] Incoh= {5.0330E-02,9.8580E-02,1.4810E-01,2.2840E-01,2.7930E-01,3.0990E-01,3.2880E-01,3.4890E-01,3.5810E-01,3.6420E-01,3.6250E-01,3.5390E-01,3.4410E-01,3.3440E-01,3.2530E-01,3.0870E-01,2.9410E-01,2.6500E-01,2.4280E-01,2.1120E-01,1.8930E-01,1.7280E-01,1.5990E-01,1.4050E-01,1.2630E-01,1.2500E-01,1.1290E-01,1.0260E-01,8.7590E-02,8.6510E-02,6.8890E-02,5.7480E-02,4.9640E-02,4.3870E-02,3.9430E-02,3.5890E-02,3.2990E-02,3.0570E-02,2.8510E-02,2.6740E-02,2.5190E-02,2.3830E-02,2.2620E-02,2.1540E-02,1.9690E-02,1.8160E-02,1.6870E-02,1.5760E-02,1.4800E-02,1.3960E-02,1.3220E-02,1.0500E-02,8.7710E-03,7.5520E-03,5.9580E-03,4.9450E-03,3.5210E-03,2.7610E-03,1.9570E-03,1.5330E-03,1.2680E-03,1.0860E-03,8.4840E-04,6.9780E-04,4.8750E-04,3.7720E-04,2.6230E-04,2.0250E-04,1.6560E-04,1.4040E-04,1.0810E-04,8.8310E-05,6.1000E-05,4.6920E-05,3.2360E-05,2.4840E-05,2.0230E-05,1.7100E-05,1.3110E-05,1.0660E-05};
	final static double[] PE= {6.8170E+00,1.7520E+00,6.6380E-01,1.6770E-01,6.2910E-02,2.9320E-02,1.5700E-02,5.8650E-03,2.7230E-03,6.7390E-04,2.4990E-04,6.1660E-05,2.2840E-05,1.0580E-05,5.6490E-06,2.1050E-06,9.8220E-07,2.4950E-07,9.6250E-08,2.6370E-08,1.1100E-08,5.9310E-09,3.6790E-09,1.8630E-09,1.1720E-09,1.1230E-09,7.7910E-10,5.8150E-10,3.7050E-10,3.5870E-10,2.1050E-10,1.4600E-10,1.1150E-10,9.0100E-11,7.5520E-11,6.5000E-11,5.7030E-11,5.0800E-11,4.5800E-11,4.1690E-11,3.8240E-11,3.5330E-11,3.2830E-11,3.0660E-11,2.7070E-11,2.4240E-11,2.1940E-11,2.0040E-11,1.8440E-11,1.7080E-11,1.5900E-11,1.1840E-11,9.4220E-12,7.8270E-12,5.8470E-12,4.6670E-12,3.1010E-12,2.3220E-12,1.5460E-12,1.1580E-12,9.2610E-13,7.7130E-13,5.7850E-13,4.6270E-13,3.0840E-13,2.3120E-13,1.5410E-13,1.1560E-13,9.2490E-14,7.7070E-14,5.7780E-14,4.6230E-14,3.0820E-14,2.3110E-14,1.5410E-14,1.1560E-14,9.2430E-15,7.7010E-15,5.7780E-15,4.6220E-15};
	final static double[] PrProdN= {0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,4.6630E-06,2.6200E-05,1.0500E-04,1.1320E-04,3.0160E-04,4.9000E-04,6.5840E-04,8.0960E-04,9.4400E-04,1.0660E-03,1.1770E-03,1.2770E-03,1.3690E-03,1.4540E-03,1.5330E-03,1.6060E-03,1.6750E-03,1.7400E-03,1.8590E-03,1.9670E-03,2.0650E-03,2.1560E-03,2.2390E-03,2.3160E-03,2.3890E-03,2.6920E-03,2.9290E-03,3.1220E-03,3.4240E-03,3.6540E-03,4.0510E-03,4.3100E-03,4.6320E-03,4.8270E-03,4.9590E-03,5.0550E-03,5.1860E-03,5.2720E-03,5.3980E-03,5.4690E-03,5.5430E-03,5.5880E-03,5.6140E-03,5.6330E-03,5.6570E-03,5.6730E-03,5.6930E-03,5.7050E-03,5.7160E-03,5.7240E-03,5.7290E-03,5.7310E-03,5.7340E-03,5.7360E-03};
	final static double[] PrProdE= {0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,2.4110E-05,9.8400E-05,1.9610E-04,3.0120E-04,4.0620E-04,5.0800E-04,6.0580E-04,6.9900E-04,7.8750E-04,8.7110E-04,9.5000E-04,1.0250E-03,1.0970E-03,1.1660E-03,1.2930E-03,1.4090E-03,1.5170E-03,1.6170E-03,1.7100E-03,1.7970E-03,1.8780E-03,2.2220E-03,2.4930E-03,2.7160E-03,3.0690E-03,3.3420E-03,3.8310E-03,4.1680E-03,4.6190E-03,4.9130E-03,5.1230E-03,5.2820E-03,5.5100E-03,5.6670E-03,5.9080E-03,6.0460E-03,6.2020E-03,6.2910E-03,6.3510E-03,6.3930E-03,6.4470E-03,6.4830E-03,6.5300E-03,6.5540E-03,6.5840E-03,6.6020E-03,6.6080E-03,6.6200E-03,6.6260E-03,6.6320E-03};
	final static double[] TotAttn= {7.2140E+00,2.1480E+00,1.0590E+00,5.6110E-01,4.5460E-01,4.1930E-01,4.0420E-01,3.9140E-01,3.8540E-01,3.7640E-01,3.6950E-01,3.5700E-01,3.4580E-01,3.3550E-01,3.2600E-01,3.0910E-01,2.9440E-01,2.6510E-01,2.4290E-01,2.1120E-01,1.8930E-01,1.7290E-01,1.5990E-01,1.4050E-01,1.2630E-01,1.2500E-01,1.1290E-01,1.0270E-01,8.7690E-02,8.6630E-02,6.9210E-02,5.8070E-02,5.0490E-02,4.4980E-02,4.0780E-02,3.7460E-02,3.4780E-02,3.2540E-02,3.0670E-02,2.9060E-02,2.7670E-02,2.6460E-02,2.5390E-02,2.4450E-02,2.2840E-02,2.1530E-02,2.0450E-02,1.9530E-02,1.8750E-02,1.8070E-02,1.7480E-02,1.5420E-02,1.4190E-02,1.3390E-02,1.2450E-02,1.1940E-02,1.1400E-02,1.1240E-02,1.1210E-02,1.1270E-02,1.1350E-02,1.1420E-02,1.1540E-02,1.1640E-02,1.1790E-02,1.1890E-02,1.2010E-02,1.2080E-02,1.2130E-02,1.2170E-02,1.2210E-02,1.2240E-02,1.2280E-02,1.2310E-02,1.2330E-02,1.2350E-02,1.2360E-02,1.2370E-02,1.2370E-02,1.2380E-02};

	//******************************************************************************

	/**
	 * @return The array of tabulated photon energies
	 */
	public double[] getMevArray()
	{
		return MeV;
	}

	//******************************************************************************

	public double getMuMass(double theMeV, String muMassType)
	{
		double[] muArr;
		double muMass;
		double muLo = 0;
		double muHi = 0;
		double mevLo = 0;
		double mevHi = 0;

		switch(muMassType)
		{
		case "TotAttn":
			muArr = TotAttn;
			break;
		case "Raleigh":
			muArr = Coh;
			break;
		case "Compton":
			muArr = Incoh;
			break;
		case "PhotoElectric":
			muArr = PE;
			break;
		case "PairProdN":
			muArr = PrProdN;
			break;
		case "PairProdE":
			muArr = PrProdE;
			break;
		default:
			muArr = TotAttn;
			break;
		}

		//Report the muMass at 100GeV for any energy at or above 100GeV
		if(theMeV >= 100000.0)
		{
			muMass = muArr[muArr.length - 1];
		}			
		else
		{
			//Look everywhere except the last point
			for(int i = 0; i< muArr.length - 1;i++)
			{
				if(MeV[i] <= theMeV && MeV[i + 1] > theMeV)
				{
					mevLo = MeV[i];
					mevHi = MeV[i+1];
					muLo = muArr[i];
					muHi = muArr[i + 1];
					break;
				}
			}
			if(muLo ==0) muMass = 0.0;
			else muMass = Interpolation.logTerp(mevLo, mevHi, theMeV, muLo, muHi);
		}
		return muMass;
	}		
}
