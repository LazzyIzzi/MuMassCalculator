package nist.MuMassData;
/**
 * @author John H Dunsmuir
 * @hidden
 */

import jhd.MathTools.Interpolation;


class MassAttenuationK {

	final static double[] MeV= {1.00000E-03,1.50000E-03,2.00000E-03,3.00000E-03,3.60700E-03,3.60710E-03,4.00000E-03,5.00000E-03,6.00000E-03,
			8.00000E-03,1.00000E-02,1.50000E-02,2.00000E-02,3.00000E-02,4.00000E-02,5.00000E-02,6.00000E-02,8.00000E-02,1.00000E-01,
			1.50000E-01,2.00000E-01,3.00000E-01,4.00000E-01,5.00000E-01,6.00000E-01,8.00000E-01,1.00000E+00,1.02200E+00,1.25000E+00,
			1.50000E+00,2.00000E+00,2.04400E+00,3.00000E+00,4.00000E+00,5.00000E+00,6.00000E+00,7.00000E+00,8.00000E+00,9.00000E+00,
			1.00000E+01,1.10000E+01,1.20000E+01,1.30000E+01,1.40000E+01,1.50000E+01,1.60000E+01,1.80000E+01,2.00000E+01,2.20000E+01,
			2.40000E+01,2.60000E+01,2.80000E+01,3.00000E+01,4.00000E+01,5.00000E+01,6.00000E+01,8.00000E+01,1.00000E+02,1.50000E+02,
			2.00000E+02,3.00000E+02,4.00000E+02,5.00000E+02,6.00000E+02,8.00000E+02,1.00000E+03,1.50000E+03,2.00000E+03,3.00000E+03,
			4.00000E+03,5.00000E+03,6.00000E+03,8.00000E+03,1.00000E+04,1.50000E+04,2.00000E+04,3.00000E+04,4.00000E+04,5.00000E+04,
			6.00000E+04,8.00000E+04,1.00000E+05};
	final static double[] Coh= {3.3470E+00,3.0790E+00,2.8170E+00,2.3270E+00,2.0650E+00,2.0650E+00,1.9160E+00,1.5990E+00,1.3600E+00,1.0420E+00,8.3620E-01,5.2260E-01,3.4900E-01,1.8730E-01,1.1850E-01,8.2140E-02,6.0300E-02,3.6290E-02,2.4140E-02,1.1290E-02,6.5110E-03,2.9590E-03,1.6790E-03,1.0790E-03,7.5150E-04,4.2370E-04,2.7150E-04,2.6000E-04,1.7390E-04,1.2080E-04,6.7990E-05,6.5090E-05,3.0220E-05,1.7000E-05,1.0880E-05,7.5580E-06,5.5530E-06,4.2510E-06,3.3590E-06,2.7220E-06,2.2490E-06,1.8900E-06,1.6100E-06,1.3880E-06,1.2090E-06,1.0630E-06,8.3970E-07,6.8020E-07,5.6220E-07,4.7240E-07,4.0250E-07,3.4700E-07,3.0240E-07,1.7000E-07,1.0880E-07,7.5580E-08,4.2510E-08,2.7200E-08,1.2090E-08,6.8020E-09,3.0240E-09,1.7000E-09,1.0880E-09,7.5580E-10,4.2510E-10,2.7200E-10,1.2090E-10,6.8020E-11,3.0240E-11,1.7000E-11,1.0880E-11,7.5580E-12,4.2510E-12,2.7200E-12,1.2090E-12,6.8020E-13,3.0240E-13,1.7000E-13,1.0880E-13,7.5580E-14,4.2510E-14,2.7200E-14};
	final static double[] Incoh= {1.2160E-02,1.9580E-02,2.7030E-02,4.1620E-02,4.9770E-02,4.9770E-02,5.4630E-02,6.5770E-02,7.5070E-02,8.9320E-02,9.9840E-02,1.1820E-01,1.2970E-01,1.4100E-01,1.4490E-01,1.4580E-01,1.4530E-01,1.4210E-01,1.3770E-01,1.2660E-01,1.1710E-01,1.0260E-01,9.2220E-02,8.4340E-02,7.8110E-02,6.8680E-02,6.1780E-02,6.1130E-02,5.5260E-02,5.0240E-02,4.2880E-02,4.2360E-02,3.3750E-02,2.8160E-02,2.4310E-02,2.1490E-02,1.9310E-02,1.7570E-02,1.6160E-02,1.4970E-02,1.3960E-02,1.3100E-02,1.2340E-02,1.1670E-02,1.1080E-02,1.0550E-02,9.6440E-03,8.8930E-03,8.2600E-03,7.7180E-03,7.2480E-03,6.8370E-03,6.4740E-03,5.1440E-03,4.2940E-03,3.7000E-03,2.9190E-03,2.4230E-03,1.7250E-03,1.3520E-03,9.5850E-04,7.5070E-04,6.2150E-04,5.3200E-04,4.1560E-04,3.4190E-04,2.3870E-04,1.8480E-04,1.2850E-04,9.9180E-05,8.1090E-05,6.8760E-05,5.2980E-05,4.3250E-05,2.9900E-05,2.2980E-05,1.5850E-05,1.2170E-05,9.9080E-06,8.3760E-06,6.4230E-06,5.2250E-06};
	final static double[] PE= {4.0540E+03,1.4150E+03,6.5650E+02,2.1750E+02,1.3060E+02,1.1990E+03,9.2350E+02,5.1720E+02,3.1900E+02,1.4580E+02,7.8140E+01,2.4380E+01,1.0450E+01,3.0840E+00,1.2770E+00,6.3980E-01,3.6230E-01,1.4680E-01,7.2640E-02,2.0250E-02,8.2560E-03,2.4150E-03,1.0540E-03,5.7470E-04,3.6010E-04,1.8280E-04,1.1370E-04,1.0760E-04,7.2870E-05,5.2660E-05,3.2670E-05,3.1580E-05,1.7900E-05,1.2130E-05,9.1230E-06,7.2880E-06,6.0610E-06,5.1810E-06,4.5240E-06,4.0120E-06,3.6040E-06,3.2700E-06,2.9930E-06,2.7590E-06,2.5580E-06,2.3840E-06,2.0990E-06,1.8760E-06,1.6940E-06,1.5450E-06,1.4200E-06,1.3140E-06,1.2220E-06,9.0600E-07,7.1980E-07,5.9700E-07,4.4510E-07,3.5470E-07,2.3540E-07,1.7610E-07,1.1710E-07,8.7750E-08,7.0140E-08,5.8420E-08,4.3790E-08,3.5030E-08,2.3330E-08,1.7500E-08,1.1660E-08,8.7470E-09,6.9960E-09,5.8300E-09,4.3730E-09,3.4980E-09,2.3320E-09,1.7480E-09,1.1660E-09,8.7440E-10,6.9940E-10,5.8280E-10,4.3710E-10,3.4980E-10};
	final static double[] PrProdN= {0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,4.9060E-05,2.6010E-04,1.0130E-03,1.0910E-03,2.8490E-03,4.5850E-03,6.1240E-03,7.5000E-03,8.7220E-03,9.8240E-03,1.0820E-02,1.1720E-02,1.2550E-02,1.3300E-02,1.3990E-02,1.4640E-02,1.5250E-02,1.5820E-02,1.6850E-02,1.7790E-02,1.8620E-02,1.9390E-02,2.0080E-02,2.0730E-02,2.1320E-02,2.3770E-02,2.5600E-02,2.7020E-02,2.9130E-02,3.0650E-02,3.3120E-02,3.4620E-02,3.6410E-02,3.7460E-02,3.8140E-02,3.8650E-02,3.9310E-02,3.9740E-02,4.0370E-02,4.0720E-02,4.1090E-02,4.1290E-02,4.1420E-02,4.1510E-02,4.1630E-02,4.1710E-02,4.1800E-02,4.1860E-02,4.1930E-02,4.1960E-02,4.1970E-02,4.1990E-02,4.2000E-02,4.2000E-02};
	final static double[] PrProdE= {0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,1.1810E-05,4.8210E-05,9.6050E-05,1.4750E-04,1.9880E-04,2.4860E-04,2.9630E-04,3.4180E-04,3.8490E-04,4.2560E-04,4.6390E-04,5.0060E-04,5.3520E-04,5.6840E-04,6.2980E-04,6.8590E-04,7.3750E-04,7.8510E-04,8.2910E-04,8.7010E-04,9.0830E-04,1.0680E-03,1.1910E-03,1.2900E-03,1.4410E-03,1.5540E-03,1.7440E-03,1.8650E-03,2.0190E-03,2.1120E-03,2.1780E-03,2.2260E-03,2.2930E-03,2.3380E-03,2.4070E-03,2.4470E-03,2.4910E-03,2.5170E-03,2.5320E-03,2.5430E-03,2.5580E-03,2.5680E-03,2.5810E-03,2.5890E-03,2.5970E-03,2.6010E-03,2.6050E-03,2.6060E-03,2.6080E-03,2.6090E-03};
	final static double[] TotAttn= {4.0570E+03,1.4180E+03,6.5930E+02,2.1990E+02,1.3270E+02,1.2010E+03,9.2550E+02,5.1890E+02,3.2040E+02,1.4690E+02,7.9070E+01,2.5020E+01,1.0930E+01,3.4120E+00,1.5410E+00,8.6780E-01,5.6780E-01,3.2510E-01,2.3450E-01,1.5820E-01,1.3190E-01,1.0800E-01,9.4950E-02,8.6000E-02,7.9220E-02,6.9290E-02,6.2160E-02,6.1500E-02,5.5560E-02,5.0680E-02,4.3990E-02,4.3550E-02,3.6660E-02,3.2820E-02,3.0550E-02,2.9150E-02,2.8250E-02,2.7660E-02,2.7280E-02,2.7040E-02,2.6900E-02,2.6820E-02,2.6800E-02,2.6820E-02,2.6870E-02,2.6940E-02,2.7130E-02,2.7370E-02,2.7620E-02,2.7900E-02,2.8160E-02,2.8440E-02,2.8700E-02,2.9980E-02,3.1090E-02,3.2010E-02,3.3490E-02,3.4630E-02,3.6580E-02,3.7840E-02,3.9390E-02,4.0320E-02,4.0940E-02,4.1400E-02,4.2020E-02,4.2420E-02,4.3020E-02,4.3360E-02,4.3710E-02,4.3910E-02,4.4030E-02,4.4120E-02,4.4240E-02,4.4320E-02,4.4410E-02,4.4480E-02,4.4540E-02,4.4570E-02,4.4590E-02,4.4600E-02,4.4620E-02,4.4620E-02};

	//******************************************************************************

	/**
	 * @return The array of tabulated photon energies
	 */
	public double[] getMevArray()
	{
		return MeV;
	}

	//******************************************************************************

	public double getMuMass(double theMeV, String muMassType)
	{
		double[] muArr;
		double muMass;
		double muLo = 0;
		double muHi = 0;
		double mevLo = 0;
		double mevHi = 0;

		switch(muMassType)
		{
		case "TotAttn":
			muArr = TotAttn;
			break;
		case "Raleigh":
			muArr = Coh;
			break;
		case "Compton":
			muArr = Incoh;
			break;
		case "PhotoElectric":
			muArr = PE;
			break;
		case "PairProdN":
			muArr = PrProdN;
			break;
		case "PairProdE":
			muArr = PrProdE;
			break;
		default:
			muArr = TotAttn;
			break;
		}

		//Report the muMass at 100GeV for any energy at or above 100GeV
		if(theMeV >= 100000.0)
		{
			muMass = muArr[muArr.length - 1];
		}			
		else
		{
			//Look everywhere except the last point
			for(int i = 0; i< muArr.length - 1;i++)
			{
				if(MeV[i] <= theMeV && MeV[i + 1] > theMeV)
				{
					mevLo = MeV[i];
					mevHi = MeV[i+1];
					muLo = muArr[i];
					muHi = muArr[i + 1];
					break;
				}
			}
			if(muLo ==0) muMass = 0.0;
			else muMass = Interpolation.logTerp(mevLo, mevHi, theMeV, muLo, muHi);
		}
		return muMass;
	}		
}
