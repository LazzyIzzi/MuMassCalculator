package nist.MuMassData;
import jhd.MathTools.Interpolation;
/**
 * @author John H Dunsmuir
 * @hidden
 */


class MassAttenuationAC {

	final static double[] MeV= {1.00000E-03,1.03900E-03,1.08000E-03,1.08001E-03,1.17100E-03,1.26900E-03,1.26901E-03,1.50000E-03,2.00000E-03,
			3.00000E-03,3.21900E-03,3.21910E-03,3.29400E-03,3.37000E-03,3.37010E-03,3.63000E-03,3.90900E-03,3.90910E-03,4.00000E-03,
			4.65600E-03,4.65610E-03,5.00000E-03,5.00200E-03,5.00210E-03,6.00000E-03,8.00000E-03,1.00000E-02,1.50000E-02,1.58700E-02,
			1.58701E-02,1.74000E-02,1.90800E-02,1.90801E-02,1.94600E-02,1.98400E-02,1.98401E-02,2.00000E-02,3.00000E-02,4.00000E-02,
			5.00000E-02,6.00000E-02,8.00000E-02,1.00000E-01,1.06800E-01,1.06801E-01,1.50000E-01,2.00000E-01,3.00000E-01,4.00000E-01,
			5.00000E-01,6.00000E-01,8.00000E-01,1.00000E+00,1.02200E+00,1.25000E+00,1.50000E+00,2.00000E+00,2.04400E+00,3.00000E+00,
			4.00000E+00,5.00000E+00,6.00000E+00,7.00000E+00,8.00000E+00,9.00000E+00,1.00000E+01,1.10000E+01,1.20000E+01,1.30000E+01,
			1.40000E+01,1.50000E+01,1.60000E+01,1.80000E+01,2.00000E+01,2.20000E+01,2.40000E+01,2.60000E+01,2.80000E+01,3.00000E+01,
			4.00000E+01,5.00000E+01,6.00000E+01,8.00000E+01,1.00000E+02,1.50000E+02,2.00000E+02,3.00000E+02,4.00000E+02,5.00000E+02,
			6.00000E+02,8.00000E+02,1.00000E+03,1.50000E+03,2.00000E+03,3.00000E+03,4.00000E+03,5.00000E+03,6.00000E+03,8.00000E+03,
			1.00000E+04,1.50000E+04,2.00000E+04,3.00000E+04,4.00000E+04,5.00000E+04,6.00000E+04,8.00000E+04,1.00000E+05};

	final static double[] Coh= {1.3260E+01,1.3210E+01,1.3160E+01,1.3160E+01,1.3050E+01,1.2930E+01,1.2930E+01,1.2630E+01,1.1980E+01,
			1.0740E+01,1.0490E+01,1.0490E+01,1.0400E+01,1.0310E+01,1.0310E+01,1.0020E+01,9.7190E+00,9.7190E+00,9.6240E+00,8.9680E+00,
			8.9680E+00,8.6470E+00,8.6470E+00,8.6470E+00,7.8070E+00,6.4330E+00,5.3770E+00,3.6310E+00,3.4140E+00,3.4140E+00,3.0720E+00,
			2.7530E+00,2.7530E+00,2.6890E+00,2.6270E+00,2.6270E+00,2.6010E+00,1.5310E+00,1.0290E+00,7.3900E-01,5.5490E-01,3.4860E-01,
			2.4170E-01,2.1660E-01,2.1660E-01,1.2030E-01,7.1970E-02,3.4480E-02,2.0250E-02,1.3310E-02,9.4030E-03,5.4060E-03,3.5070E-03,
			3.3610E-03,2.2670E-03,1.5850E-03,8.9840E-04,8.6050E-04,4.0190E-04,2.2660E-04,1.4520E-04,1.0090E-04,7.4170E-05,5.6790E-05,
			4.4880E-05,3.6370E-05,3.0050E-05,2.5260E-05,2.1520E-05,1.8560E-05,1.6170E-05,1.4210E-05,1.1230E-05,9.0960E-06,7.5170E-06,
			6.3160E-06,5.3820E-06,4.6390E-06,4.0430E-06,2.2740E-06,1.4550E-06,1.0110E-06,5.6850E-07,3.6390E-07,1.6170E-07,9.0960E-08,
			4.0430E-08,2.2740E-08,1.4550E-08,1.0110E-08,5.6850E-09,3.6390E-09,1.6170E-09,9.0960E-10,4.0430E-10,2.2740E-10,1.4550E-10,
			1.0110E-10,5.6850E-11,3.6390E-11,1.6170E-11,9.0960E-12,4.0430E-12,2.2740E-12,1.4550E-12,1.0110E-12,5.6850E-13,3.6390E-13};

	final static double[] Incoh= {4.8730E-03,5.1210E-03,5.3770E-03,5.3770E-03,5.9260E-03,6.5090E-03,6.5090E-03,7.9100E-03,1.0880E-02,
			1.6620E-02,1.7840E-02,1.7840E-02,1.8250E-02,1.8660E-02,1.8660E-02,2.0050E-02,2.1500E-02,2.1500E-02,2.1970E-02,2.5180E-02,
			2.5180E-02,2.6760E-02,2.6760E-02,2.6760E-02,3.1040E-02,3.8540E-02,4.5230E-02,5.8440E-02,6.0290E-02,6.0290E-02,6.3230E-02,
			6.6180E-02,6.6180E-02,6.6820E-02,6.7430E-02,6.7430E-02,6.7670E-02,8.0060E-02,8.7690E-02,9.2310E-02,9.4990E-02,9.7030E-02,
			9.6930E-02,9.6610E-02,9.6610E-02,9.3190E-02,8.8280E-02,7.9290E-02,7.2180E-02,6.6530E-02,6.1940E-02,5.4780E-02,4.9420E-02,
			4.8910E-02,4.4320E-02,4.0350E-02,3.4480E-02,3.4060E-02,2.7160E-02,2.2680E-02,1.9590E-02,1.7320E-02,1.5570E-02,1.4170E-02,
			1.3030E-02,1.2070E-02,1.1260E-02,1.0560E-02,9.9500E-03,9.4140E-03,8.9370E-03,8.5100E-03,7.7770E-03,7.1730E-03,6.6630E-03,
			6.2260E-03,5.8460E-03,5.5150E-03,5.2230E-03,4.1510E-03,3.4640E-03,2.9840E-03,2.3540E-03,1.9540E-03,1.3920E-03,1.0910E-03,
			7.7320E-04,6.0560E-04,5.0130E-04,4.2920E-04,3.3530E-04,2.7590E-04,1.9260E-04,1.4910E-04,1.0370E-04,8.0000E-05,6.5410E-05,
			5.5470E-05,4.2730E-05,3.4880E-05,2.4110E-05,1.8540E-05,1.2790E-05,9.8170E-06,7.9920E-06,6.7560E-06,5.1810E-06,4.2150E-06};

	final static double[] PE= {6.4560E+03,6.0180E+03,5.6100E+03,5.6900E+03,4.8840E+03,4.1910E+03,4.2760E+03,3.0690E+03,1.6840E+03,
			6.8730E+02,5.8540E+02,1.5260E+03,1.4060E+03,1.2960E+03,1.8820E+03,1.5560E+03,1.2870E+03,1.4950E+03,1.4160E+03,9.6550E+02,
			1.0250E+03,8.6000E+02,8.5920E+02,8.9660E+02,5.7510E+02,2.8140E+02,1.5990E+02,5.6310E+01,4.8650E+01,1.1790E+02,9.1780E+01,
			7.1430E+01,1.0080E+02,9.5940E+01,9.1330E+01,1.0510E+02,1.0350E+02,3.6500E+01,1.7110E+01,9.4380E+00,5.7830E+00,2.6550E+00,
			1.4470E+00,1.2110E+00,5.3080E+00,2.2200E+00,1.0530E+00,3.7220E-01,1.8250E-01,1.0740E-01,7.0770E-02,3.7850E-02,2.3940E-02,
			2.2920E-02,1.5490E-02,1.1010E-02,6.6550E-03,6.4170E-03,3.4700E-03,2.2670E-03,1.6580E-03,1.2980E-03,1.0620E-03,8.9580E-04,
			7.7380E-04,6.8010E-04,6.0640E-04,5.4670E-04,4.9740E-04,4.5620E-04,4.2120E-04,3.9130E-04,3.4220E-04,3.0400E-04,2.7350E-04,
			2.4840E-04,2.2750E-04,2.0990E-04,1.9480E-04,1.4310E-04,1.1310E-04,9.3450E-05,6.9340E-05,5.5120E-05,3.6450E-05,2.7220E-05,
			1.8060E-05,1.3510E-05,1.0800E-05,8.9920E-06,6.7350E-06,5.3850E-06,3.5860E-06,2.6900E-06,1.7920E-06,1.3440E-06,1.0750E-06,
			8.9550E-07,6.7160E-07,5.3720E-07,3.5810E-07,2.6870E-07,1.7910E-07,1.3430E-07,1.0740E-07,8.9530E-08,6.7140E-08,5.3720E-08};

	final static double[] PrProdN= {0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,
			0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,
			0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,
			0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,
			0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,
			0.0000E+00,4.2920E-04,2.0950E-03,6.1860E-03,6.5360E-03,1.3050E-02,1.8420E-02,2.2910E-02,2.6760E-02,3.0160E-02,3.3240E-02,
			3.6050E-02,3.8650E-02,4.1040E-02,4.3290E-02,4.5360E-02,4.7320E-02,4.9150E-02,5.0850E-02,5.3950E-02,5.6710E-02,5.9210E-02,
			6.1510E-02,6.3610E-02,6.5520E-02,6.7300E-02,7.4480E-02,7.9840E-02,8.3980E-02,9.0080E-02,9.4380E-02,1.0120E-01,1.0520E-01,
			1.0990E-01,1.1260E-01,1.1440E-01,1.1560E-01,1.1730E-01,1.1840E-01,1.2000E-01,1.2080E-01,1.2180E-01,1.2230E-01,1.2260E-01,
			1.2280E-01,1.2310E-01,1.2330E-01,1.2350E-01,1.2360E-01,1.2380E-01,1.2390E-01,1.2390E-01,1.2390E-01,1.2400E-01,1.2400E-01};

	final static double[] PrProdE= {0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,
			0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,
			0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,
			0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,
			0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,
			0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,0.0000E+00,9.4910E-06,3.8670E-05,7.6900E-05,1.1790E-04,1.5850E-04,1.9790E-04,
			2.3540E-04,2.7080E-04,3.0450E-04,3.3610E-04,3.6580E-04,3.9390E-04,4.2040E-04,4.4560E-04,4.9230E-04,5.3450E-04,5.7300E-04,
			6.0820E-04,6.4090E-04,6.7080E-04,6.9870E-04,8.1300E-04,8.9870E-04,9.6630E-04,1.0670E-03,1.1400E-03,1.2580E-03,1.3320E-03,
			1.4210E-03,1.4750E-03,1.5110E-03,1.5370E-03,1.5740E-03,1.5980E-03,1.6350E-03,1.6550E-03,1.6780E-03,1.6910E-03,1.7000E-03,
			1.7050E-03,1.7130E-03,1.7180E-03,1.7240E-03,1.7280E-03,1.7320E-03,1.7340E-03,1.7360E-03,1.7360E-03,1.7370E-03,1.7380E-03};

	final static double[] TotAttn= {6.4700E+03,6.0310E+03,5.6230E+03,5.7030E+03,4.8970E+03,4.2040E+03,4.2890E+03,3.0820E+03,1.6960E+03,
			6.9800E+02,5.9590E+02,1.5360E+03,1.4160E+03,1.3060E+03,1.8920E+03,1.5660E+03,1.2970E+03,1.5040E+03,1.4260E+03,9.7450E+02,
			1.0340E+03,8.6860E+02,8.6790E+02,9.0530E+02,5.8290E+02,2.8790E+02,1.6530E+02,6.0000E+01,5.2120E+01,1.2140E+02,9.4910E+01,
			7.4250E+01,1.0360E+02,9.8700E+01,9.4020E+01,1.0780E+02,1.0610E+02,3.8110E+01,1.8230E+01,1.0270E+01,6.4330E+00,3.1010E+00,
			1.7860E+00,1.5250E+00,5.6210E+00,2.4340E+00,1.2130E+00,4.8590E-01,2.7490E-01,1.8720E-01,1.4210E-01,9.8030E-02,7.6860E-02,
			7.5200E-02,6.2510E-02,5.5040E-02,4.8220E-02,4.7870E-02,4.4090E-02,4.3630E-02,4.4380E-02,4.5600E-02,4.7030E-02,4.8560E-02,
			5.0130E-02,5.1710E-02,5.3240E-02,5.4760E-02,5.6190E-02,5.7610E-02,5.8950E-02,6.0210E-02,6.2580E-02,6.4730E-02,6.6720E-02,
			6.8600E-02,7.0330E-02,7.1920E-02,7.3420E-02,7.9590E-02,8.4320E-02,8.8030E-02,9.3570E-02,9.7530E-02,1.0390E-01,1.0770E-01,
			1.1210E-01,1.1470E-01,1.1640E-01,1.1760E-01,1.1920E-01,1.2030E-01,1.2180E-01,1.2260E-01,1.2350E-01,1.2400E-01,1.2430E-01,
			1.2460E-01,1.2480E-01,1.2500E-01,1.2530E-01,1.2540E-01,1.2550E-01,1.2560E-01,1.2560E-01,1.2570E-01,1.2570E-01,1.2580E-01};

	//******************************************************************************
	
	/**
	 * @return The array of tabulated photon energies
	 */
	public double[] getMevArray()
	{
		return MeV;
	}

	//******************************************************************************

	public double getMuMass(double theMeV, String muMassType)
	{
		double[] muArr;
		double muMass;
		double muLo = 0;
		double muHi = 0;
		double mevLo = 0;
		double mevHi = 0;

		switch(muMassType)
		{
		case "TotAttn":
			muArr = TotAttn;
			break;
		case "Raleigh":
			muArr = Coh;
			break;
		case "Compton":
			muArr = Incoh;
			break;
		case "PhotoElectric":
			muArr = PE;
			break;
		case "PairProdN":
			muArr = PrProdN;
			break;
		case "PairProdE":
			muArr = PrProdE;
			break;
		default:
			muArr = TotAttn;
			break;
		}

		//Report the muMass at 100GeV for any energy at or above 100GeV
		if(theMeV >= 100000.0)
		{
			muMass = muArr[muArr.length - 1];
		}			
		else
		{
			//Look everywhere except the last point
			for(int i = 0; i< muArr.length - 1;i++)
			{
				if(MeV[i] <= theMeV && MeV[i + 1] > theMeV)
				{
					mevLo = MeV[i];
					mevHi = MeV[i+1];
					muLo = muArr[i];
					muHi = muArr[i + 1];
					break;
				}
			}
			if(muLo ==0) muMass = 0.0;
			else muMass = Interpolation.logTerp(mevLo, mevHi, theMeV, muLo, muHi);
		}
		return muMass;
	}		
}
