package nist.MuMassData;
/**
 * @author John H Dunsmuir
 * @hidden
 */

import jhd.MathTools.Interpolation;


class MassAttenuationPA {

	final static double[] MeV= {1.00000E-03,1.00300E-03,1.00700E-03,1.00701E-03,1.11000E-03,1.22400E-03,1.22401E-03,1.30300E-03,1.38700E-03,
			1.38701E-03,1.50000E-03,2.00000E-03,3.00000E-03,3.44200E-03,3.44210E-03,3.52500E-03,3.61100E-03,3.61110E-03,4.00000E-03,
			4.17400E-03,4.17410E-03,5.00000E-03,5.00100E-03,5.00110E-03,5.18100E-03,5.36700E-03,5.36710E-03,6.00000E-03,8.00000E-03,
			1.00000E-02,1.50000E-02,1.67300E-02,1.67301E-02,2.00000E-02,2.03100E-02,2.03101E-02,2.07100E-02,2.11000E-02,2.11001E-02,
			3.00000E-02,4.00000E-02,5.00000E-02,6.00000E-02,8.00000E-02,1.00000E-01,1.12600E-01,1.12601E-01,1.50000E-01,2.00000E-01,
			3.00000E-01,4.00000E-01,5.00000E-01,6.00000E-01,8.00000E-01,1.00000E+00,1.02200E+00,1.25000E+00,1.50000E+00,2.00000E+00,
			2.04400E+00,3.00000E+00,4.00000E+00,5.00000E+00,6.00000E+00,7.00000E+00,8.00000E+00,9.00000E+00,1.00000E+01,1.10000E+01,
			1.20000E+01,1.30000E+01,1.40000E+01,1.50000E+01,1.60000E+01,1.80000E+01,2.00000E+01,2.20000E+01,2.40000E+01,2.60000E+01,
			2.80000E+01,3.00000E+01,4.00000E+01,5.00000E+01,6.00000E+01,8.00000E+01,1.00000E+02,1.50000E+02,2.00000E+02,3.00000E+02,
			4.00000E+02,5.00000E+02,6.00000E+02,8.00000E+02,1.00000E+03,1.50000E+03,2.00000E+03,3.00000E+03,4.00000E+03,5.00000E+03,
			6.00000E+03,8.00000E+03,1.00000E+04,1.50000E+04,2.00000E+04,3.00000E+04,4.00000E+04,5.00000E+04,6.00000E+04,8.00000E+04,
			1.00000E+05};
	final static double[] Coh= {1.3660E+01,1.3650E+01,1.3650E+01,1.3650E+01,1.3520E+01,1.3380E+01,1.3380E+01,1.3280E+01,1.3180E+01,1.3180E+01,1.3030E+01,1.2360E+01,1.1070E+01,1.0540E+01,1.0540E+01,1.0450E+01,1.0350E+01,1.0350E+01,9.9080E+00,9.7200E+00,9.7200E+00,8.8940E+00,8.8940E+00,8.8940E+00,8.7800E+00,8.5570E+00,8.5570E+00,8.0230E+00,6.6130E+00,5.5340E+00,3.7510E+00,3.3260E+00,3.3260E+00,2.6980E+00,2.6460E+00,2.6460E+00,2.5840E+00,2.5250E+00,2.5250E+00,1.5890E+00,1.0680E+00,7.6920E-01,5.7840E-01,3.6340E-01,2.5200E-01,2.0650E-01,2.0650E-01,1.2580E-01,7.5330E-02,3.6130E-02,2.1250E-02,1.3980E-02,9.8840E-03,5.6900E-03,3.6910E-03,3.5400E-03,2.3890E-03,1.6710E-03,9.4750E-04,9.0760E-04,4.2410E-04,2.3920E-04,1.5330E-04,1.0650E-04,7.8300E-05,5.9950E-05,4.7390E-05,3.8390E-05,3.1720E-05,2.6670E-05,2.2720E-05,1.9590E-05,1.7070E-05,1.5000E-05,1.1850E-05,9.6030E-06,7.9370E-06,6.6680E-06,5.6820E-06,4.9000E-06,4.2670E-06,2.4010E-06,1.5370E-06,1.0670E-06,6.0030E-07,3.8420E-07,1.7070E-07,9.6030E-08,4.2700E-08,2.4010E-08,1.5370E-08,1.0670E-08,6.0030E-09,3.8420E-09,1.7070E-09,9.6030E-10,4.2700E-10,2.4010E-10,1.5370E-10,1.0670E-10,6.0030E-11,3.8420E-11,1.7070E-11,9.6030E-12,4.2700E-12,2.4010E-12,1.5370E-12,1.0670E-12,6.0030E-13,3.8420E-13};
	final static double[] Incoh= {4.7020E-03,4.7230E-03,4.7440E-03,4.7440E-03,5.3890E-03,6.0840E-03,6.0840E-03,6.5450E-03,7.0350E-03,7.0350E-03,7.7150E-03,1.0680E-02,1.6440E-02,1.8860E-02,1.8860E-02,1.9320E-02,1.9770E-02,1.9770E-02,2.1780E-02,2.2650E-02,2.2650E-02,2.6590E-02,2.6610E-02,2.6610E-02,2.8930E-02,2.8230E-02,2.8230E-02,3.0890E-02,3.8420E-02,4.5070E-02,5.8390E-02,6.1980E-02,6.1980E-02,6.7720E-02,6.8210E-02,6.8210E-02,6.8820E-02,6.9410E-02,6.9410E-02,8.0020E-02,8.7660E-02,9.2300E-02,9.5040E-02,9.7150E-02,9.7070E-02,9.6470E-02,9.6470E-02,9.3420E-02,8.8570E-02,7.9580E-02,7.2460E-02,6.6810E-02,6.2190E-02,5.5000E-02,4.9660E-02,4.9130E-02,4.4520E-02,4.0530E-02,3.4640E-02,3.4220E-02,2.7290E-02,2.2790E-02,1.9680E-02,1.7400E-02,1.5640E-02,1.4240E-02,1.3090E-02,1.2130E-02,1.1310E-02,1.0610E-02,9.9960E-03,9.4570E-03,8.9800E-03,8.5500E-03,7.8150E-03,7.2070E-03,6.6940E-03,6.2560E-03,5.8750E-03,5.5420E-03,5.2470E-03,4.1710E-03,3.4800E-03,2.9980E-03,2.3650E-03,1.9630E-03,1.3980E-03,1.0960E-03,7.7700E-04,6.0840E-04,5.0360E-04,4.3140E-04,3.3680E-04,2.7710E-04,1.9350E-04,1.4980E-04,1.0410E-04,8.0390E-05,6.5710E-05,5.5730E-05,4.2930E-05,3.5060E-05,2.4230E-05,1.8630E-05,1.2850E-05,9.8630E-06,8.0310E-06,6.7900E-06,5.2050E-06,4.2360E-06};
	final static double[] PE= {6.5160E+03,6.4760E+03,6.4380E+03,6.8550E+03,5.7250E+03,4.7830E+03,4.8510E+03,4.2940E+03,3.8030E+03,3.8790E+03,3.3130E+03,1.8210E+03,7.4470E+02,5.4430E+02,1.3520E+03,1.2600E+03,1.1750E+03,1.6840E+03,1.3050E+03,1.1720E+03,1.3650E+03,8.6690E+02,8.6670E+02,9.1990E+02,8.4300E+02,7.7260E+02,8.0570E+02,6.1360E+02,3.0080E+02,1.7140E+02,6.0600E+01,4.5640E+01,1.0960E+02,6.7480E+01,6.4750E+01,9.1800E+01,8.7360E+01,8.3180E+01,9.6000E+01,3.9100E+01,1.8410E+01,1.0190E+01,6.2560E+00,2.8830E+00,1.5750E+00,1.1420E+00,4.8950E+00,2.3560E+00,1.1240E+00,3.9960E-01,1.9670E-01,1.1610E-01,7.6660E-02,4.1110E-02,2.6030E-02,2.4920E-02,1.6840E-02,1.1980E-02,7.2360E-03,6.9750E-03,3.7690E-03,2.4610E-03,1.8000E-03,1.4080E-03,1.1510E-03,9.7120E-04,8.3850E-04,7.3710E-04,6.5690E-04,5.9220E-04,5.3880E-04,4.9420E-04,4.5640E-04,4.2360E-04,3.7070E-04,3.2920E-04,2.9610E-04,2.6900E-04,2.4630E-04,2.2720E-04,2.1080E-04,1.5490E-04,1.2240E-04,1.0110E-04,7.5020E-05,5.9640E-05,3.9410E-05,2.9430E-05,1.9530E-05,1.4620E-05,1.1680E-05,9.7250E-06,7.2850E-06,5.8230E-06,3.8790E-06,2.9090E-06,1.9380E-06,1.4530E-06,1.1620E-06,9.6860E-07,7.2650E-07,5.8100E-07,3.8730E-07,2.9040E-07,1.9360E-07,1.4520E-07,1.1620E-07,9.6810E-08,7.2620E-08,5.8100E-08};
	final static double[] PrProdN= {};
	final static double[] PrProdE= {};
	final static double[] TotAttn= {6.5300E+03,6.4900E+03,6.4520E+03,6.8690E+03,5.7380E+03,4.7960E+03,4.8640E+03,4.3080E+03,3.8160E+03,3.8920E+03,3.3260E+03,1.8340E+03,7.5580E+02,5.5480E+02,1.3630E+03,1.2710E+03,1.1850E+03,1.6940E+03,1.3150E+03,1.1820E+03,1.3750E+03,8.7590E+02,8.7560E+02,9.2880E+02,8.5180E+02,7.8120E+02,8.1430E+02,6.2160E+02,3.0750E+02,1.7690E+02,6.4410E+01,4.9030E+01,1.1300E+02,7.0250E+01,6.7460E+01,9.4520E+01,9.0020E+01,8.5770E+01,9.8600E+01,4.0770E+01,1.9570E+01,1.1050E+01,6.9290E+00,3.3430E+00,1.9240E+00,1.4450E+00,5.1980E+00,2.5750E+00,1.2880E+00,5.1530E-01,2.9040E-01,1.9690E-01,1.4870E-01,1.0180E-01,7.9370E-02,7.7600E-02,6.4200E-02,5.6380E-02,4.9270E-02,4.8920E-02,4.4960E-02,4.4450E-02,4.5190E-02,4.6410E-02,4.7870E-02,4.9430E-02,5.1020E-02,5.2610E-02,5.4190E-02,5.5720E-02,5.7220E-02,5.8640E-02,6.0000E-02,6.1310E-02,6.3720E-02,6.5920E-02,6.7970E-02,6.9880E-02,7.1650E-02,7.3280E-02,7.4790E-02,8.1130E-02,8.5960E-02,8.9750E-02,9.5420E-02,9.9450E-02,1.0590E-01,1.0980E-01,1.1440E-01,1.1700E-01,1.1880E-01,1.2000E-01,1.2160E-01,1.2270E-01,1.2430E-01,1.2510E-01,1.2610E-01,1.2660E-01,1.2690E-01,1.2710E-01,1.2740E-01,1.2760E-01,1.2780E-01,1.2800E-01,1.2810E-01,1.2820E-01,1.2820E-01,1.2830E-01,1.2830E-01,1.2830E-01};

	//******************************************************************************

	/**
	 * @return The array of tabulated photon energies
	 */
	public double[] getMevArray()
	{
		return MeV;
	}

	//******************************************************************************

	public double getMuMass(double theMeV, String muMassType)
	{
		double[] muArr;
		double muMass;
		double muLo = 0;
		double muHi = 0;
		double mevLo = 0;
		double mevHi = 0;

		switch(muMassType)
		{
		case "TotAttn":
			muArr = TotAttn;
			break;
		case "Raleigh":
			muArr = Coh;
			break;
		case "Compton":
			muArr = Incoh;
			break;
		case "PhotoElectric":
			muArr = PE;
			break;
		case "PairProdN":
			muArr = PrProdN;
			break;
		case "PairProdE":
			muArr = PrProdE;
			break;
		default:
			muArr = TotAttn;
			break;
		}

		//Report the muMass at 100GeV for any energy at or above 100GeV
		if(theMeV >= 100000.0)
		{
			muMass = muArr[muArr.length - 1];
		}			
		else
		{
			//Look everywhere except the last point
			for(int i = 0; i< muArr.length - 1;i++)
			{
				if(MeV[i] <= theMeV && MeV[i + 1] > theMeV)
				{
					mevLo = MeV[i];
					mevHi = MeV[i+1];
					muLo = muArr[i];
					muHi = muArr[i + 1];
					break;
				}
			}
			if(muLo ==0) muMass = 0.0;
			else muMass = Interpolation.logTerp(mevLo, mevHi, theMeV, muLo, muHi);
		}
		return muMass;
	}		
}
